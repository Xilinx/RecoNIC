diff --git a/constr/au250/general.xdc b/constr/au250/general.xdc
index 6269b52..8d03fdd 100644
--- a/constr/au250/general.xdc
+++ b/constr/au250/general.xdc
@@ -15,6 +15,11 @@
 # limitations under the License.
 #
 # *************************************************************************
+set_property LOC MMCM_X0Y2 [get_cells ddr4_inst/inst/u_ddr4_infrastructure/gen_mmcme4.u_mmcme_adv_inst]
+set_property CLOCK_DEDICATED_ROUTE BACKBONE [get_pins ddr4_inst/inst/u_ddr4_infrastructure/gen_mmcme4.u_mmcme_adv_inst/CLKIN1]
+set_property INTERNAL_VREF 0.84 [get_iobanks 63]
+set_property INTERNAL_VREF 0.84 [get_iobanks 62]
+set_property INTERNAL_VREF 0.84 [get_iobanks 61]
 set_property CONFIG_VOLTAGE 1.8 [current_design]
 set_property BITSTREAM.CONFIG.CONFIGFALLBACK Enable [current_design]
 set_property BITSTREAM.GENERAL.COMPRESS TRUE [current_design]
@@ -24,4 +29,4 @@ set_property BITSTREAM.CONFIG.CONFIGRATE 72.9 [current_design]
 set_property BITSTREAM.CONFIG.EXTMASTERCCLK_EN disable [current_design]
 set_property BITSTREAM.CONFIG.SPI_FALL_EDGE YES [current_design]
 set_property BITSTREAM.CONFIG.UNUSEDPIN Pullup [current_design]
-set_property BITSTREAM.CONFIG.SPI_32BIT_ADDR Yes [current_design]
+set_property BITSTREAM.CONFIG.SPI_32BIT_ADDR Yes [current_design]
\ No newline at end of file
diff --git a/script/build.tcl b/script/build.tcl
index c689eb6..a86c2c7 100644
--- a/script/build.tcl
+++ b/script/build.tcl
@@ -395,7 +395,8 @@ read_xdc ${build_dir}/run_params.xdc
 # Implement design
 if {$impl} {
     update_compile_order -fileset sources_1
-    _do_impl $jobs {"Vivado Implementation Defaults"}
+    #_do_impl $jobs {"Vivado Implementation Defaults"}
+    _do_impl $jobs {"Performance_ExplorePostRoutePhysOpt"}
 }
 
 if {$post_impl} {
diff --git a/src/box_250mhz/box_250mhz.sv b/src/box_250mhz/box_250mhz.sv
index 913e86c..714e112 100644
--- a/src/box_250mhz/box_250mhz.sv
+++ b/src/box_250mhz/box_250mhz.sv
@@ -1,21 +1,11 @@
-// *************************************************************************
+//==============================================================================
+// Copyright (C) 2023, Advanced Micro Devices, Inc. All rights reserved.
+// Copyright (C) 2022, Xilinx, Inc. All rights reserved.
+// SPDX-License-Identifier: MIT
 //
-// Copyright 2020 Xilinx, Inc.
-//
-// Licensed under the Apache License, Version 2.0 (the "License");
-// you may not use this file except in compliance with the License.
-// You may obtain a copy of the License at
-//
-//     http://www.apache.org/licenses/LICENSE-2.0
-//
-// Unless required by applicable law or agreed to in writing, software
-// distributed under the License is distributed on an "AS IS" BASIS,
-// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-// See the License for the specific language governing permissions and
-// limitations under the License.
-//
-// *************************************************************************
+//==============================================================================
 `timescale 1ns/1ps
+
 module box_250mhz #(
   parameter int MIN_PKT_LEN   = 64,
   parameter int MAX_PKT_LEN   = 1518,
@@ -76,6 +66,87 @@ module box_250mhz #(
   input   [16*NUM_CMAC_PORT-1:0] s_axis_adap_rx_250mhz_tuser_dst,
   output     [NUM_CMAC_PORT-1:0] s_axis_adap_rx_250mhz_tready,
 
+  output                         m_axis_user2rdma_roce_from_cmac_rx_tvalid,
+  output                 [511:0] m_axis_user2rdma_roce_from_cmac_rx_tdata,
+  output                  [63:0] m_axis_user2rdma_roce_from_cmac_rx_tkeep,
+  output                         m_axis_user2rdma_roce_from_cmac_rx_tlast,
+  input                          m_axis_user2rdma_roce_from_cmac_rx_tready,
+
+  input                          s_axis_rdma2user_to_cmac_tx_tvalid,
+  input                  [511:0] s_axis_rdma2user_to_cmac_tx_tdata,
+  input                   [63:0] s_axis_rdma2user_to_cmac_tx_tkeep,
+  input                          s_axis_rdma2user_to_cmac_tx_tlast,
+  output                         s_axis_rdma2user_to_cmac_tx_tready,
+
+  output                         m_axis_user2rdma_from_qdma_tx_tvalid,
+  output                 [511:0] m_axis_user2rdma_from_qdma_tx_tdata,
+  output                  [63:0] m_axis_user2rdma_from_qdma_tx_tkeep,
+  output                         m_axis_user2rdma_from_qdma_tx_tlast,
+  input                          m_axis_user2rdma_from_qdma_tx_tready,
+
+  input                   [63:0] s_axis_rdma2user_ieth_immdt_tdata,
+  input                          s_axis_rdma2user_ieth_immdt_tlast,
+  input                          s_axis_rdma2user_ieth_immdt_tvalid,
+  output                         s_axis_rdma2user_ieth_immdt_trdy,
+
+  input                          s_resp_hndler_i_send_cq_db_cnt_valid,
+  input                   [9 :0] s_resp_hndler_i_send_cq_db_addr,
+  input                   [31:0] s_resp_hndler_i_send_cq_db_cnt,
+  output                         s_resp_hndler_o_send_cq_db_rdy,
+
+  output                  [15:0] m_o_qp_sq_pidb_hndshk,
+  output                  [31:0] m_o_qp_sq_pidb_wr_addr_hndshk,
+  output                         m_o_qp_sq_pidb_wr_valid_hndshk,
+  input                          m_i_qp_sq_pidb_wr_rdy,
+
+  output                  [15:0] m_o_qp_rq_cidb_hndshk,
+  output                  [31:0] m_o_qp_rq_cidb_wr_addr_hndshk,
+  output                         m_o_qp_rq_cidb_wr_valid_hndshk,
+  input                          m_i_qp_rq_cidb_wr_rdy,
+
+  input                          s_rx_pkt_hndler_i_rq_db_data_valid,
+  input                   [9 :0] s_rx_pkt_hndler_i_rq_db_addr,
+  input                   [31:0] s_rx_pkt_hndler_i_rq_db_data,
+  output                         s_rx_pkt_hndler_o_rq_db_rdy,
+
+  output                         m_axi_hw_hndshk_to_sys_mem_awid,
+  output                [63 : 0] m_axi_hw_hndshk_to_sys_mem_awaddr,
+  output                 [3 : 0] m_axi_hw_hndshk_to_sys_mem_awqos,
+  output                 [7 : 0] m_axi_hw_hndshk_to_sys_mem_awlen,
+  output                 [2 : 0] m_axi_hw_hndshk_to_sys_mem_awsize,
+  output                 [1 : 0] m_axi_hw_hndshk_to_sys_mem_awburst,
+  output                 [3 : 0] m_axi_hw_hndshk_to_sys_mem_awcache,
+  output                 [2 : 0] m_axi_hw_hndshk_to_sys_mem_awprot,
+  output                         m_axi_hw_hndshk_to_sys_mem_awvalid,
+  input                          m_axi_hw_hndshk_to_sys_mem_awready,
+  output               [511 : 0] m_axi_hw_hndshk_to_sys_mem_wdata,
+  output                [63 : 0] m_axi_hw_hndshk_to_sys_mem_wstrb,
+  output                         m_axi_hw_hndshk_to_sys_mem_wlast,
+  output                         m_axi_hw_hndshk_to_sys_mem_wvalid,
+  input                          m_axi_hw_hndshk_to_sys_mem_wready,
+  output                         m_axi_hw_hndshk_to_sys_mem_awlock,
+  input                          m_axi_hw_hndshk_to_sys_mem_bid,
+  input                  [1 : 0] m_axi_hw_hndshk_to_sys_mem_bresp,
+  input                          m_axi_hw_hndshk_to_sys_mem_bvalid,
+  output                         m_axi_hw_hndshk_to_sys_mem_bready,
+  output                         m_axi_hw_hndshk_to_sys_mem_arid,
+  output                [63 : 0] m_axi_hw_hndshk_to_sys_mem_araddr,
+  output                 [7 : 0] m_axi_hw_hndshk_to_sys_mem_arlen,
+  output                 [2 : 0] m_axi_hw_hndshk_to_sys_mem_arsize,
+  output                 [1 : 0] m_axi_hw_hndshk_to_sys_mem_arburst,
+  output                 [3 : 0] m_axi_hw_hndshk_to_sys_mem_arcache,
+  output                 [2 : 0] m_axi_hw_hndshk_to_sys_mem_arprot,
+  output                         m_axi_hw_hndshk_to_sys_mem_arvalid,
+  input                          m_axi_hw_hndshk_to_sys_mem_arready,
+  input                          m_axi_hw_hndshk_to_sys_mem_rid,
+  input                [511 : 0] m_axi_hw_hndshk_to_sys_mem_rdata,
+  input                  [1 : 0] m_axi_hw_hndshk_to_sys_mem_rresp,
+  input                          m_axi_hw_hndshk_to_sys_mem_rlast,
+  input                          m_axi_hw_hndshk_to_sys_mem_rvalid,
+  output                         m_axi_hw_hndshk_to_sys_mem_rready,
+  output                         m_axi_hw_hndshk_to_sys_mem_arlock,
+  output                  [3:0]  m_axi_hw_hndshk_to_sys_mem_arqos,
+
   input                   [15:0] mod_rstn,
   output                  [15:0] mod_rst_done,
 
@@ -86,34 +157,167 @@ module box_250mhz #(
   input                          axis_aclk
 );
 
-  wire internal_box_rstn;
-
-  generic_reset #(
-    .NUM_INPUT_CLK  (1),
-    .RESET_DURATION (100)
-  ) reset_inst (
-    .mod_rstn     (box_rstn),
-    .mod_rst_done (box_rst_done),
-    .clk          (axil_aclk),
-    .rstn         (internal_box_rstn)
-  );
-
-  `include "box_250mhz_address_map_inst.vh"
-
-  generate if (USE_PHYS_FUNC == 0) begin
-    // Terminate H2C and C2H interfaces of the box
-    assign s_axis_qdma_h2c_tready     = {NUM_PHYS_FUNC{1'b1}};
-
-    assign m_axis_qdma_c2h_tvalid     = 0;
-    assign m_axis_qdma_c2h_tdata      = 0;
-    assign m_axis_qdma_c2h_tkeep      = 0;
-    assign m_axis_qdma_c2h_tlast      = 0;
-    assign m_axis_qdma_c2h_tuser_size = 0;
-    assign m_axis_qdma_c2h_tuser_src  = 0;
-    assign m_axis_qdma_c2h_tuser_dst  = 0;
-  end
-  endgenerate
-
-  `include "user_plugin_250mhz_inst.vh"
+localparam C_NUM_USER_BLOCK = 1;
+
+logic axil_rstn;
+logic axis_rstn;
+logic [63:0] axis_clk_timer;
+
+generic_reset #(
+  .NUM_INPUT_CLK  (2),
+  .RESET_DURATION (100)
+) reset_inst (
+  .mod_rstn     (box_rstn),
+  .mod_rst_done (box_rst_done),
+  .clk          ({axis_aclk, axil_aclk}),
+  .rstn         ({axis_rstn, axil_rstn})
+);
+
+// Make sure for all the unused reset pair, corresponding bits in
+// "mod_rst_done" are tied to 0
+assign mod_rst_done[15:C_NUM_USER_BLOCK] = {(16-C_NUM_USER_BLOCK){1'b1}};
+assign mod_rst_done[0]                   = box_rst_done;
+
+rdma_onic_plugin rdma_onic_plugin_inst (
+  .s_axil_awvalid            (s_axil_awvalid),
+  .s_axil_awaddr             (s_axil_awaddr),
+  .s_axil_awready            (s_axil_awready),
+  .s_axil_wvalid             (s_axil_wvalid),
+  .s_axil_wdata              (s_axil_wdata),
+  .s_axil_wready             (s_axil_wready),
+  .s_axil_bvalid             (s_axil_bvalid),
+  .s_axil_bresp              (s_axil_bresp),
+  .s_axil_bready             (s_axil_bready),
+  .s_axil_arvalid            (s_axil_arvalid),
+  .s_axil_araddr             (s_axil_araddr),
+  .s_axil_arready            (s_axil_arready),
+  .s_axil_rvalid             (s_axil_rvalid),
+  .s_axil_rdata              (s_axil_rdata),
+  .s_axil_rresp              (s_axil_rresp),
+  .s_axil_rready             (s_axil_rready),
+
+  // Receive packets from CMAC RX path
+  .s_axis_cmac_rx_tvalid     (s_axis_adap_rx_250mhz_tvalid),
+  .s_axis_cmac_rx_tdata      (s_axis_adap_rx_250mhz_tdata),
+  .s_axis_cmac_rx_tkeep      (s_axis_adap_rx_250mhz_tkeep),
+  .s_axis_cmac_rx_tlast      (s_axis_adap_rx_250mhz_tlast),
+  .s_axis_cmac_rx_tuser_size (s_axis_adap_rx_250mhz_tuser_size),
+  .s_axis_cmac_rx_tready     (s_axis_adap_rx_250mhz_tready),
+
+  .m_axis_user2rdma_roce_from_cmac_rx_tvalid (m_axis_user2rdma_roce_from_cmac_rx_tvalid),
+  .m_axis_user2rdma_roce_from_cmac_rx_tdata  (m_axis_user2rdma_roce_from_cmac_rx_tdata),
+  .m_axis_user2rdma_roce_from_cmac_rx_tkeep  (m_axis_user2rdma_roce_from_cmac_rx_tkeep),
+  .m_axis_user2rdma_roce_from_cmac_rx_tlast  (m_axis_user2rdma_roce_from_cmac_rx_tlast),
+  .m_axis_user2rdma_roce_from_cmac_rx_tready (m_axis_user2rdma_roce_from_cmac_rx_tready),
+
+  // Send packets to QDMA RX path
+  .m_axis_qdma_c2h_tvalid                    (m_axis_qdma_c2h_tvalid),
+  .m_axis_qdma_c2h_tdata                     (m_axis_qdma_c2h_tdata),
+  .m_axis_qdma_c2h_tkeep                     (m_axis_qdma_c2h_tkeep),
+  .m_axis_qdma_c2h_tlast                     (m_axis_qdma_c2h_tlast),
+  .m_axis_qdma_c2h_tuser_size                (m_axis_qdma_c2h_tuser_size),
+  .m_axis_qdma_c2h_tready                    (m_axis_qdma_c2h_tready),
+
+  // Get packets from QDMA TX path
+  .s_axis_qdma_h2c_tvalid                    (s_axis_qdma_h2c_tvalid),
+  .s_axis_qdma_h2c_tdata                     (s_axis_qdma_h2c_tdata),
+  .s_axis_qdma_h2c_tkeep                     (s_axis_qdma_h2c_tkeep),
+  .s_axis_qdma_h2c_tlast                     (s_axis_qdma_h2c_tlast),
+  .s_axis_qdma_h2c_tuser_size                (s_axis_qdma_h2c_tuser_size),
+  .s_axis_qdma_h2c_tready                    (s_axis_qdma_h2c_tready),
+
+  .m_axis_user2rdma_from_qdma_tx_tvalid      (m_axis_user2rdma_from_qdma_tx_tvalid),
+  .m_axis_user2rdma_from_qdma_tx_tdata       (m_axis_user2rdma_from_qdma_tx_tdata),
+  .m_axis_user2rdma_from_qdma_tx_tkeep       (m_axis_user2rdma_from_qdma_tx_tkeep),
+  .m_axis_user2rdma_from_qdma_tx_tlast       (m_axis_user2rdma_from_qdma_tx_tlast),
+  .m_axis_user2rdma_from_qdma_tx_tready      (m_axis_user2rdma_from_qdma_tx_tready),
+
+  // Send packets to CMAC TX path
+  .m_axis_cmac_tx_tvalid                     (m_axis_adap_tx_250mhz_tvalid),
+  .m_axis_cmac_tx_tdata                      (m_axis_adap_tx_250mhz_tdata),
+  .m_axis_cmac_tx_tkeep                      (m_axis_adap_tx_250mhz_tkeep),
+  .m_axis_cmac_tx_tlast                      (m_axis_adap_tx_250mhz_tlast),
+  .m_axis_cmac_tx_tuser_size                 (m_axis_adap_tx_250mhz_tuser_size),
+  .m_axis_cmac_tx_tready                     (m_axis_adap_tx_250mhz_tready),
+
+  .s_axis_rdma2user_to_cmac_tx_tvalid        (s_axis_rdma2user_to_cmac_tx_tvalid),
+  .s_axis_rdma2user_to_cmac_tx_tdata         (s_axis_rdma2user_to_cmac_tx_tdata),
+  .s_axis_rdma2user_to_cmac_tx_tkeep         (s_axis_rdma2user_to_cmac_tx_tkeep),
+  .s_axis_rdma2user_to_cmac_tx_tlast         (s_axis_rdma2user_to_cmac_tx_tlast),
+  .s_axis_rdma2user_to_cmac_tx_tready        (s_axis_rdma2user_to_cmac_tx_tready),
+
+  .m_axi_hw_hndshk_to_sys_mem_awid           (m_axi_hw_hndshk_to_sys_mem_awid),
+  .m_axi_hw_hndshk_to_sys_mem_awaddr         (m_axi_hw_hndshk_to_sys_mem_awaddr),
+  .m_axi_hw_hndshk_to_sys_mem_awqos          (m_axi_hw_hndshk_to_sys_mem_awqos),
+  .m_axi_hw_hndshk_to_sys_mem_awlen          (m_axi_hw_hndshk_to_sys_mem_awlen),
+  .m_axi_hw_hndshk_to_sys_mem_awsize         (m_axi_hw_hndshk_to_sys_mem_awsize),
+  .m_axi_hw_hndshk_to_sys_mem_awburst        (m_axi_hw_hndshk_to_sys_mem_awburst),
+  .m_axi_hw_hndshk_to_sys_mem_awcache        (m_axi_hw_hndshk_to_sys_mem_awcache),
+  .m_axi_hw_hndshk_to_sys_mem_awprot         (m_axi_hw_hndshk_to_sys_mem_awprot),
+  .m_axi_hw_hndshk_to_sys_mem_awvalid        (m_axi_hw_hndshk_to_sys_mem_awvalid),
+  .m_axi_hw_hndshk_to_sys_mem_awready        (m_axi_hw_hndshk_to_sys_mem_awready),
+  .m_axi_hw_hndshk_to_sys_mem_wdata          (m_axi_hw_hndshk_to_sys_mem_wdata),
+  .m_axi_hw_hndshk_to_sys_mem_wstrb          (m_axi_hw_hndshk_to_sys_mem_wstrb),
+  .m_axi_hw_hndshk_to_sys_mem_wlast          (m_axi_hw_hndshk_to_sys_mem_wlast),
+  .m_axi_hw_hndshk_to_sys_mem_wvalid         (m_axi_hw_hndshk_to_sys_mem_wvalid),
+  .m_axi_hw_hndshk_to_sys_mem_wready         (m_axi_hw_hndshk_to_sys_mem_wready),
+  .m_axi_hw_hndshk_to_sys_mem_awlock         (m_axi_hw_hndshk_to_sys_mem_awlock),
+  .m_axi_hw_hndshk_to_sys_mem_bid            (m_axi_hw_hndshk_to_sys_mem_bid),
+  .m_axi_hw_hndshk_to_sys_mem_bresp          (m_axi_hw_hndshk_to_sys_mem_bresp),
+  .m_axi_hw_hndshk_to_sys_mem_bvalid         (m_axi_hw_hndshk_to_sys_mem_bvalid),
+  .m_axi_hw_hndshk_to_sys_mem_bready         (m_axi_hw_hndshk_to_sys_mem_bready),
+  .m_axi_hw_hndshk_to_sys_mem_arid           (m_axi_hw_hndshk_to_sys_mem_arid),
+  .m_axi_hw_hndshk_to_sys_mem_araddr         (m_axi_hw_hndshk_to_sys_mem_araddr),
+  .m_axi_hw_hndshk_to_sys_mem_arlen          (m_axi_hw_hndshk_to_sys_mem_arlen),
+  .m_axi_hw_hndshk_to_sys_mem_arsize         (m_axi_hw_hndshk_to_sys_mem_arsize),
+  .m_axi_hw_hndshk_to_sys_mem_arburst        (m_axi_hw_hndshk_to_sys_mem_arburst),
+  .m_axi_hw_hndshk_to_sys_mem_arcache        (m_axi_hw_hndshk_to_sys_mem_arcache),
+  .m_axi_hw_hndshk_to_sys_mem_arprot         (m_axi_hw_hndshk_to_sys_mem_arprot),
+  .m_axi_hw_hndshk_to_sys_mem_arvalid        (m_axi_hw_hndshk_to_sys_mem_arvalid),
+  .m_axi_hw_hndshk_to_sys_mem_arready        (m_axi_hw_hndshk_to_sys_mem_arready),
+  .m_axi_hw_hndshk_to_sys_mem_rid            (m_axi_hw_hndshk_to_sys_mem_rid),
+  .m_axi_hw_hndshk_to_sys_mem_rdata          (m_axi_hw_hndshk_to_sys_mem_rdata),
+  .m_axi_hw_hndshk_to_sys_mem_rresp          (m_axi_hw_hndshk_to_sys_mem_rresp),
+  .m_axi_hw_hndshk_to_sys_mem_rlast          (m_axi_hw_hndshk_to_sys_mem_rlast),
+  .m_axi_hw_hndshk_to_sys_mem_rvalid         (m_axi_hw_hndshk_to_sys_mem_rvalid),
+  .m_axi_hw_hndshk_to_sys_mem_rready         (m_axi_hw_hndshk_to_sys_mem_rready),
+  .m_axi_hw_hndshk_to_sys_mem_arlock         (m_axi_hw_hndshk_to_sys_mem_arlock),
+  .m_axi_hw_hndshk_to_sys_mem_arqos          (m_axi_hw_hndshk_to_sys_mem_arqos),
+
+  .s_resp_hndler_i_send_cq_db_cnt_valid      (s_resp_hndler_i_send_cq_db_cnt_valid),
+  .s_resp_hndler_i_send_cq_db_addr           (s_resp_hndler_i_send_cq_db_addr),
+  .s_resp_hndler_i_send_cq_db_cnt            (s_resp_hndler_i_send_cq_db_cnt),
+  .s_resp_hndler_o_send_cq_db_rdy            (s_resp_hndler_o_send_cq_db_rdy),
+
+  .m_o_qp_sq_pidb_hndshk                     (m_o_qp_sq_pidb_hndshk),
+  .m_o_qp_sq_pidb_wr_addr_hndshk             (m_o_qp_sq_pidb_wr_addr_hndshk),
+  .m_o_qp_sq_pidb_wr_valid_hndshk            (m_o_qp_sq_pidb_wr_valid_hndshk),
+  .m_i_qp_sq_pidb_wr_rdy                     (m_i_qp_sq_pidb_wr_rdy),
+
+  .axil_aclk  (axil_aclk),
+  .axil_rstn  (axil_rstn),
+  .axis_aclk  (axis_aclk),
+  .axis_rstn  (axis_rstn)
+);
+
+assign m_axis_qdma_c2h_tuser_src = 16'd0;
+assign m_axis_qdma_c2h_tuser_dst = 16'h1 << 0;
+assign m_axis_adap_tx_250mhz_tuser_src = 16'd0;
+assign m_axis_adap_tx_250mhz_tuser_dst = 16'h1 << 6;
+
+// TODO: Disable hardware handshaking for doorbell ringing in the current implementation
+//assign s_resp_hndler_o_send_cq_db_rdy = 1'b0;
+assign s_rx_pkt_hndler_o_rq_db_rdy    = 1'b0;
+/*
+assign m_o_qp_sq_pidb_hndshk          = 0;
+assign m_o_qp_sq_pidb_wr_addr_hndshk  = 0;
+assign m_o_qp_sq_pidb_wr_valid_hndshk = 0;*/
+
+assign m_o_qp_rq_cidb_hndshk          = 0;
+assign m_o_qp_rq_cidb_wr_addr_hndshk  = 0;
+assign m_o_qp_rq_cidb_wr_valid_hndshk = 0;
+
+// TODO: Disable ieth and immdt data
+assign s_axis_rdma2user_ieth_immdt_trdy = 1'b1;
 
 endmodule: box_250mhz
diff --git a/src/cmac_subsystem/vivado_ip/cmac_subsystem_axi_crossbar.tcl b/src/cmac_subsystem/vivado_ip/cmac_subsystem_axi_crossbar.tcl
index 96163a8..74a1627 100644
--- a/src/cmac_subsystem/vivado_ip/cmac_subsystem_axi_crossbar.tcl
+++ b/src/cmac_subsystem/vivado_ip/cmac_subsystem_axi_crossbar.tcl
@@ -17,7 +17,7 @@
 # *************************************************************************
 set axi_crossbar cmac_subsystem_axi_crossbar
 create_ip -name axi_crossbar -vendor xilinx.com -library ip -module_name $axi_crossbar -dir ${ip_build_dir}
-set_property -dict { 
+set_property -dict {
     CONFIG.NUM_MI {2}
     CONFIG.PROTOCOL {AXI4LITE}
     CONFIG.CONNECTIVITY_MODE {SASD}
diff --git a/src/cmac_subsystem/vivado_ip/cmac_usplus_0_au200.tcl b/src/cmac_subsystem/vivado_ip/cmac_usplus_0_au200.tcl
index 4e61c0f..38bdb5e 100644
--- a/src/cmac_subsystem/vivado_ip/cmac_usplus_0_au200.tcl
+++ b/src/cmac_subsystem/vivado_ip/cmac_usplus_0_au200.tcl
@@ -1,20 +1,8 @@
-# *************************************************************************
+#==============================================================================
+# Copyright (C) 2023, Advanced Micro Devices, Inc. All rights reserved.
+# SPDX-License-Identifier: MIT
 #
-# Copyright 2020 Xilinx, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-# *************************************************************************
+#==============================================================================
 set cmac_usplus cmac_usplus_0
 create_ip -name cmac_usplus -vendor xilinx.com -library ip -module_name $cmac_usplus -dir ${ip_build_dir}
 set_property -dict {
diff --git a/src/cmac_subsystem/vivado_ip/cmac_usplus_0_au250.tcl b/src/cmac_subsystem/vivado_ip/cmac_usplus_0_au250.tcl
index 3a5fd12..8c42343 100644
--- a/src/cmac_subsystem/vivado_ip/cmac_usplus_0_au250.tcl
+++ b/src/cmac_subsystem/vivado_ip/cmac_usplus_0_au250.tcl
@@ -1,20 +1,8 @@
-# *************************************************************************
+#==============================================================================
+# Copyright (C) 2023, Advanced Micro Devices, Inc. All rights reserved.
+# SPDX-License-Identifier: MIT
 #
-# Copyright 2020 Xilinx, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-# *************************************************************************
+#==============================================================================
 set cmac_usplus cmac_usplus_0
 create_ip -name cmac_usplus -vendor xilinx.com -library ip -module_name $cmac_usplus -dir ${ip_build_dir}
 set_property -dict {
diff --git a/src/cmac_subsystem/vivado_ip/cmac_usplus_0_au280.tcl b/src/cmac_subsystem/vivado_ip/cmac_usplus_0_au280.tcl
index 83e48ea..5834c9a 100644
--- a/src/cmac_subsystem/vivado_ip/cmac_usplus_0_au280.tcl
+++ b/src/cmac_subsystem/vivado_ip/cmac_usplus_0_au280.tcl
@@ -1,20 +1,8 @@
-# *************************************************************************
+#==============================================================================
+# Copyright (C) 2023, Advanced Micro Devices, Inc. All rights reserved.
+# SPDX-License-Identifier: MIT
 #
-# Copyright 2020 Xilinx, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-# *************************************************************************
+#==============================================================================
 set cmac_usplus cmac_usplus_0
 create_ip -name cmac_usplus -vendor xilinx.com -library ip -module_name $cmac_usplus -dir ${ip_build_dir}
 set_property -dict {
diff --git a/src/cmac_subsystem/vivado_ip/cmac_usplus_0_au50.tcl b/src/cmac_subsystem/vivado_ip/cmac_usplus_0_au50.tcl
index 5bbf4b7..e1d2aab 100644
--- a/src/cmac_subsystem/vivado_ip/cmac_usplus_0_au50.tcl
+++ b/src/cmac_subsystem/vivado_ip/cmac_usplus_0_au50.tcl
@@ -1,20 +1,8 @@
-# *************************************************************************
+#==============================================================================
+# Copyright (C) 2023, Advanced Micro Devices, Inc. All rights reserved.
+# SPDX-License-Identifier: MIT
 #
-# Copyright 2020 Xilinx, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-# *************************************************************************
+#==============================================================================
 set cmac_usplus cmac_usplus_0
 create_ip -name cmac_usplus -vendor xilinx.com -library ip -module_name $cmac_usplus -dir ${ip_build_dir}
 set_property -dict {
diff --git a/src/cmac_subsystem/vivado_ip/cmac_usplus_0_soc250.tcl b/src/cmac_subsystem/vivado_ip/cmac_usplus_0_soc250.tcl
index 654a17b..51d20c2 100644
--- a/src/cmac_subsystem/vivado_ip/cmac_usplus_0_soc250.tcl
+++ b/src/cmac_subsystem/vivado_ip/cmac_usplus_0_soc250.tcl
@@ -1,20 +1,8 @@
-# *************************************************************************
+#==============================================================================
+# Copyright (C) 2023, Advanced Micro Devices, Inc. All rights reserved.
+# SPDX-License-Identifier: MIT
 #
-# Copyright 2020 Xilinx, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-# *************************************************************************
+#==============================================================================
 set cmac_usplus cmac_usplus_0
 create_ip -name cmac_usplus -vendor xilinx.com -library ip -module_name $cmac_usplus -dir ${ip_build_dir}
 set_property -dict {
diff --git a/src/cmac_subsystem/vivado_ip/cmac_usplus_1_au200.tcl b/src/cmac_subsystem/vivado_ip/cmac_usplus_1_au200.tcl
index 189f50f..bf72aa1 100644
--- a/src/cmac_subsystem/vivado_ip/cmac_usplus_1_au200.tcl
+++ b/src/cmac_subsystem/vivado_ip/cmac_usplus_1_au200.tcl
@@ -1,20 +1,8 @@
-# *************************************************************************
+#==============================================================================
+# Copyright (C) 2023, Advanced Micro Devices, Inc. All rights reserved.
+# SPDX-License-Identifier: MIT
 #
-# Copyright 2020 Xilinx, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-# *************************************************************************
+#==============================================================================
 set cmac_usplus cmac_usplus_1
 create_ip -name cmac_usplus -vendor xilinx.com -library ip -module_name $cmac_usplus -dir ${ip_build_dir}
 set_property -dict {
diff --git a/src/cmac_subsystem/vivado_ip/cmac_usplus_1_au250.tcl b/src/cmac_subsystem/vivado_ip/cmac_usplus_1_au250.tcl
index 394bbdb..69b9418 100644
--- a/src/cmac_subsystem/vivado_ip/cmac_usplus_1_au250.tcl
+++ b/src/cmac_subsystem/vivado_ip/cmac_usplus_1_au250.tcl
@@ -1,20 +1,8 @@
-# *************************************************************************
+#==============================================================================
+# Copyright (C) 2023, Advanced Micro Devices, Inc. All rights reserved.
+# SPDX-License-Identifier: MIT
 #
-# Copyright 2020 Xilinx, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-# *************************************************************************
+#==============================================================================
 set cmac_usplus cmac_usplus_1
 create_ip -name cmac_usplus -vendor xilinx.com -library ip -module_name $cmac_usplus -dir ${ip_build_dir}
 set_property -dict {
diff --git a/src/cmac_subsystem/vivado_ip/cmac_usplus_1_au280.tcl b/src/cmac_subsystem/vivado_ip/cmac_usplus_1_au280.tcl
index bedde6f..1f94615 100644
--- a/src/cmac_subsystem/vivado_ip/cmac_usplus_1_au280.tcl
+++ b/src/cmac_subsystem/vivado_ip/cmac_usplus_1_au280.tcl
@@ -1,20 +1,8 @@
-# *************************************************************************
+#==============================================================================
+# Copyright (C) 2023, Advanced Micro Devices, Inc. All rights reserved.
+# SPDX-License-Identifier: MIT
 #
-# Copyright 2020 Xilinx, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-# *************************************************************************
+#==============================================================================
 set cmac_usplus cmac_usplus_1
 create_ip -name cmac_usplus -vendor xilinx.com -library ip -module_name $cmac_usplus -dir ${ip_build_dir}
 set_property -dict {
diff --git a/src/cmac_subsystem/vivado_ip/cmac_usplus_1_soc250.tcl b/src/cmac_subsystem/vivado_ip/cmac_usplus_1_soc250.tcl
index 623a3df..db517c9 100644
--- a/src/cmac_subsystem/vivado_ip/cmac_usplus_1_soc250.tcl
+++ b/src/cmac_subsystem/vivado_ip/cmac_usplus_1_soc250.tcl
@@ -1,20 +1,8 @@
-# *************************************************************************
+#==============================================================================
+# Copyright (C) 2023, Advanced Micro Devices, Inc. All rights reserved.
+# SPDX-License-Identifier: MIT
 #
-# Copyright 2020 Xilinx, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-# *************************************************************************
+#==============================================================================
 set cmac_usplus cmac_usplus_1
 create_ip -name cmac_usplus -vendor xilinx.com -library ip -module_name $cmac_usplus -dir ${ip_build_dir}
 set_property -dict {
diff --git a/src/cmac_subsystem/vivado_ip/vivado_ip.tcl b/src/cmac_subsystem/vivado_ip/vivado_ip.tcl
index 92ac2f6..65d73d9 100644
--- a/src/cmac_subsystem/vivado_ip/vivado_ip.tcl
+++ b/src/cmac_subsystem/vivado_ip/vivado_ip.tcl
@@ -1,20 +1,8 @@
-# *************************************************************************
+#==============================================================================
+# Copyright (C) 2023, Advanced Micro Devices, Inc. All rights reserved.
+# SPDX-License-Identifier: MIT
 #
-# Copyright 2020 Xilinx, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-# *************************************************************************
+#==============================================================================
 set ips {
     cmac_usplus_0
     cmac_subsystem_axi_crossbar
diff --git a/src/open_nic_shell.sv b/src/open_nic_shell.sv
index e2f6c3f..44370d3 100644
--- a/src/open_nic_shell.sv
+++ b/src/open_nic_shell.sv
@@ -41,6 +41,23 @@ module open_nic_shell #(
   input                          pcie_refclk_n,
   input                          pcie_rstn,
 
+  output                  [16:0] c0_ddr4_adr,
+  output                   [1:0] c0_ddr4_ba,
+  output                   [0:0] c0_ddr4_cke,
+  output                   [0:0] c0_ddr4_cs_n,
+  inout                   [71:0] c0_ddr4_dq,
+  output                         c0_ddr4_parity,
+  output                   [1:0] c0_ddr4_bg,
+  inout                   [17:0] c0_ddr4_dqs_c,
+  inout                   [17:0] c0_ddr4_dqs_t,
+  output                   [0:0] c0_ddr4_odt,
+  output                         c0_ddr4_act_n,
+  output                   [0:0] c0_ddr4_ck_c,
+  output                   [0:0] c0_ddr4_ck_t,
+  input                          c0_sys_clk_p,
+  input                          c0_sys_clk_n,
+  output                         c0_ddr4_reset_n,
+
   input    [4*NUM_CMAC_PORT-1:0] qsfp_rxp,
   input    [4*NUM_CMAC_PORT-1:0] qsfp_rxn,
   output   [4*NUM_CMAC_PORT-1:0] qsfp_txp,
@@ -147,27 +164,27 @@ module open_nic_shell #(
   end
 
 `ifdef __synthesis__
-  wire         powerup_rstn;
-  wire         pcie_user_lnk_up;
-  wire         pcie_phy_ready;
+  logic         powerup_rstn;
+  logic         pcie_user_lnk_up;
+  logic         pcie_phy_ready;
 
   // BAR2-mapped master AXI-Lite feeding into system configuration block
-  wire         axil_pcie_awvalid;
-  wire  [31:0] axil_pcie_awaddr;
-  wire         axil_pcie_awready;
-  wire         axil_pcie_wvalid;
-  wire  [31:0] axil_pcie_wdata;
-  wire         axil_pcie_wready;
-  wire         axil_pcie_bvalid;
-  wire   [1:0] axil_pcie_bresp;
-  wire         axil_pcie_bready;
-  wire         axil_pcie_arvalid;
-  wire  [31:0] axil_pcie_araddr;
-  wire         axil_pcie_arready;
-  wire         axil_pcie_rvalid;
-  wire  [31:0] axil_pcie_rdata;
-  wire   [1:0] axil_pcie_rresp;
-  wire         axil_pcie_rready;
+  logic         axil_pcie_awvalid;
+  logic  [31:0] axil_pcie_awaddr;
+  logic         axil_pcie_awready;
+  logic         axil_pcie_wvalid;
+  logic  [31:0] axil_pcie_wdata;
+  logic         axil_pcie_wready;
+  logic         axil_pcie_bvalid;
+  logic   [1:0] axil_pcie_bresp;
+  logic         axil_pcie_bready;
+  logic         axil_pcie_arvalid;
+  logic  [31:0] axil_pcie_araddr;
+  logic         axil_pcie_arready;
+  logic         axil_pcie_rvalid;
+  logic  [31:0] axil_pcie_rdata;
+  logic   [1:0] axil_pcie_rresp;
+  logic         axil_pcie_rready;
 
   IBUF pcie_rstn_ibuf_inst (.I(pcie_rstn), .O(pcie_rstn_int));
 
@@ -187,187 +204,771 @@ module open_nic_shell #(
 `endif
 `endif
 
-  wire                         axil_qdma_awvalid;
-  wire                  [31:0] axil_qdma_awaddr;
-  wire                         axil_qdma_awready;
-  wire                         axil_qdma_wvalid;
-  wire                  [31:0] axil_qdma_wdata;
-  wire                         axil_qdma_wready;
-  wire                         axil_qdma_bvalid;
-  wire                   [1:0] axil_qdma_bresp;
-  wire                         axil_qdma_bready;
-  wire                         axil_qdma_arvalid;
-  wire                  [31:0] axil_qdma_araddr;
-  wire                         axil_qdma_arready;
-  wire                         axil_qdma_rvalid;
-  wire                  [31:0] axil_qdma_rdata;
-  wire                   [1:0] axil_qdma_rresp;
-  wire                         axil_qdma_rready;
-
-  wire     [NUM_CMAC_PORT-1:0] axil_adap_awvalid;
-  wire  [32*NUM_CMAC_PORT-1:0] axil_adap_awaddr;
-  wire     [NUM_CMAC_PORT-1:0] axil_adap_awready;
-  wire     [NUM_CMAC_PORT-1:0] axil_adap_wvalid;
-  wire  [32*NUM_CMAC_PORT-1:0] axil_adap_wdata;
-  wire     [NUM_CMAC_PORT-1:0] axil_adap_wready;
-  wire     [NUM_CMAC_PORT-1:0] axil_adap_bvalid;
-  wire   [2*NUM_CMAC_PORT-1:0] axil_adap_bresp;
-  wire     [NUM_CMAC_PORT-1:0] axil_adap_bready;
-  wire     [NUM_CMAC_PORT-1:0] axil_adap_arvalid;
-  wire  [32*NUM_CMAC_PORT-1:0] axil_adap_araddr;
-  wire     [NUM_CMAC_PORT-1:0] axil_adap_arready;
-  wire     [NUM_CMAC_PORT-1:0] axil_adap_rvalid;
-  wire  [32*NUM_CMAC_PORT-1:0] axil_adap_rdata;
-  wire   [2*NUM_CMAC_PORT-1:0] axil_adap_rresp;
-  wire     [NUM_CMAC_PORT-1:0] axil_adap_rready;
-
-  wire     [NUM_CMAC_PORT-1:0] axil_cmac_awvalid;
-  wire  [32*NUM_CMAC_PORT-1:0] axil_cmac_awaddr;
-  wire     [NUM_CMAC_PORT-1:0] axil_cmac_awready;
-  wire     [NUM_CMAC_PORT-1:0] axil_cmac_wvalid;
-  wire  [32*NUM_CMAC_PORT-1:0] axil_cmac_wdata;
-  wire     [NUM_CMAC_PORT-1:0] axil_cmac_wready;
-  wire     [NUM_CMAC_PORT-1:0] axil_cmac_bvalid;
-  wire   [2*NUM_CMAC_PORT-1:0] axil_cmac_bresp;
-  wire     [NUM_CMAC_PORT-1:0] axil_cmac_bready;
-  wire     [NUM_CMAC_PORT-1:0] axil_cmac_arvalid;
-  wire  [32*NUM_CMAC_PORT-1:0] axil_cmac_araddr;
-  wire     [NUM_CMAC_PORT-1:0] axil_cmac_arready;
-  wire     [NUM_CMAC_PORT-1:0] axil_cmac_rvalid;
-  wire  [32*NUM_CMAC_PORT-1:0] axil_cmac_rdata;
-  wire   [2*NUM_CMAC_PORT-1:0] axil_cmac_rresp;
-  wire     [NUM_CMAC_PORT-1:0] axil_cmac_rready;
-
-  wire                         axil_box0_awvalid;
-  wire                  [31:0] axil_box0_awaddr;
-  wire                         axil_box0_awready;
-  wire                         axil_box0_wvalid;
-  wire                  [31:0] axil_box0_wdata;
-  wire                         axil_box0_wready;
-  wire                         axil_box0_bvalid;
-  wire                   [1:0] axil_box0_bresp;
-  wire                         axil_box0_bready;
-  wire                         axil_box0_arvalid;
-  wire                  [31:0] axil_box0_araddr;
-  wire                         axil_box0_arready;
-  wire                         axil_box0_rvalid;
-  wire                  [31:0] axil_box0_rdata;
-  wire                   [1:0] axil_box0_rresp;
-  wire                         axil_box0_rready;
-
-  wire                         axil_box1_awvalid;
-  wire                  [31:0] axil_box1_awaddr;
-  wire                         axil_box1_awready;
-  wire                         axil_box1_wvalid;
-  wire                  [31:0] axil_box1_wdata;
-  wire                         axil_box1_wready;
-  wire                         axil_box1_bvalid;
-  wire                   [1:0] axil_box1_bresp;
-  wire                         axil_box1_bready;
-  wire                         axil_box1_arvalid;
-  wire                  [31:0] axil_box1_araddr;
-  wire                         axil_box1_arready;
-  wire                         axil_box1_rvalid;
-  wire                  [31:0] axil_box1_rdata;
-  wire                   [1:0] axil_box1_rresp;
-  wire                         axil_box1_rready;
+  logic                         axil_qdma_awvalid;
+  logic                  [31:0] axil_qdma_awaddr;
+  logic                         axil_qdma_awready;
+  logic                         axil_qdma_wvalid;
+  logic                  [31:0] axil_qdma_wdata;
+  logic                         axil_qdma_wready;
+  logic                         axil_qdma_bvalid;
+  logic                   [1:0] axil_qdma_bresp;
+  logic                         axil_qdma_bready;
+  logic                         axil_qdma_arvalid;
+  logic                  [31:0] axil_qdma_araddr;
+  logic                         axil_qdma_arready;
+  logic                         axil_qdma_rvalid;
+  logic                  [31:0] axil_qdma_rdata;
+  logic                   [1:0] axil_qdma_rresp;
+  logic                         axil_qdma_rready;
+
+  (* mark_debug = "true" *) logic                         axi_qdma_mm_awready;
+  (* mark_debug = "true" *) logic                         axi_qdma_mm_wready;
+  (* mark_debug = "true" *) logic                   [3:0] axi_qdma_mm_bid;
+  (* mark_debug = "true" *) logic                   [1:0] axi_qdma_mm_bresp;
+  (* mark_debug = "true" *) logic                         axi_qdma_mm_bvalid;
+  (* mark_debug = "true" *) logic                         axi_qdma_mm_arready;
+  (* mark_debug = "true" *) logic                   [3:0] axi_qdma_mm_rid;
+  (* mark_debug = "true" *) logic                 [511:0] axi_qdma_mm_rdata;
+  (* mark_debug = "true" *) logic                   [1:0] axi_qdma_mm_rresp;
+  (* mark_debug = "true" *) logic                         axi_qdma_mm_rlast;
+  (* mark_debug = "true" *) logic                         axi_qdma_mm_rvalid;
+  (* mark_debug = "true" *) logic                   [3:0] axi_qdma_mm_awid;
+  (* mark_debug = "true" *) logic                  [63:0] axi_qdma_mm_awaddr;
+  (* mark_debug = "true" *) logic                  [31:0] axi_qdma_mm_awuser;
+  (* mark_debug = "true" *) logic                   [7:0] axi_qdma_mm_awlen;
+  (* mark_debug = "true" *) logic                   [2:0] axi_qdma_mm_awsize;
+  (* mark_debug = "true" *) logic                   [1:0] axi_qdma_mm_awburst;
+  (* mark_debug = "true" *) logic                   [2:0] axi_qdma_mm_awprot;
+  (* mark_debug = "true" *) logic                         axi_qdma_mm_awvalid;
+  (* mark_debug = "true" *) logic                         axi_qdma_mm_awlock;
+  (* mark_debug = "true" *) logic                   [3:0] axi_qdma_mm_awcache;
+  (* mark_debug = "true" *) logic                 [511:0] axi_qdma_mm_wdata;
+  (* mark_debug = "true" *) logic                  [63:0] axi_qdma_mm_wuser;
+  (* mark_debug = "true" *) logic                  [63:0] axi_qdma_mm_wstrb;
+  (* mark_debug = "true" *) logic                         axi_qdma_mm_wlast;
+  (* mark_debug = "true" *) logic                         axi_qdma_mm_wvalid;
+  (* mark_debug = "true" *) logic                         axi_qdma_mm_bready;
+  (* mark_debug = "true" *) logic                   [3:0] axi_qdma_mm_arid;
+  (* mark_debug = "true" *) logic                  [63:0] axi_qdma_mm_araddr;
+  (* mark_debug = "true" *) logic                  [31:0] axi_qdma_mm_aruser;
+  (* mark_debug = "true" *) logic                   [7:0] axi_qdma_mm_arlen;
+  (* mark_debug = "true" *) logic                   [2:0] axi_qdma_mm_arsize;
+  (* mark_debug = "true" *) logic                   [1:0] axi_qdma_mm_arburst;
+  (* mark_debug = "true" *) logic                   [2:0] axi_qdma_mm_arprot;
+  (* mark_debug = "true" *) logic                         axi_qdma_mm_arvalid;
+  (* mark_debug = "true" *) logic                         axi_qdma_mm_arlock;
+  (* mark_debug = "true" *) logic                   [3:0] axi_qdma_mm_arcache;
+  (* mark_debug = "true" *) logic                         axi_qdma_mm_rready;
+
+  // QDMA control/status register interface
+  logic                         qdma_csr_prog_done;
+  logic                  [31:0] axil_qdma_csr_awaddr;
+  logic                         axil_qdma_csr_awvalid;
+  logic                         axil_qdma_csr_awready;
+  logic                  [31:0] axil_qdma_csr_wdata;
+  logic                         axil_qdma_csr_wvalid;
+  logic                         axil_qdma_csr_wready;
+  logic                         axil_qdma_csr_bvalid;
+  logic                   [1:0] axil_qdma_csr_bresp;
+  logic                         axil_qdma_csr_bready;
+  logic                  [31:0] axil_qdma_csr_araddr;
+  logic                         axil_qdma_csr_arvalid;
+  logic                         axil_qdma_csr_arready;
+  logic                  [31:0] axil_qdma_csr_rdata;
+  logic                   [1:0] axil_qdma_csr_rresp;
+  logic                         axil_qdma_csr_rvalid;
+  logic                         axil_qdma_csr_rready;
+
+  logic     [NUM_CMAC_PORT-1:0] axil_adap_awvalid;
+  logic  [32*NUM_CMAC_PORT-1:0] axil_adap_awaddr;
+  logic     [NUM_CMAC_PORT-1:0] axil_adap_awready;
+  logic     [NUM_CMAC_PORT-1:0] axil_adap_wvalid;
+  logic  [32*NUM_CMAC_PORT-1:0] axil_adap_wdata;
+  logic     [NUM_CMAC_PORT-1:0] axil_adap_wready;
+  logic     [NUM_CMAC_PORT-1:0] axil_adap_bvalid;
+  logic   [2*NUM_CMAC_PORT-1:0] axil_adap_bresp;
+  logic     [NUM_CMAC_PORT-1:0] axil_adap_bready;
+  logic     [NUM_CMAC_PORT-1:0] axil_adap_arvalid;
+  logic  [32*NUM_CMAC_PORT-1:0] axil_adap_araddr;
+  logic     [NUM_CMAC_PORT-1:0] axil_adap_arready;
+  logic     [NUM_CMAC_PORT-1:0] axil_adap_rvalid;
+  logic  [32*NUM_CMAC_PORT-1:0] axil_adap_rdata;
+  logic   [2*NUM_CMAC_PORT-1:0] axil_adap_rresp;
+  logic     [NUM_CMAC_PORT-1:0] axil_adap_rready;
+
+  logic     [NUM_CMAC_PORT-1:0] axil_cmac_awvalid;
+  logic  [32*NUM_CMAC_PORT-1:0] axil_cmac_awaddr;
+  logic     [NUM_CMAC_PORT-1:0] axil_cmac_awready;
+  logic     [NUM_CMAC_PORT-1:0] axil_cmac_wvalid;
+  logic  [32*NUM_CMAC_PORT-1:0] axil_cmac_wdata;
+  logic     [NUM_CMAC_PORT-1:0] axil_cmac_wready;
+  logic     [NUM_CMAC_PORT-1:0] axil_cmac_bvalid;
+  logic   [2*NUM_CMAC_PORT-1:0] axil_cmac_bresp;
+  logic     [NUM_CMAC_PORT-1:0] axil_cmac_bready;
+  logic     [NUM_CMAC_PORT-1:0] axil_cmac_arvalid;
+  logic  [32*NUM_CMAC_PORT-1:0] axil_cmac_araddr;
+  logic     [NUM_CMAC_PORT-1:0] axil_cmac_arready;
+  logic     [NUM_CMAC_PORT-1:0] axil_cmac_rvalid;
+  logic  [32*NUM_CMAC_PORT-1:0] axil_cmac_rdata;
+  logic   [2*NUM_CMAC_PORT-1:0] axil_cmac_rresp;
+  logic     [NUM_CMAC_PORT-1:0] axil_cmac_rready;
+
+  // AXIL interface to the RDMA engine
+  (* mark_debug = "true" *) logic                         axil_rdma_awvalid;
+  (* mark_debug = "true" *) logic                  [31:0] axil_rdma_awaddr;
+  (* mark_debug = "true" *) logic                         axil_rdma_awready;
+  (* mark_debug = "true" *) logic                         axil_rdma_wvalid;
+  (* mark_debug = "true" *) logic                  [31:0] axil_rdma_wdata;
+  (* mark_debug = "true" *) logic                         axil_rdma_wready;
+  (* mark_debug = "true" *) logic                         axil_rdma_bvalid;
+  (* mark_debug = "true" *) logic                   [1:0] axil_rdma_bresp;
+  (* mark_debug = "true" *) logic                         axil_rdma_bready;
+  (* mark_debug = "true" *) logic                         axil_rdma_arvalid;
+  (* mark_debug = "true" *) logic                  [31:0] axil_rdma_araddr;
+  (* mark_debug = "true" *) logic                         axil_rdma_arready;
+  (* mark_debug = "true" *) logic                         axil_rdma_rvalid;
+  (* mark_debug = "true" *) logic                  [31:0] axil_rdma_rdata;
+  (* mark_debug = "true" *) logic                   [1:0] axil_rdma_rresp;
+  (* mark_debug = "true" *) logic                         axil_rdma_rready;
+
+  (* mark_debug = "true" *) logic                         axil_rdma_SQPI_wr;
+  (* mark_debug = "true" *) logic                         axil_rdma_CQHEAD_rd;
+
+  (* mark_debug = "true" *) logic                         axil_box0_awvalid;
+  (* mark_debug = "true" *) logic                  [31:0] axil_box0_awaddr;
+  (* mark_debug = "true" *) logic                         axil_box0_awready;
+  (* mark_debug = "true" *) logic                         axil_box0_wvalid;
+  (* mark_debug = "true" *) logic                  [31:0] axil_box0_wdata;
+  (* mark_debug = "true" *) logic                         axil_box0_wready;
+  (* mark_debug = "true" *) logic                         axil_box0_bvalid;
+  (* mark_debug = "true" *) logic                   [1:0] axil_box0_bresp;
+  (* mark_debug = "true" *) logic                         axil_box0_bready;
+  (* mark_debug = "true" *) logic                         axil_box0_arvalid;
+  (* mark_debug = "true" *) logic                  [31:0] axil_box0_araddr;
+  (* mark_debug = "true" *) logic                         axil_box0_arready;
+  (* mark_debug = "true" *) logic                         axil_box0_rvalid;
+  (* mark_debug = "true" *) logic                  [31:0] axil_box0_rdata;
+  (* mark_debug = "true" *) logic                   [1:0] axil_box0_rresp;
+  (* mark_debug = "true" *) logic                         axil_box0_rready;
+
+  logic                         axil_box1_awvalid;
+  logic                  [31:0] axil_box1_awaddr;
+  logic                         axil_box1_awready;
+  logic                         axil_box1_wvalid;
+  logic                  [31:0] axil_box1_wdata;
+  logic                         axil_box1_wready;
+  logic                         axil_box1_bvalid;
+  logic                   [1:0] axil_box1_bresp;
+  logic                         axil_box1_bready;
+  logic                         axil_box1_arvalid;
+  logic                  [31:0] axil_box1_araddr;
+  logic                         axil_box1_arready;
+  logic                         axil_box1_rvalid;
+  logic                  [31:0] axil_box1_rdata;
+  logic                   [1:0] axil_box1_rresp;
+  logic                         axil_box1_rready;
 
   // QDMA subsystem interfaces to the box running at 250MHz
-  wire     [NUM_PHYS_FUNC-1:0] axis_qdma_h2c_tvalid;
-  wire [512*NUM_PHYS_FUNC-1:0] axis_qdma_h2c_tdata;
-  wire  [64*NUM_PHYS_FUNC-1:0] axis_qdma_h2c_tkeep;
-  wire     [NUM_PHYS_FUNC-1:0] axis_qdma_h2c_tlast;
-  wire  [16*NUM_PHYS_FUNC-1:0] axis_qdma_h2c_tuser_size;
-  wire  [16*NUM_PHYS_FUNC-1:0] axis_qdma_h2c_tuser_src;
-  wire  [16*NUM_PHYS_FUNC-1:0] axis_qdma_h2c_tuser_dst;
-  wire     [NUM_PHYS_FUNC-1:0] axis_qdma_h2c_tready;
-
-  wire     [NUM_PHYS_FUNC-1:0] axis_qdma_c2h_tvalid;
-  wire [512*NUM_PHYS_FUNC-1:0] axis_qdma_c2h_tdata;
-  wire  [64*NUM_PHYS_FUNC-1:0] axis_qdma_c2h_tkeep;
-  wire     [NUM_PHYS_FUNC-1:0] axis_qdma_c2h_tlast;
-  wire  [16*NUM_PHYS_FUNC-1:0] axis_qdma_c2h_tuser_size;
-  wire  [16*NUM_PHYS_FUNC-1:0] axis_qdma_c2h_tuser_src;
-  wire  [16*NUM_PHYS_FUNC-1:0] axis_qdma_c2h_tuser_dst;
-  wire     [NUM_PHYS_FUNC-1:0] axis_qdma_c2h_tready;
+  logic     [NUM_PHYS_FUNC-1:0] axis_qdma_h2c_tvalid;
+  logic [512*NUM_PHYS_FUNC-1:0] axis_qdma_h2c_tdata;
+  logic  [64*NUM_PHYS_FUNC-1:0] axis_qdma_h2c_tkeep;
+  logic     [NUM_PHYS_FUNC-1:0] axis_qdma_h2c_tlast;
+  logic  [16*NUM_PHYS_FUNC-1:0] axis_qdma_h2c_tuser_size;
+  logic  [16*NUM_PHYS_FUNC-1:0] axis_qdma_h2c_tuser_src;
+  logic  [16*NUM_PHYS_FUNC-1:0] axis_qdma_h2c_tuser_dst;
+  logic     [NUM_PHYS_FUNC-1:0] axis_qdma_h2c_tready;
+  logic     [NUM_PHYS_FUNC-1:0] axis_qdma_c2h_tvalid;
+  logic [512*NUM_PHYS_FUNC-1:0] axis_qdma_c2h_tdata;
+  logic  [64*NUM_PHYS_FUNC-1:0] axis_qdma_c2h_tkeep;
+  logic     [NUM_PHYS_FUNC-1:0] axis_qdma_c2h_tlast;
+  logic  [16*NUM_PHYS_FUNC-1:0] axis_qdma_c2h_tuser_size;
+  logic  [16*NUM_PHYS_FUNC-1:0] axis_qdma_c2h_tuser_src;
+  logic  [16*NUM_PHYS_FUNC-1:0] axis_qdma_c2h_tuser_dst;
+  logic     [NUM_PHYS_FUNC-1:0] axis_qdma_c2h_tready;
 
   // Packet adapter interfaces to the box running at 250MHz
-  wire     [NUM_CMAC_PORT-1:0] axis_adap_tx_250mhz_tvalid;
-  wire [512*NUM_CMAC_PORT-1:0] axis_adap_tx_250mhz_tdata;
-  wire  [64*NUM_CMAC_PORT-1:0] axis_adap_tx_250mhz_tkeep;
-  wire     [NUM_CMAC_PORT-1:0] axis_adap_tx_250mhz_tlast;
-  wire  [16*NUM_CMAC_PORT-1:0] axis_adap_tx_250mhz_tuser_size;
-  wire  [16*NUM_CMAC_PORT-1:0] axis_adap_tx_250mhz_tuser_src;
-  wire  [16*NUM_CMAC_PORT-1:0] axis_adap_tx_250mhz_tuser_dst;
-  wire     [NUM_CMAC_PORT-1:0] axis_adap_tx_250mhz_tready;
-
-  wire     [NUM_CMAC_PORT-1:0] axis_adap_rx_250mhz_tvalid;
-  wire [512*NUM_CMAC_PORT-1:0] axis_adap_rx_250mhz_tdata;
-  wire  [64*NUM_CMAC_PORT-1:0] axis_adap_rx_250mhz_tkeep;
-  wire     [NUM_CMAC_PORT-1:0] axis_adap_rx_250mhz_tlast;
-  wire  [16*NUM_CMAC_PORT-1:0] axis_adap_rx_250mhz_tuser_size;
-  wire  [16*NUM_CMAC_PORT-1:0] axis_adap_rx_250mhz_tuser_src;
-  wire  [16*NUM_CMAC_PORT-1:0] axis_adap_rx_250mhz_tuser_dst;
-  wire     [NUM_CMAC_PORT-1:0] axis_adap_rx_250mhz_tready;
+  logic     [NUM_CMAC_PORT-1:0] axis_adap_tx_250mhz_tvalid;
+  logic [512*NUM_CMAC_PORT-1:0] axis_adap_tx_250mhz_tdata;
+  logic  [64*NUM_CMAC_PORT-1:0] axis_adap_tx_250mhz_tkeep;
+  logic     [NUM_CMAC_PORT-1:0] axis_adap_tx_250mhz_tlast;
+  logic  [16*NUM_CMAC_PORT-1:0] axis_adap_tx_250mhz_tuser_size;
+  logic  [16*NUM_CMAC_PORT-1:0] axis_adap_tx_250mhz_tuser_src;
+  logic  [16*NUM_CMAC_PORT-1:0] axis_adap_tx_250mhz_tuser_dst;
+  logic     [NUM_CMAC_PORT-1:0] axis_adap_tx_250mhz_tready;
+
+  logic     [NUM_CMAC_PORT-1:0] axis_adap_rx_250mhz_tvalid;
+  logic [512*NUM_CMAC_PORT-1:0] axis_adap_rx_250mhz_tdata;
+  logic  [64*NUM_CMAC_PORT-1:0] axis_adap_rx_250mhz_tkeep;
+  logic     [NUM_CMAC_PORT-1:0] axis_adap_rx_250mhz_tlast;
+  logic  [16*NUM_CMAC_PORT-1:0] axis_adap_rx_250mhz_tuser_size;
+  logic  [16*NUM_CMAC_PORT-1:0] axis_adap_rx_250mhz_tuser_src;
+  logic  [16*NUM_CMAC_PORT-1:0] axis_adap_rx_250mhz_tuser_dst;
+  logic     [NUM_CMAC_PORT-1:0] axis_adap_rx_250mhz_tready;
 
   // Packet adapter interfaces to the box running at 322MHz
-  wire     [NUM_CMAC_PORT-1:0] axis_adap_tx_322mhz_tvalid;
-  wire [512*NUM_CMAC_PORT-1:0] axis_adap_tx_322mhz_tdata;
-  wire  [64*NUM_CMAC_PORT-1:0] axis_adap_tx_322mhz_tkeep;
-  wire     [NUM_CMAC_PORT-1:0] axis_adap_tx_322mhz_tlast;
-  wire     [NUM_CMAC_PORT-1:0] axis_adap_tx_322mhz_tuser_err;
-  wire     [NUM_CMAC_PORT-1:0] axis_adap_tx_322mhz_tready;
-
-  wire     [NUM_CMAC_PORT-1:0] axis_adap_rx_322mhz_tvalid;
-  wire [512*NUM_CMAC_PORT-1:0] axis_adap_rx_322mhz_tdata;
-  wire  [64*NUM_CMAC_PORT-1:0] axis_adap_rx_322mhz_tkeep;
-  wire     [NUM_CMAC_PORT-1:0] axis_adap_rx_322mhz_tlast;
-  wire     [NUM_CMAC_PORT-1:0] axis_adap_rx_322mhz_tuser_err;
+  logic     [NUM_CMAC_PORT-1:0] axis_adap_tx_322mhz_tvalid;
+  logic [512*NUM_CMAC_PORT-1:0] axis_adap_tx_322mhz_tdata;
+  logic  [64*NUM_CMAC_PORT-1:0] axis_adap_tx_322mhz_tkeep;
+  logic     [NUM_CMAC_PORT-1:0] axis_adap_tx_322mhz_tlast;
+  logic     [NUM_CMAC_PORT-1:0] axis_adap_tx_322mhz_tuser_err;
+  logic     [NUM_CMAC_PORT-1:0] axis_adap_tx_322mhz_tready;
+
+  logic     [NUM_CMAC_PORT-1:0] axis_adap_rx_322mhz_tvalid;
+  logic [512*NUM_CMAC_PORT-1:0] axis_adap_rx_322mhz_tdata;
+  logic  [64*NUM_CMAC_PORT-1:0] axis_adap_rx_322mhz_tkeep;
+  logic     [NUM_CMAC_PORT-1:0] axis_adap_rx_322mhz_tlast;
+  logic     [NUM_CMAC_PORT-1:0] axis_adap_rx_322mhz_tuser_err;
 
   // CMAC subsystem interfaces to the box running at 322MHz
-  wire     [NUM_CMAC_PORT-1:0] axis_cmac_tx_tvalid;
-  wire [512*NUM_CMAC_PORT-1:0] axis_cmac_tx_tdata;
-  wire  [64*NUM_CMAC_PORT-1:0] axis_cmac_tx_tkeep;
-  wire     [NUM_CMAC_PORT-1:0] axis_cmac_tx_tlast;
-  wire     [NUM_CMAC_PORT-1:0] axis_cmac_tx_tuser_err;
-  wire     [NUM_CMAC_PORT-1:0] axis_cmac_tx_tready;
-
-  wire     [NUM_CMAC_PORT-1:0] axis_cmac_rx_tvalid;
-  wire [512*NUM_CMAC_PORT-1:0] axis_cmac_rx_tdata;
-  wire  [64*NUM_CMAC_PORT-1:0] axis_cmac_rx_tkeep;
-  wire     [NUM_CMAC_PORT-1:0] axis_cmac_rx_tlast;
-  wire     [NUM_CMAC_PORT-1:0] axis_cmac_rx_tuser_err;
-
-  wire                  [31:0] shell_rstn;
-  wire                  [31:0] shell_rst_done;
-  wire                         qdma_rstn;
-  wire                         qdma_rst_done;
-  wire     [NUM_CMAC_PORT-1:0] adap_rstn;
-  wire     [NUM_CMAC_PORT-1:0] adap_rst_done;
-  wire     [NUM_CMAC_PORT-1:0] cmac_rstn;
-  wire     [NUM_CMAC_PORT-1:0] cmac_rst_done;
-
-  wire                  [31:0] user_rstn;
-  wire                  [31:0] user_rst_done;
-  wire                  [15:0] user_250mhz_rstn;
-  wire                  [15:0] user_250mhz_rst_done;
-  wire                   [7:0] user_322mhz_rstn;
-  wire                   [7:0] user_322mhz_rst_done;
-  wire                         box_250mhz_rstn;
-  wire                         box_250mhz_rst_done;
-  wire                         box_322mhz_rstn;
-  wire                         box_322mhz_rst_done;
-
-  wire                         axil_aclk;
-  wire                         axis_aclk;
-  wire     [NUM_CMAC_PORT-1:0] cmac_clk;
+  logic     [NUM_CMAC_PORT-1:0] axis_cmac_tx_tvalid;
+  logic [512*NUM_CMAC_PORT-1:0] axis_cmac_tx_tdata;
+  logic  [64*NUM_CMAC_PORT-1:0] axis_cmac_tx_tkeep;
+  logic     [NUM_CMAC_PORT-1:0] axis_cmac_tx_tlast;
+  logic     [NUM_CMAC_PORT-1:0] axis_cmac_tx_tuser_err;
+  logic     [NUM_CMAC_PORT-1:0] axis_cmac_tx_tready;
+
+  logic     [NUM_CMAC_PORT-1:0] axis_cmac_rx_tvalid;
+  logic [512*NUM_CMAC_PORT-1:0] axis_cmac_rx_tdata;
+  logic  [64*NUM_CMAC_PORT-1:0] axis_cmac_rx_tkeep;
+  logic     [NUM_CMAC_PORT-1:0] axis_cmac_rx_tlast;
+  logic     [NUM_CMAC_PORT-1:0] axis_cmac_rx_tuser_err;
+
+  // RDMA TX interface (including roce and non-roce packets) to CMAC TX path
+  (* mark_debug = "true" *)logic [511:0] rdma2cmac_axis_tdata;
+  (* mark_debug = "true" *)logic  [63:0] rdma2cmac_axis_tkeep;
+  (* mark_debug = "true" *)logic         rdma2cmac_axis_tvalid;
+  (* mark_debug = "true" *)logic         rdma2cmac_axis_tlast;
+  (* mark_debug = "true" *)logic         rdma2cmac_axis_tready;
+
+  // Non-RDMA packets from QDMA TX bypassing RDMA TX
+  logic [511:0] qdma2rdma_non_roce_axis_tdata;
+  logic  [63:0] qdma2rdma_non_roce_axis_tkeep;
+  logic         qdma2rdma_non_roce_axis_tvalid;
+  logic         qdma2rdma_non_roce_axis_tlast;
+  logic         qdma2rdma_non_roce_axis_tready;
+
+  // RDMA RX interface from CMAC RX, no rx backpressure
+  (* mark_debug = "true" *)logic [511:0] cmac2rdma_roce_axis_tdata;
+  (* mark_debug = "true" *)logic  [63:0] cmac2rdma_roce_axis_tkeep;
+  (* mark_debug = "true" *)logic         cmac2rdma_roce_axis_tvalid;
+  (* mark_debug = "true" *)logic         cmac2rdma_roce_axis_tlast;
+  (* mark_debug = "true" *)logic         cmac2rdma_roce_axis_tuser;
+  (* mark_debug = "true" *)logic         cmac2rdma_roce_axis_tready;
+
+  // invalidate or immediate data from roce IETH/IMMDT header
+  logic  [63:0] rdma2user_ieth_immdt_axis_tdata;
+  logic         rdma2user_ieth_immdt_axis_tlast;
+  logic         rdma2user_ieth_immdt_axis_tvalid;
+  logic         rdma2user_ieth_immdt_axis_trdy;
+
+  // Send WQE completion queue doorbell
+  logic         resp_hndler_o_send_cq_db_cnt_valid;
+  logic   [9:0] resp_hndler_o_send_cq_db_addr;
+  logic  [31:0] resp_hndler_o_send_cq_db_cnt;
+  logic         resp_hndler_i_send_cq_db_rdy;
+
+  // Send WQE producer index doorbell
+  logic  [15:0] i_qp_sq_pidb_hndshk;
+  logic  [31:0] i_qp_sq_pidb_wr_addr_hndshk;
+  logic         i_qp_sq_pidb_wr_valid_hndshk;
+  logic         o_qp_sq_pidb_wr_rdy;
+
+  // RDMA-Send consumer index doorbell
+  logic  [15:0] i_qp_rq_cidb_hndshk;
+  logic  [31:0] i_qp_rq_cidb_wr_addr_hndshk;
+  logic         i_qp_rq_cidb_wr_valid_hndshk;
+  logic         o_qp_rq_cidb_wr_rdy;
+
+  // RDMA-Send producer index doorbell
+  logic  [31:0] rx_pkt_hndler_o_rq_db_data;
+  logic   [9:0] rx_pkt_hndler_o_rq_db_addr;
+  logic         rx_pkt_hndler_o_rq_db_data_valid;
+  logic         rx_pkt_hndler_i_rq_db_rdy;
+
+  logic         rdma_intr;
+
+  // RDMA AXI MM interface used to store payload from RDMA MAD, Send or Write operation
+  (* mark_debug = "true" *) logic           axi_rdma_send_write_payload_awid;
+  (* mark_debug = "true" *) logic  [63 : 0] axi_rdma_send_write_payload_awaddr;
+  logic  [31 : 0] axi_rdma_send_write_payload_awuser;
+  logic   [3 : 0] axi_rdma_send_write_payload_awqos;
+  (* mark_debug = "true" *) logic   [7 : 0] axi_rdma_send_write_payload_awlen;
+  (* mark_debug = "true" *) logic   [2 : 0] axi_rdma_send_write_payload_awsize;
+  (* mark_debug = "true" *) logic   [1 : 0] axi_rdma_send_write_payload_awburst;
+  logic   [3 : 0] axi_rdma_send_write_payload_awcache;
+  logic   [2 : 0] axi_rdma_send_write_payload_awprot;
+  (* mark_debug = "true" *) logic           axi_rdma_send_write_payload_awvalid;
+  (* mark_debug = "true" *) logic           axi_rdma_send_write_payload_awready;
+  logic [511 : 0] axi_rdma_send_write_payload_wdata;
+  (* mark_debug = "true" *) logic  [63 : 0] axi_rdma_send_write_payload_wstrb;
+  (* mark_debug = "true" *) logic           axi_rdma_send_write_payload_wlast;
+  (* mark_debug = "true" *) logic           axi_rdma_send_write_payload_wvalid;
+  (* mark_debug = "true" *) logic           axi_rdma_send_write_payload_wready;
+  logic           axi_rdma_send_write_payload_awlock;
+  (* mark_debug = "true" *) logic           axi_rdma_send_write_payload_bid;
+  (* mark_debug = "true" *) logic   [1 : 0] axi_rdma_send_write_payload_bresp;
+  (* mark_debug = "true" *) logic           axi_rdma_send_write_payload_bvalid;
+  (* mark_debug = "true" *) logic           axi_rdma_send_write_payload_bready;
+  logic           axi_rdma_send_write_payload_arid;
+  logic  [63 : 0] axi_rdma_send_write_payload_araddr;
+  logic   [7 : 0] axi_rdma_send_write_payload_arlen;
+  logic   [2 : 0] axi_rdma_send_write_payload_arsize;
+  logic   [1 : 0] axi_rdma_send_write_payload_arburst;
+  logic   [3 : 0] axi_rdma_send_write_payload_arcache;
+  logic   [2 : 0] axi_rdma_send_write_payload_arprot;
+  logic           axi_rdma_send_write_payload_arvalid;
+  logic           axi_rdma_send_write_payload_arready;
+  logic           axi_rdma_send_write_payload_rid;
+  logic [511 : 0] axi_rdma_send_write_payload_rdata;
+  logic   [1 : 0] axi_rdma_send_write_payload_rresp;
+  logic           axi_rdma_send_write_payload_rlast;
+  logic           axi_rdma_send_write_payload_rvalid;
+  logic           axi_rdma_send_write_payload_rready;
+  logic           axi_rdma_send_write_payload_arlock;
+  logic     [3:0] axi_rdma_send_write_payload_arqos;
+
+  // RDMA AXI MM interface used to store payload from RDMA Read response operation
+  (* mark_debug = "true" *) logic           axi_rdma_rsp_payload_awid;
+  (* mark_debug = "true" *) logic  [63 : 0] axi_rdma_rsp_payload_awaddr;
+  logic   [3 : 0] axi_rdma_rsp_payload_awqos;
+  (* mark_debug = "true" *) logic   [7 : 0] axi_rdma_rsp_payload_awlen;
+  (* mark_debug = "true" *) logic   [2 : 0] axi_rdma_rsp_payload_awsize;
+  (* mark_debug = "true" *) logic   [1 : 0] axi_rdma_rsp_payload_awburst;
+  logic   [3 : 0] axi_rdma_rsp_payload_awcache;
+  logic   [2 : 0] axi_rdma_rsp_payload_awprot;
+  (* mark_debug = "true" *) logic           axi_rdma_rsp_payload_awvalid;
+  (* mark_debug = "true" *) logic           axi_rdma_rsp_payload_awready;
+  logic [511 : 0] axi_rdma_rsp_payload_wdata;
+  (* mark_debug = "true" *) logic  [63 : 0] axi_rdma_rsp_payload_wstrb;
+  (* mark_debug = "true" *) logic           axi_rdma_rsp_payload_wlast;
+  (* mark_debug = "true" *) logic           axi_rdma_rsp_payload_wvalid;
+  (* mark_debug = "true" *) logic           axi_rdma_rsp_payload_wready;
+  logic           axi_rdma_rsp_payload_awlock;
+  (* mark_debug = "true" *) logic           axi_rdma_rsp_payload_bid;
+  (* mark_debug = "true" *) logic   [1 : 0] axi_rdma_rsp_payload_bresp;
+  (* mark_debug = "true" *) logic           axi_rdma_rsp_payload_bvalid;
+  (* mark_debug = "true" *) logic           axi_rdma_rsp_payload_bready;
+  logic           axi_rdma_rsp_payload_arid;
+  logic  [63 : 0] axi_rdma_rsp_payload_araddr;
+  logic   [7 : 0] axi_rdma_rsp_payload_arlen;
+  logic   [2 : 0] axi_rdma_rsp_payload_arsize;
+  logic   [1 : 0] axi_rdma_rsp_payload_arburst;
+  logic   [3 : 0] axi_rdma_rsp_payload_arcache;
+  logic   [2 : 0] axi_rdma_rsp_payload_arprot;
+  logic           axi_rdma_rsp_payload_arvalid;
+  logic           axi_rdma_rsp_payload_arready;
+  logic           axi_rdma_rsp_payload_rid;
+  logic [511 : 0] axi_rdma_rsp_payload_rdata;
+  logic   [1 : 0] axi_rdma_rsp_payload_rresp;
+  logic           axi_rdma_rsp_payload_rlast;
+  logic           axi_rdma_rsp_payload_rvalid;
+  logic           axi_rdma_rsp_payload_rready;
+  logic           axi_rdma_rsp_payload_arlock;
+  logic   [3 : 0] axi_rdma_rsp_payload_arqos;
+
+  // AXI MM interface used to access the device memory
+  (* mark_debug = "true" *) logic   [3 : 0] axi_dev_mem_awid;
+  (* mark_debug = "true" *) logic  [63 : 0] axi_dev_mem_awaddr;
+  (* mark_debug = "true" *) logic   [7 : 0] axi_dev_mem_awlen;
+  (* mark_debug = "true" *) logic   [2 : 0] axi_dev_mem_awsize;
+  (* mark_debug = "true" *) logic   [1 : 0] axi_dev_mem_awburst;
+  logic           axi_dev_mem_awlock;
+  logic   [3 : 0] axi_dev_mem_awqos;
+  logic   [3 : 0] axi_dev_mem_awregion;
+  logic   [3 : 0] axi_dev_mem_awcache;
+  logic   [2 : 0] axi_dev_mem_awprot;
+  (* mark_debug = "true" *) logic           axi_dev_mem_awvalid;
+  (* mark_debug = "true" *) logic           axi_dev_mem_awready;
+  (* mark_debug = "true" *) logic [511 : 0] axi_dev_mem_wdata;
+  (* mark_debug = "true" *) logic  [63 : 0] axi_dev_mem_wstrb;
+  (* mark_debug = "true" *) logic           axi_dev_mem_wlast;
+  (* mark_debug = "true" *) logic           axi_dev_mem_wvalid;
+  (* mark_debug = "true" *) logic           axi_dev_mem_wready;
+  (* mark_debug = "true" *) logic   [3 : 0] axi_dev_mem_bid;
+  (* mark_debug = "true" *) logic   [1 : 0] axi_dev_mem_bresp;
+  (* mark_debug = "true" *) logic           axi_dev_mem_bvalid;
+  (* mark_debug = "true" *) logic           axi_dev_mem_bready;
+  (* mark_debug = "true" *) logic   [3 : 0] axi_dev_mem_arid;
+  (* mark_debug = "true" *) logic  [63 : 0] axi_dev_mem_araddr;
+  (* mark_debug = "true" *) logic   [7 : 0] axi_dev_mem_arlen;
+  (* mark_debug = "true" *) logic   [2 : 0] axi_dev_mem_arsize;
+  (* mark_debug = "true" *) logic   [1 : 0] axi_dev_mem_arburst;
+  logic           axi_dev_mem_arlock;
+  logic   [3 : 0] axi_dev_mem_arqos;
+  logic   [3 : 0] axi_dev_mem_arregion;
+  logic   [3 : 0] axi_dev_mem_arcache;
+  logic   [2 : 0] axi_dev_mem_arprot;
+  (* mark_debug = "true" *) logic           axi_dev_mem_arvalid;
+  (* mark_debug = "true" *) logic           axi_dev_mem_arready;
+  (* mark_debug = "true" *) logic   [3 : 0] axi_dev_mem_rid;
+  (* mark_debug = "true" *) logic [511 : 0] axi_dev_mem_rdata;
+  (* mark_debug = "true" *) logic   [1 : 0] axi_dev_mem_rresp;
+  (* mark_debug = "true" *) logic           axi_dev_mem_rlast;
+  (* mark_debug = "true" *) logic           axi_dev_mem_rvalid;
+  (* mark_debug = "true" *) logic           axi_dev_mem_rready;
+
+  // RDMA AXI MM interface used to get wqe from system memory
+  logic           axi_rdma_get_wqe_awid;
+  logic  [63 : 0] axi_rdma_get_wqe_awaddr;
+  logic   [3 : 0] axi_rdma_get_wqe_awqos;
+  logic   [7 : 0] axi_rdma_get_wqe_awlen;
+  logic   [2 : 0] axi_rdma_get_wqe_awsize;
+  logic   [1 : 0] axi_rdma_get_wqe_awburst;
+  logic   [3 : 0] axi_rdma_get_wqe_awcache;
+  logic   [2 : 0] axi_rdma_get_wqe_awprot;
+  logic           axi_rdma_get_wqe_awvalid;
+  logic           axi_rdma_get_wqe_awready;
+  logic [511 : 0] axi_rdma_get_wqe_wdata;
+  logic  [63 : 0] axi_rdma_get_wqe_wstrb;
+  logic           axi_rdma_get_wqe_wlast;
+  logic           axi_rdma_get_wqe_wvalid;
+  logic           axi_rdma_get_wqe_wready;
+  logic           axi_rdma_get_wqe_awlock;
+  logic           axi_rdma_get_wqe_bid;
+  logic   [1 : 0] axi_rdma_get_wqe_bresp;
+  logic           axi_rdma_get_wqe_bvalid;
+  logic           axi_rdma_get_wqe_bready;
+  (* mark_debug = "true" *) logic           axi_rdma_get_wqe_arid;
+  (* mark_debug = "true" *) logic  [63 : 0] axi_rdma_get_wqe_araddr;
+  (* mark_debug = "true" *) logic   [7 : 0] axi_rdma_get_wqe_arlen;
+  (* mark_debug = "true" *) logic   [2 : 0] axi_rdma_get_wqe_arsize;
+  (* mark_debug = "true" *) logic   [1 : 0] axi_rdma_get_wqe_arburst;
+  logic   [3 : 0] axi_rdma_get_wqe_arcache;
+  logic   [2 : 0] axi_rdma_get_wqe_arprot;
+  (* mark_debug = "true" *) logic           axi_rdma_get_wqe_arvalid;
+  (* mark_debug = "true" *) logic           axi_rdma_get_wqe_arready;
+  (* mark_debug = "true" *) logic           axi_rdma_get_wqe_rid;
+  logic [511 : 0] axi_rdma_get_wqe_rdata;
+  (* mark_debug = "true" *) logic   [1 : 0] axi_rdma_get_wqe_rresp;
+  (* mark_debug = "true" *) logic           axi_rdma_get_wqe_rlast;
+  (* mark_debug = "true" *) logic           axi_rdma_get_wqe_rvalid;
+  (* mark_debug = "true" *) logic           axi_rdma_get_wqe_rready;
+  logic           axi_rdma_get_wqe_arlock;
+  logic   [3 : 0] axi_rdma_get_wqe_arqos;
+
+  // RDMA AXI MM interface used to get payload from system memory
+  logic           axi_rdma_get_payload_awid;
+  logic  [63 : 0] axi_rdma_get_payload_awaddr;
+  logic   [3 : 0] axi_rdma_get_payload_awqos;
+  logic   [7 : 0] axi_rdma_get_payload_awlen;
+  logic   [2 : 0] axi_rdma_get_payload_awsize;
+  logic   [1 : 0] axi_rdma_get_payload_awburst;
+  logic   [3 : 0] axi_rdma_get_payload_awcache;
+  logic   [2 : 0] axi_rdma_get_payload_awprot;
+  logic           axi_rdma_get_payload_awvalid;
+  logic           axi_rdma_get_payload_awready;
+  logic [511 : 0] axi_rdma_get_payload_wdata;
+  logic  [63 : 0] axi_rdma_get_payload_wstrb;
+  logic           axi_rdma_get_payload_wlast;
+  logic           axi_rdma_get_payload_wvalid;
+  logic           axi_rdma_get_payload_wready;
+  logic           axi_rdma_get_payload_awlock;
+  logic           axi_rdma_get_payload_bid;
+  logic   [1 : 0] axi_rdma_get_payload_bresp;
+  logic           axi_rdma_get_payload_bvalid;
+  logic           axi_rdma_get_payload_bready;
+  (* mark_debug = "true" *) logic           axi_rdma_get_payload_arid;
+  (* mark_debug = "true" *) logic  [63 : 0] axi_rdma_get_payload_araddr;
+  (* mark_debug = "true" *) logic   [7 : 0] axi_rdma_get_payload_arlen;
+  (* mark_debug = "true" *) logic   [2 : 0] axi_rdma_get_payload_arsize;
+  (* mark_debug = "true" *) logic   [1 : 0] axi_rdma_get_payload_arburst;
+  logic   [3 : 0] axi_rdma_get_payload_arcache;
+  logic   [2 : 0] axi_rdma_get_payload_arprot;
+  (* mark_debug = "true" *) logic           axi_rdma_get_payload_arvalid;
+  (* mark_debug = "true" *) logic           axi_rdma_get_payload_arready;
+  (* mark_debug = "true" *) logic           axi_rdma_get_payload_rid;
+  logic [511 : 0] axi_rdma_get_payload_rdata;
+  (* mark_debug = "true" *) logic   [1 : 0] axi_rdma_get_payload_rresp;
+  (* mark_debug = "true" *) logic           axi_rdma_get_payload_rlast;
+  (* mark_debug = "true" *) logic           axi_rdma_get_payload_rvalid;
+  (* mark_debug = "true" *) logic           axi_rdma_get_payload_rready;
+  logic           axi_rdma_get_payload_arlock;
+  logic   [3 : 0] axi_rdma_get_payload_arqos;
+
+  // RDMA AXI MM interface used to update rdma completion to system memory
+  (* mark_debug = "true" *) logic           axi_rdma_completion_awid;
+  (* mark_debug = "true" *) logic  [63 : 0] axi_rdma_completion_awaddr;
+  logic   [3 : 0] axi_rdma_completion_awqos;
+  (* mark_debug = "true" *) logic   [7 : 0] axi_rdma_completion_awlen;
+  (* mark_debug = "true" *) logic   [2 : 0] axi_rdma_completion_awsize;
+  (* mark_debug = "true" *) logic   [1 : 0] axi_rdma_completion_awburst;
+  logic   [3 : 0] axi_rdma_completion_awcache;
+  logic   [2 : 0] axi_rdma_completion_awprot;
+  (* mark_debug = "true" *) logic           axi_rdma_completion_awvalid;
+  (* mark_debug = "true" *) logic           axi_rdma_completion_awready;
+  logic [511 : 0] axi_rdma_completion_wdata;
+  logic  [63 : 0] axi_rdma_completion_wstrb;
+  (* mark_debug = "true" *) logic           axi_rdma_completion_wlast;
+  (* mark_debug = "true" *) logic           axi_rdma_completion_wvalid;
+  (* mark_debug = "true" *) logic           axi_rdma_completion_wready;
+  logic           axi_rdma_completion_awlock;
+  (* mark_debug = "true" *) logic           axi_rdma_completion_bid;
+  (* mark_debug = "true" *) logic   [1 : 0] axi_rdma_completion_bresp;
+  (* mark_debug = "true" *) logic           axi_rdma_completion_bvalid;
+  (* mark_debug = "true" *) logic           axi_rdma_completion_bready;
+  logic           axi_rdma_completion_arid;
+  logic  [63 : 0] axi_rdma_completion_araddr;
+  logic   [7 : 0] axi_rdma_completion_arlen;
+  logic   [2 : 0] axi_rdma_completion_arsize;
+  logic   [1 : 0] axi_rdma_completion_arburst;
+  logic   [3 : 0] axi_rdma_completion_arcache;
+  logic   [2 : 0] axi_rdma_completion_arprot;
+  logic           axi_rdma_completion_arvalid;
+  logic           axi_rdma_completion_arready;
+  logic           axi_rdma_completion_rid;
+  logic [511 : 0] axi_rdma_completion_rdata;
+  logic   [1 : 0] axi_rdma_completion_rresp;
+  logic           axi_rdma_completion_rlast;
+  logic           axi_rdma_completion_rvalid;
+  logic           axi_rdma_completion_rready;
+  logic           axi_rdma_completion_arlock;
+  logic   [3 : 0] axi_rdma_completion_arqos;
+
+(* mark_debug = "true" *) logic            axi_hw_hndshk_awid;
+(* mark_debug = "true" *) logic   [63 : 0] axi_hw_hndshk_awaddr;
+logic    [3 : 0] axi_hw_hndshk_awqos;
+(* mark_debug = "true" *) logic    [7 : 0] axi_hw_hndshk_awlen;
+(* mark_debug = "true" *) logic    [2 : 0] axi_hw_hndshk_awsize;
+(* mark_debug = "true" *) logic    [1 : 0] axi_hw_hndshk_awburst;
+logic    [3 : 0] axi_hw_hndshk_awcache;
+logic    [2 : 0] axi_hw_hndshk_awprot;
+(* mark_debug = "true" *) logic            axi_hw_hndshk_awvalid;
+(* mark_debug = "true" *) logic            axi_hw_hndshk_awready;
+(* mark_debug = "true" *) logic  [511 : 0] axi_hw_hndshk_wdata;
+(* mark_debug = "true" *) logic   [63 : 0] axi_hw_hndshk_wstrb;
+(* mark_debug = "true" *) logic            axi_hw_hndshk_wlast;
+(* mark_debug = "true" *) logic            axi_hw_hndshk_wvalid;
+(* mark_debug = "true" *) logic            axi_hw_hndshk_wready;
+logic            axi_hw_hndshk_awlock;
+(* mark_debug = "true" *) logic            axi_hw_hndshk_bid;
+(* mark_debug = "true" *) logic    [1 : 0] axi_hw_hndshk_bresp;
+(* mark_debug = "true" *) logic            axi_hw_hndshk_bvalid;
+(* mark_debug = "true" *) logic            axi_hw_hndshk_bready;
+(* mark_debug = "true" *) logic            axi_hw_hndshk_arid;
+(* mark_debug = "true" *) logic   [63 : 0] axi_hw_hndshk_araddr;
+(* mark_debug = "true" *) logic    [7 : 0] axi_hw_hndshk_arlen;
+(* mark_debug = "true" *) logic    [2 : 0] axi_hw_hndshk_arsize;
+(* mark_debug = "true" *) logic    [1 : 0] axi_hw_hndshk_arburst;
+logic    [3 : 0] axi_hw_hndshk_arcache;
+logic    [2 : 0] axi_hw_hndshk_arprot;
+(* mark_debug = "true" *) logic            axi_hw_hndshk_arvalid;
+(* mark_debug = "true" *) logic            axi_hw_hndshk_arready;
+(* mark_debug = "true" *) logic            axi_hw_hndshk_rid;
+(* mark_debug = "true" *) logic  [511 : 0] axi_hw_hndshk_rdata;
+(* mark_debug = "true" *) logic    [1 : 0] axi_hw_hndshk_rresp;
+(* mark_debug = "true" *) logic            axi_hw_hndshk_rlast;
+(* mark_debug = "true" *) logic            axi_hw_hndshk_rvalid;
+(* mark_debug = "true" *) logic            axi_hw_hndshk_rready;
+logic            axi_hw_hndshk_arlock;
+logic    [3 : 0] axi_hw_hndshk_arqos;
+logic    [3 : 0] axi_hw_hndshk_arregion;
+logic    [3 : 0] axi_hw_hndshk_awregion;
+
+  logic           axi_payload_to_retry_buf_awid;
+  logic  [63 : 0] axi_payload_to_retry_buf_awaddr;
+  logic   [3 : 0] axi_payload_to_retry_buf_awqos;
+  logic   [7 : 0] axi_payload_to_retry_buf_awlen;
+  logic   [2 : 0] axi_payload_to_retry_buf_awsize;
+  logic   [1 : 0] axi_payload_to_retry_buf_awburst;
+  logic   [3 : 0] axi_payload_to_retry_buf_awcache;
+  logic   [2 : 0] axi_payload_to_retry_buf_awprot;
+  logic           axi_payload_to_retry_buf_awvalid;
+  logic           axi_payload_to_retry_buf_awready;
+  logic [511 : 0] axi_payload_to_retry_buf_wdata;
+  logic  [63 : 0] axi_payload_to_retry_buf_wstrb;
+  logic           axi_payload_to_retry_buf_wlast;
+  logic           axi_payload_to_retry_buf_wvalid;
+  logic           axi_payload_to_retry_buf_wready;
+  logic           axi_payload_to_retry_buf_awlock;
+  logic           axi_payload_to_retry_buf_bid;
+  logic   [1 : 0] axi_payload_to_retry_buf_bresp;
+  logic           axi_payload_to_retry_buf_bvalid;
+  logic           axi_payload_to_retry_buf_bready;
+  logic           axi_payload_to_retry_buf_arid;
+  logic  [63 : 0] axi_payload_to_retry_buf_araddr;
+  logic   [7 : 0] axi_payload_to_retry_buf_arlen;
+  logic   [2 : 0] axi_payload_to_retry_buf_arsize;
+  logic   [1 : 0] axi_payload_to_retry_buf_arburst;
+  logic   [3 : 0] axi_payload_to_retry_buf_arcache;
+  logic   [2 : 0] axi_payload_to_retry_buf_arprot;
+  logic           axi_payload_to_retry_buf_arvalid;
+  logic           axi_payload_to_retry_buf_arready;
+  logic           axi_payload_to_retry_buf_rid;
+  logic [511 : 0] axi_payload_to_retry_buf_rdata;
+  logic   [1 : 0] axi_payload_to_retry_buf_rresp;
+  logic           axi_payload_to_retry_buf_rlast;
+  logic           axi_payload_to_retry_buf_rvalid;
+  logic           axi_payload_to_retry_buf_rready;
+  logic           axi_payload_to_retry_buf_arlock;
+  logic   [3 : 0] axi_payload_to_retry_buf_arqos;
+
+  // AXI MM interface used to access the system memory (s_axib_* of the QDMA IP)
+  (* mark_debug = "true" *) logic   [2 : 0] axi_sys_mem_awid;
+  (* mark_debug = "true" *) logic  [63 : 0] axi_sys_mem_awaddr;
+  (* mark_debug = "true" *) logic   [7 : 0] axi_sys_mem_awlen;
+  (* mark_debug = "true" *) logic   [2 : 0] axi_sys_mem_awsize;
+  (* mark_debug = "true" *) logic   [1 : 0] axi_sys_mem_awburst;
+  logic           axi_sys_mem_awlock;
+  logic   [3 : 0] axi_sys_mem_awqos;
+  logic   [3 : 0] axi_sys_mem_awregion;
+  logic   [3 : 0] axi_sys_mem_awcache;
+  logic   [2 : 0] axi_sys_mem_awprot;
+  (* mark_debug = "true" *) logic           axi_sys_mem_awvalid;
+  (* mark_debug = "true" *) logic           axi_sys_mem_awready;
+  (* mark_debug = "true" *) logic [511 : 0] axi_sys_mem_wdata;
+  (* mark_debug = "true" *) logic  [63 : 0] axi_sys_mem_wstrb;
+  (* mark_debug = "true" *) logic           axi_sys_mem_wlast;
+  (* mark_debug = "true" *) logic           axi_sys_mem_wvalid;
+  (* mark_debug = "true" *) logic           axi_sys_mem_wready;
+  (* mark_debug = "true" *) logic   [3 : 0] axi_sys_mem_bid;
+  (* mark_debug = "true" *) logic   [1 : 0] axi_sys_mem_bresp;
+  (* mark_debug = "true" *) logic           axi_sys_mem_bvalid;
+  (* mark_debug = "true" *) logic           axi_sys_mem_bready;
+  (* mark_debug = "true" *) logic   [2 : 0] axi_sys_mem_arid;
+  (* mark_debug = "true" *) logic  [63 : 0] axi_sys_mem_araddr;
+  (* mark_debug = "true" *) logic   [7 : 0] axi_sys_mem_arlen;
+  (* mark_debug = "true" *) logic   [2 : 0] axi_sys_mem_arsize;
+  (* mark_debug = "true" *) logic   [1 : 0] axi_sys_mem_arburst;
+  logic           axi_sys_mem_arlock;
+  logic   [3 : 0] axi_sys_mem_arqos;
+  logic   [3 : 0] axi_sys_mem_arregion;
+  logic   [3 : 0] axi_sys_mem_arcache;
+  logic   [2 : 0] axi_sys_mem_arprot;
+  (* mark_debug = "true" *) logic           axi_sys_mem_arvalid;
+  (* mark_debug = "true" *) logic           axi_sys_mem_arready;
+  (* mark_debug = "true" *) logic   [3 : 0] axi_sys_mem_rid;
+  (* mark_debug = "true" *) logic [511 : 0] axi_sys_mem_rdata;
+  (* mark_debug = "true" *) logic   [1 : 0] axi_sys_mem_rresp;
+  (* mark_debug = "true" *) logic           axi_sys_mem_rlast;
+  (* mark_debug = "true" *) logic           axi_sys_mem_rvalid;
+  (* mark_debug = "true" *) logic           axi_sys_mem_rready;
+  logic  [63 : 0] axi_sys_mem_wuser;
+  logic  [63 : 0] axi_sys_mem_ruser;
+  logic  [11 : 0] axi_sys_mem_awuser;
+  logic  [11 : 0] axi_sys_mem_aruser;
+
+  //AXI interface between system mem crossbar and device mem crossbar
+  (* mark_debug = "true" *) logic   [2 : 0] axi_from_sys_to_dev_crossbar_awid;
+  (* mark_debug = "true" *) logic  [63 : 0] axi_from_sys_to_dev_crossbar_awaddr;
+  //logic  [31 : 0] axi_from_sys_to_dev_crossbar_awuser;
+  logic   [3 : 0] axi_from_sys_to_dev_crossbar_awqos;
+  (* mark_debug = "true" *) logic   [7 : 0] axi_from_sys_to_dev_crossbar_awlen;
+  (* mark_debug = "true" *) logic   [2 : 0] axi_from_sys_to_dev_crossbar_awsize;
+  (* mark_debug = "true" *) logic   [1 : 0] axi_from_sys_to_dev_crossbar_awburst;
+  logic   [3 : 0] axi_from_sys_to_dev_crossbar_awcache;
+  logic   [2 : 0] axi_from_sys_to_dev_crossbar_awprot;
+  (* mark_debug = "true" *) logic           axi_from_sys_to_dev_crossbar_awvalid;
+  (* mark_debug = "true" *) logic           axi_from_sys_to_dev_crossbar_awready;
+  logic [511 : 0] axi_from_sys_to_dev_crossbar_wdata;
+  (* mark_debug = "true" *) logic  [63 : 0] axi_from_sys_to_dev_crossbar_wstrb;
+  (* mark_debug = "true" *) logic           axi_from_sys_to_dev_crossbar_wlast;
+  (* mark_debug = "true" *) logic           axi_from_sys_to_dev_crossbar_wvalid;
+  (* mark_debug = "true" *) logic           axi_from_sys_to_dev_crossbar_wready;
+  logic           axi_from_sys_to_dev_crossbar_awlock;
+  (* mark_debug = "true" *) logic   [3 : 0] axi_from_sys_to_dev_crossbar_bid;
+  (* mark_debug = "true" *) logic   [1 : 0] axi_from_sys_to_dev_crossbar_bresp;
+  (* mark_debug = "true" *) logic           axi_from_sys_to_dev_crossbar_bvalid;
+  (* mark_debug = "true" *) logic           axi_from_sys_to_dev_crossbar_bready;
+  (* mark_debug = "true" *) logic   [2 : 0] axi_from_sys_to_dev_crossbar_arid;
+  (* mark_debug = "true" *) logic  [63 : 0] axi_from_sys_to_dev_crossbar_araddr;
+  (* mark_debug = "true" *) logic   [7 : 0] axi_from_sys_to_dev_crossbar_arlen;
+  (* mark_debug = "true" *) logic   [2 : 0] axi_from_sys_to_dev_crossbar_arsize;
+  (* mark_debug = "true" *) logic   [1 : 0] axi_from_sys_to_dev_crossbar_arburst;
+  logic   [3 : 0] axi_from_sys_to_dev_crossbar_arcache;
+  logic   [2 : 0] axi_from_sys_to_dev_crossbar_arprot;
+  (* mark_debug = "true" *) logic           axi_from_sys_to_dev_crossbar_arvalid;
+  (* mark_debug = "true" *) logic           axi_from_sys_to_dev_crossbar_arready;
+  (* mark_debug = "true" *) logic   [3 : 0] axi_from_sys_to_dev_crossbar_rid;
+  (* mark_debug = "true" *) logic [511 : 0] axi_from_sys_to_dev_crossbar_rdata;
+  (* mark_debug = "true" *) logic   [1 : 0] axi_from_sys_to_dev_crossbar_rresp;
+  (* mark_debug = "true" *) logic           axi_from_sys_to_dev_crossbar_rlast;
+  (* mark_debug = "true" *) logic           axi_from_sys_to_dev_crossbar_rvalid;
+  (* mark_debug = "true" *) logic           axi_from_sys_to_dev_crossbar_rready;
+  logic           axi_from_sys_to_dev_crossbar_arlock;
+  logic   [3 : 0] axi_from_sys_to_dev_crossbar_arqos;
+
+  wire   [63 : 0] axi_from_clk_converter_to_ddr4_awaddr;
+  wire    [7 : 0] axi_from_clk_converter_to_ddr4_awlen;
+  wire    [2 : 0] axi_from_clk_converter_to_ddr4_awsize;
+  wire    [1 : 0] axi_from_clk_converter_to_ddr4_awburst;
+  wire    [0 : 0] axi_from_clk_converter_to_ddr4_awlock;
+  wire    [3 : 0] axi_from_clk_converter_to_ddr4_awcache;
+  wire    [2 : 0] axi_from_clk_converter_to_ddr4_awprot;
+  wire    [3 : 0] axi_from_clk_converter_to_ddr4_awregion;
+  wire    [3 : 0] axi_from_clk_converter_to_ddr4_awqos;
+  wire            axi_from_clk_converter_to_ddr4_awvalid;
+  wire            axi_from_clk_converter_to_ddr4_awready;
+  wire  [511 : 0] axi_from_clk_converter_to_ddr4_wdata;
+  wire   [63 : 0] axi_from_clk_converter_to_ddr4_wstrb;
+  wire            axi_from_clk_converter_to_ddr4_wlast;
+  wire            axi_from_clk_converter_to_ddr4_wvalid;
+  wire            axi_from_clk_converter_to_ddr4_wready;
+  wire    [1 : 0] axi_from_clk_converter_to_ddr4_bresp;
+  wire            axi_from_clk_converter_to_ddr4_bvalid;
+  wire            axi_from_clk_converter_to_ddr4_bready;
+  wire   [63 : 0] axi_from_clk_converter_to_ddr4_araddr;
+  wire    [7 : 0] axi_from_clk_converter_to_ddr4_arlen;
+  wire    [2 : 0] axi_from_clk_converter_to_ddr4_arsize;
+  wire    [1 : 0] axi_from_clk_converter_to_ddr4_arburst;
+  wire    [0 : 0] axi_from_clk_converter_to_ddr4_arlock;
+  wire    [3 : 0] axi_from_clk_converter_to_ddr4_arcache;
+  wire    [2 : 0] axi_from_clk_converter_to_ddr4_arprot;
+  wire    [3 : 0] axi_from_clk_converter_to_ddr4_arregion;
+  wire    [3 : 0] axi_from_clk_converter_to_ddr4_arqos;
+  wire            axi_from_clk_converter_to_ddr4_arvalid;
+  wire            axi_from_clk_converter_to_ddr4_arready;
+  wire  [511 : 0] axi_from_clk_converter_to_ddr4_rdata;
+  wire    [1 : 0] axi_from_clk_converter_to_ddr4_rresp;
+  wire            axi_from_clk_converter_to_ddr4_rlast;
+  wire            axi_from_clk_converter_to_ddr4_rvalid;
+  wire            axi_from_clk_converter_to_ddr4_rready;
+  wire    [3 : 0] axi_from_clk_converter_to_ddr4_awid;
+  wire    [3 : 0] axi_from_clk_converter_to_ddr4_rid;
+  wire    [3 : 0] axi_from_clk_converter_to_ddr4_arid;
+  wire    [3 : 0] axi_from_clk_converter_to_ddr4_bid;
+
+  wire            c0_ddr4_ui_clk;
+  wire            c0_ddr4_ui_clk_sync_rst;
+
+  wire            c0_init_calib_complete;
+
+
+  logic                  [31:0] shell_rstn;
+  logic                  [31:0] shell_rst_done;
+  logic                         qdma_rstn;
+  logic                         qdma_rst_done;
+  logic     [NUM_CMAC_PORT-1:0] adap_rstn;
+  logic     [NUM_CMAC_PORT-1:0] adap_rst_done;
+  logic     [NUM_CMAC_PORT-1:0] cmac_rstn;
+  logic     [NUM_CMAC_PORT-1:0] cmac_rst_done;
+  logic                         rdma_rstn;
+  logic                         rdma_rst_done;
+
+  logic                  [31:0] user_rstn;
+  logic                  [31:0] user_rst_done;
+  logic                  [15:0] user_250mhz_rstn;
+  logic                  [15:0] user_250mhz_rst_done;
+  logic                   [7:0] user_322mhz_rstn;
+  logic                   [7:0] user_322mhz_rst_done;
+  logic                         box_250mhz_rstn;
+  logic                         box_250mhz_rst_done;
+  logic                         box_322mhz_rstn;
+  logic                         box_322mhz_rst_done;
+
+  logic                         axil_aclk;
+  logic                         axis_aclk;
+  logic     [NUM_CMAC_PORT-1:0] cmac_clk;
 
   // Unused reset pairs must have their "reset_done" tied to 1
 
   // First 4-bit for QDMA subsystem
   assign qdma_rstn           = shell_rstn[0];
   assign shell_rst_done[0]   = qdma_rst_done;
-  assign shell_rst_done[3:1] = 3'b111;
+  assign rdma_rstn           = shell_rstn[1];
+  assign shell_rst_done[1]   = rdma_rst_done;
+  assign shell_rst_done[2]   = qdma_csr_prog_done;
+  assign shell_rst_done[3]   = 1'b1;
+  //assign shell_rst_done[3:2] = 2'b11;
 
   // For each CMAC port, use the subsequent 4-bit: bit 0 for CMAC subsystem and
   // bit 1 for the corresponding adapter
@@ -459,6 +1060,24 @@ module open_nic_shell #(
     .m_axil_qdma_rresp   (axil_qdma_rresp),
     .m_axil_qdma_rready  (axil_qdma_rready),
 
+    .m_axil_qdma_csr_awaddr (axil_qdma_csr_awaddr),
+    .m_axil_qdma_csr_awvalid(axil_qdma_csr_awvalid),
+    // Only allowed to program axil csr interface when qdma_csr_prog_done is 1'b1
+    .m_axil_qdma_csr_awready(axil_qdma_csr_awready && qdma_csr_prog_done),
+    .m_axil_qdma_csr_wdata  (axil_qdma_csr_wdata),
+    .m_axil_qdma_csr_wvalid (axil_qdma_csr_wvalid),
+    .m_axil_qdma_csr_wready (axil_qdma_csr_wready),
+    .m_axil_qdma_csr_bvalid (axil_qdma_csr_bvalid),
+    .m_axil_qdma_csr_bresp  (axil_qdma_csr_bresp),
+    .m_axil_qdma_csr_bready (axil_qdma_csr_bready),
+    .m_axil_qdma_csr_araddr (axil_qdma_csr_araddr),
+    .m_axil_qdma_csr_arvalid(axil_qdma_csr_arvalid),
+    .m_axil_qdma_csr_arready(axil_qdma_csr_arready),
+    .m_axil_qdma_csr_rdata  (axil_qdma_csr_rdata),
+    .m_axil_qdma_csr_rresp  (axil_qdma_csr_rresp),
+    .m_axil_qdma_csr_rvalid (axil_qdma_csr_rvalid),
+    .m_axil_qdma_csr_rready (axil_qdma_csr_rready),
+
     .m_axil_adap_awvalid (axil_adap_awvalid),
     .m_axil_adap_awaddr  (axil_adap_awaddr),
     .m_axil_adap_awready (axil_adap_awready),
@@ -493,6 +1112,23 @@ module open_nic_shell #(
     .m_axil_cmac_rresp   (axil_cmac_rresp),
     .m_axil_cmac_rready  (axil_cmac_rready),
 
+    .m_axil_rdma_awvalid (axil_rdma_awvalid),
+    .m_axil_rdma_awaddr  (axil_rdma_awaddr),
+    .m_axil_rdma_awready (axil_rdma_awready),
+    .m_axil_rdma_wvalid  (axil_rdma_wvalid),
+    .m_axil_rdma_wdata   (axil_rdma_wdata),
+    .m_axil_rdma_wready  (axil_rdma_wready),
+    .m_axil_rdma_bvalid  (axil_rdma_bvalid),
+    .m_axil_rdma_bresp   (axil_rdma_bresp),
+    .m_axil_rdma_bready  (axil_rdma_bready),
+    .m_axil_rdma_arvalid (axil_rdma_arvalid),
+    .m_axil_rdma_araddr  (axil_rdma_araddr),
+    .m_axil_rdma_arready (axil_rdma_arready),
+    .m_axil_rdma_rvalid  (axil_rdma_rvalid),
+    .m_axil_rdma_rdata   (axil_rdma_rdata),
+    .m_axil_rdma_rresp   (axil_rdma_rresp),
+    .m_axil_rdma_rready  (axil_rdma_rready),
+
     .m_axil_box0_awvalid (axil_box0_awvalid),
     .m_axil_box0_awaddr  (axil_box0_awaddr),
     .m_axil_box0_awready (axil_box0_awready),
@@ -578,6 +1214,46 @@ module open_nic_shell #(
     .s_axis_c2h_tuser_dst                 (axis_qdma_c2h_tuser_dst),
     .s_axis_c2h_tready                    (axis_qdma_c2h_tready),
 
+    // QDMA DMA Engine - AXI MM interface
+    .m_axi_awready                        (axi_qdma_mm_awready),
+    .m_axi_wready                         (axi_qdma_mm_wready),
+    .m_axi_bid                            (axi_qdma_mm_bid),
+    .m_axi_bresp                          (axi_qdma_mm_bresp),
+    .m_axi_bvalid                         (axi_qdma_mm_bvalid),
+    .m_axi_arready                        (axi_qdma_mm_arready),
+    .m_axi_rid                            (axi_qdma_mm_rid),
+    .m_axi_rdata                          (axi_qdma_mm_rdata),
+    .m_axi_rresp                          (axi_qdma_mm_rresp),
+    .m_axi_rlast                          (axi_qdma_mm_rlast),
+    .m_axi_rvalid                         (axi_qdma_mm_rvalid),
+    .m_axi_awid                           (axi_qdma_mm_awid),
+    .m_axi_awaddr                         (axi_qdma_mm_awaddr),
+    .m_axi_awuser                         (axi_qdma_mm_awuser),
+    .m_axi_awlen                          (axi_qdma_mm_awlen),
+    .m_axi_awsize                         (axi_qdma_mm_awsize),
+    .m_axi_awburst                        (axi_qdma_mm_awburst),
+    .m_axi_awprot                         (axi_qdma_mm_awprot),
+    .m_axi_awvalid                        (axi_qdma_mm_awvalid),
+    .m_axi_awlock                         (axi_qdma_mm_awlock),
+    .m_axi_awcache                        (axi_qdma_mm_awcache),
+    .m_axi_wdata                          (axi_qdma_mm_wdata),
+    .m_axi_wuser                          (axi_qdma_mm_wuser),
+    .m_axi_wstrb                          (axi_qdma_mm_wstrb),
+    .m_axi_wlast                          (axi_qdma_mm_wlast),
+    .m_axi_wvalid                         (axi_qdma_mm_wvalid),
+    .m_axi_bready                         (axi_qdma_mm_bready),
+    .m_axi_arid                           (axi_qdma_mm_arid),
+    .m_axi_araddr                         (axi_qdma_mm_araddr),
+    .m_axi_aruser                         (axi_qdma_mm_aruser),
+    .m_axi_arlen                          (axi_qdma_mm_arlen),
+    .m_axi_arsize                         (axi_qdma_mm_arsize),
+    .m_axi_arburst                        (axi_qdma_mm_arburst),
+    .m_axi_arprot                         (axi_qdma_mm_arprot),
+    .m_axi_arvalid                        (axi_qdma_mm_arvalid),
+    .m_axi_arlock                         (axi_qdma_mm_arlock),
+    .m_axi_arcache                        (axi_qdma_mm_arcache),
+    .m_axi_rready                         (axi_qdma_mm_rready),
+
 `ifdef __synthesis__
     .pcie_rxp                             (pcie_rxp),
     .pcie_rxn                             (pcie_rxn),
@@ -649,6 +1325,63 @@ module open_nic_shell #(
     .m_axis_qdma_cpl_tready               (m_axis_qdma_cpl_sim_tready),
 `endif
 
+    .s_csr_prog_done                      (qdma_csr_prog_done),
+    .s_axil_csr_awaddr                    (axil_qdma_csr_awaddr),
+    .s_axil_csr_awprot                    (3'd0),
+    .s_axil_csr_awvalid                   (axil_qdma_csr_awvalid),
+    .s_axil_csr_awready                   (axil_qdma_csr_awready),
+    .s_axil_csr_wdata                     (axil_qdma_csr_wdata),
+    .s_axil_csr_wstrb                     (4'hf),
+    .s_axil_csr_wvalid                    (axil_qdma_csr_wvalid),
+    .s_axil_csr_wready                    (axil_qdma_csr_wready),
+    .s_axil_csr_bvalid                    (axil_qdma_csr_bvalid),
+    .s_axil_csr_bresp                     (axil_qdma_csr_bresp),
+    .s_axil_csr_bready                    (axil_qdma_csr_bready),
+    .s_axil_csr_araddr                    (axil_qdma_csr_araddr),
+    .s_axil_csr_arprot                    (3'd0),
+    .s_axil_csr_arvalid                   (axil_qdma_csr_arvalid),
+    .s_axil_csr_arready                   (axil_qdma_csr_arready),
+    .s_axil_csr_rdata                     (axil_qdma_csr_rdata),
+    .s_axil_csr_rresp                     (axil_qdma_csr_rresp),
+    .s_axil_csr_rvalid                    (axil_qdma_csr_rvalid),
+    .s_axil_csr_rready                    (axil_qdma_csr_rready),
+
+    .s_axib_awid                          ({1'd0,axi_sys_mem_awid}),
+    .s_axib_awaddr                        (axi_sys_mem_awaddr),
+    .s_axib_awregion                      (axi_sys_mem_awregion),
+    .s_axib_awlen                         (axi_sys_mem_awlen),
+    .s_axib_awsize                        (axi_sys_mem_awsize),
+    .s_axib_awburst                       (axi_sys_mem_awburst),
+    .s_axib_awvalid                       (axi_sys_mem_awvalid),
+    .s_axib_wdata                         (axi_sys_mem_wdata),
+    .s_axib_wstrb                         (axi_sys_mem_wstrb),
+    .s_axib_wlast                         (axi_sys_mem_wlast),
+    .s_axib_wvalid                        (axi_sys_mem_wvalid),
+    .s_axib_wuser                         (axi_sys_mem_wuser),
+    .s_axib_ruser                         (axi_sys_mem_ruser),
+    .s_axib_bready                        (axi_sys_mem_bready),
+    .s_axib_arid                          ({1'd0,axi_sys_mem_arid}),
+    .s_axib_araddr                        (axi_sys_mem_araddr),
+    .s_axib_aruser                        (axi_sys_mem_aruser),
+    .s_axib_awuser                        (axi_sys_mem_awuser),
+    .s_axib_arregion                      (axi_sys_mem_arregion),
+    .s_axib_arlen                         (axi_sys_mem_arlen),
+    .s_axib_arsize                        (axi_sys_mem_arsize),
+    .s_axib_arburst                       (axi_sys_mem_arburst),
+    .s_axib_arvalid                       (axi_sys_mem_arvalid),
+    .s_axib_rready                        (axi_sys_mem_rready),
+    .s_axib_awready                       (axi_sys_mem_awready),
+    .s_axib_wready                        (axi_sys_mem_wready),
+    .s_axib_bid                           (axi_sys_mem_bid),
+    .s_axib_bresp                         (axi_sys_mem_bresp),
+    .s_axib_bvalid                        (axi_sys_mem_bvalid),
+    .s_axib_arready                       (axi_sys_mem_arready),
+    .s_axib_rid                           (axi_sys_mem_rid),
+    .s_axib_rdata                         (axi_sys_mem_rdata),
+    .s_axib_rresp                         (axi_sys_mem_rresp),
+    .s_axib_rlast                         (axi_sys_mem_rlast),
+    .s_axib_rvalid                        (axi_sys_mem_rvalid),
+
     .mod_rstn                             (qdma_rstn),
     .mod_rst_done                         (qdma_rst_done),
 
@@ -786,6 +1519,960 @@ module open_nic_shell #(
   end: cmac_port
   endgenerate
 
+  // RDMA subsystem
+  // TODO: retry buffer and hardware handshaking are not supported at the moment
+  rdma_subsystem_wrapper rdma_subsystem_inst (
+    // AXIL interface for RDMA control register
+    .s_axil_awaddr    (axil_rdma_awaddr),
+    .s_axil_awvalid   (axil_rdma_awvalid),
+    .s_axil_awready   (axil_rdma_awready),
+    .s_axil_wdata     (axil_rdma_wdata),
+    .s_axil_wstrb     (4'hf),
+    .s_axil_wvalid    (axil_rdma_wvalid),
+    .s_axil_wready    (axil_rdma_wready),
+    .s_axil_araddr    (axil_rdma_araddr),
+    .s_axil_arvalid   (axil_rdma_arvalid),
+    .s_axil_arready   (axil_rdma_arready),
+    .s_axil_rdata     (axil_rdma_rdata),
+    .s_axil_rvalid    (axil_rdma_rvalid),
+    .s_axil_rresp     (axil_rdma_rresp),
+    .s_axil_rready    (axil_rdma_rready),
+    .s_axil_bresp     (axil_rdma_bresp),
+    .s_axil_bvalid    (axil_rdma_bvalid),
+    .s_axil_bready    (axil_rdma_bready),
+
+    // RDMA TX interface (including roce and non-roce packets) to CMAC TX path
+    .m_rdma2cmac_axis_tdata  (rdma2cmac_axis_tdata),
+    .m_rdma2cmac_axis_tkeep  (rdma2cmac_axis_tkeep),
+    .m_rdma2cmac_axis_tvalid (rdma2cmac_axis_tvalid),
+    .m_rdma2cmac_axis_tlast  (rdma2cmac_axis_tlast),
+    .m_rdma2cmac_axis_tready (rdma2cmac_axis_tready),
+
+    // Non-RDMA packets from QDMA TX bypassing RDMA TX
+    .s_qdma2rdma_non_roce_axis_tdata    (qdma2rdma_non_roce_axis_tdata),
+    .s_qdma2rdma_non_roce_axis_tkeep    (qdma2rdma_non_roce_axis_tkeep),
+    .s_qdma2rdma_non_roce_axis_tvalid   (qdma2rdma_non_roce_axis_tvalid),
+    .s_qdma2rdma_non_roce_axis_tlast    (qdma2rdma_non_roce_axis_tlast),
+    .s_qdma2rdma_non_roce_axis_tready   (qdma2rdma_non_roce_axis_tready),
+
+    // RDMA RX interface from CMAC RX, no rx backpressure
+    .s_cmac2rdma_roce_axis_tdata        (cmac2rdma_roce_axis_tdata),
+    .s_cmac2rdma_roce_axis_tkeep        (cmac2rdma_roce_axis_tkeep),
+    .s_cmac2rdma_roce_axis_tvalid       (cmac2rdma_roce_axis_tvalid),
+    .s_cmac2rdma_roce_axis_tlast        (cmac2rdma_roce_axis_tlast),
+    .s_cmac2rdma_roce_axis_tuser        (cmac2rdma_roce_axis_tuser),
+
+    // Non-RDMA packets from CMAC RX bypassing RDMA, no rx backpressure
+    .s_cmac2rdma_non_roce_axis_tdata    (512'd0),
+    .s_cmac2rdma_non_roce_axis_tkeep    (64'd0),
+    .s_cmac2rdma_non_roce_axis_tvalid   (1'b0),
+    .s_cmac2rdma_non_roce_axis_tlast    (1'b0),
+    .s_cmac2rdma_non_roce_axis_tuser    (1'b0),
+
+    // Non-RDMA packets bypassing RDMA to QDMA RX
+    .m_rdma2qdma_non_roce_axis_tdata    (),
+    .m_rdma2qdma_non_roce_axis_tkeep    (),
+    .m_rdma2qdma_non_roce_axis_tvalid   (),
+    .m_rdma2qdma_non_roce_axis_tlast    (),
+    .m_rdma2qdma_non_roce_axis_tready   (1'b1),
+
+    // invalidate or immediate data from roce IETH/IMMDT header
+    .m_rdma2user_ieth_immdt_axis_tdata  (rdma2user_ieth_immdt_axis_tdata),
+    .m_rdma2user_ieth_immdt_axis_tlast  (rdma2user_ieth_immdt_axis_tlast),
+    .m_rdma2user_ieth_immdt_axis_tvalid (rdma2user_ieth_immdt_axis_tvalid),
+    .m_rdma2user_ieth_immdt_axis_trdy   (rdma2user_ieth_immdt_axis_trdy),
+
+    // RDMA AXI MM interface used to store payload from RDMA MAD, Send or Write operation
+    .m_axi_rdma_send_write_payload_store_awid    (axi_rdma_send_write_payload_awid),
+    .m_axi_rdma_send_write_payload_store_awaddr  (axi_rdma_send_write_payload_awaddr),
+    .m_axi_rdma_send_write_payload_store_awuser  (axi_rdma_send_write_payload_awuser),
+    .m_axi_rdma_send_write_payload_store_awlen   (axi_rdma_send_write_payload_awlen),
+    .m_axi_rdma_send_write_payload_store_awsize  (axi_rdma_send_write_payload_awsize),
+    .m_axi_rdma_send_write_payload_store_awburst (axi_rdma_send_write_payload_awburst),
+    .m_axi_rdma_send_write_payload_store_awcache (axi_rdma_send_write_payload_awcache),
+    .m_axi_rdma_send_write_payload_store_awprot  (axi_rdma_send_write_payload_awprot),
+    .m_axi_rdma_send_write_payload_store_awvalid (axi_rdma_send_write_payload_awvalid),
+    .m_axi_rdma_send_write_payload_store_awready (axi_rdma_send_write_payload_awready),
+    .m_axi_rdma_send_write_payload_store_wdata   (axi_rdma_send_write_payload_wdata),
+    .m_axi_rdma_send_write_payload_store_wstrb   (axi_rdma_send_write_payload_wstrb),
+    .m_axi_rdma_send_write_payload_store_wlast   (axi_rdma_send_write_payload_wlast),
+    .m_axi_rdma_send_write_payload_store_wvalid  (axi_rdma_send_write_payload_wvalid),
+    .m_axi_rdma_send_write_payload_store_wready  (axi_rdma_send_write_payload_wready),
+    .m_axi_rdma_send_write_payload_store_awlock  (axi_rdma_send_write_payload_awlock),
+    .m_axi_rdma_send_write_payload_store_bid     (axi_rdma_send_write_payload_bid),
+    .m_axi_rdma_send_write_payload_store_bresp   (axi_rdma_send_write_payload_bresp),
+    .m_axi_rdma_send_write_payload_store_bvalid  (axi_rdma_send_write_payload_bvalid),
+    .m_axi_rdma_send_write_payload_store_bready  (axi_rdma_send_write_payload_bready),
+    .m_axi_rdma_send_write_payload_store_arid    (axi_rdma_send_write_payload_arid),
+    .m_axi_rdma_send_write_payload_store_araddr  (axi_rdma_send_write_payload_araddr),
+    .m_axi_rdma_send_write_payload_store_arlen   (axi_rdma_send_write_payload_arlen),
+    .m_axi_rdma_send_write_payload_store_arsize  (axi_rdma_send_write_payload_arsize),
+    .m_axi_rdma_send_write_payload_store_arburst (axi_rdma_send_write_payload_arburst),
+    .m_axi_rdma_send_write_payload_store_arcache (axi_rdma_send_write_payload_arcache),
+    .m_axi_rdma_send_write_payload_store_arprot  (axi_rdma_send_write_payload_arprot),
+    .m_axi_rdma_send_write_payload_store_arvalid (axi_rdma_send_write_payload_arvalid),
+    .m_axi_rdma_send_write_payload_store_arready (axi_rdma_send_write_payload_arready),
+    .m_axi_rdma_send_write_payload_store_rid     (axi_rdma_send_write_payload_rid),
+    .m_axi_rdma_send_write_payload_store_rdata   (axi_rdma_send_write_payload_rdata),
+    .m_axi_rdma_send_write_payload_store_rresp   (axi_rdma_send_write_payload_rresp),
+    .m_axi_rdma_send_write_payload_store_rlast   (axi_rdma_send_write_payload_rlast),
+    .m_axi_rdma_send_write_payload_store_rvalid  (axi_rdma_send_write_payload_rvalid),
+    .m_axi_rdma_send_write_payload_store_rready  (axi_rdma_send_write_payload_rready),
+    .m_axi_rdma_send_write_payload_store_arlock  (axi_rdma_send_write_payload_arlock),
+
+    // RDMA AXI MM interface used to store payload from RDMA Read response operation
+    .m_axi_rdma_rsp_payload_awid          (axi_rdma_rsp_payload_awid),
+    .m_axi_rdma_rsp_payload_awaddr        (axi_rdma_rsp_payload_awaddr),
+    .m_axi_rdma_rsp_payload_awlen         (axi_rdma_rsp_payload_awlen),
+    .m_axi_rdma_rsp_payload_awsize        (axi_rdma_rsp_payload_awsize),
+    .m_axi_rdma_rsp_payload_awburst       (axi_rdma_rsp_payload_awburst),
+    .m_axi_rdma_rsp_payload_awcache       (axi_rdma_rsp_payload_awcache),
+    .m_axi_rdma_rsp_payload_awprot        (axi_rdma_rsp_payload_awprot),
+    .m_axi_rdma_rsp_payload_awvalid       (axi_rdma_rsp_payload_awvalid),
+    .m_axi_rdma_rsp_payload_awready       (axi_rdma_rsp_payload_awready),
+    .m_axi_rdma_rsp_payload_wdata         (axi_rdma_rsp_payload_wdata),
+    .m_axi_rdma_rsp_payload_wstrb         (axi_rdma_rsp_payload_wstrb),
+    .m_axi_rdma_rsp_payload_wlast         (axi_rdma_rsp_payload_wlast),
+    .m_axi_rdma_rsp_payload_wvalid        (axi_rdma_rsp_payload_wvalid),
+    .m_axi_rdma_rsp_payload_wready        (axi_rdma_rsp_payload_wready),
+    .m_axi_rdma_rsp_payload_awlock        (axi_rdma_rsp_payload_awlock),
+    .m_axi_rdma_rsp_payload_bid           (axi_rdma_rsp_payload_bid),
+    .m_axi_rdma_rsp_payload_bresp         (axi_rdma_rsp_payload_bresp),
+    .m_axi_rdma_rsp_payload_bvalid        (axi_rdma_rsp_payload_bvalid),
+    .m_axi_rdma_rsp_payload_bready        (axi_rdma_rsp_payload_bready),
+    .m_axi_rdma_rsp_payload_arid          (axi_rdma_rsp_payload_arid),
+    .m_axi_rdma_rsp_payload_araddr        (axi_rdma_rsp_payload_araddr),
+    .m_axi_rdma_rsp_payload_arlen         (axi_rdma_rsp_payload_arlen),
+    .m_axi_rdma_rsp_payload_arsize        (axi_rdma_rsp_payload_arsize),
+    .m_axi_rdma_rsp_payload_arburst       (axi_rdma_rsp_payload_arburst),
+    .m_axi_rdma_rsp_payload_arcache       (axi_rdma_rsp_payload_arcache),
+    .m_axi_rdma_rsp_payload_arprot        (axi_rdma_rsp_payload_arprot),
+    .m_axi_rdma_rsp_payload_arvalid       (axi_rdma_rsp_payload_arvalid),
+    .m_axi_rdma_rsp_payload_arready       (axi_rdma_rsp_payload_arready),
+    .m_axi_rdma_rsp_payload_rid           (axi_rdma_rsp_payload_rid),
+    .m_axi_rdma_rsp_payload_rdata         (axi_rdma_rsp_payload_rdata),
+    .m_axi_rdma_rsp_payload_rresp         (axi_rdma_rsp_payload_rresp),
+    .m_axi_rdma_rsp_payload_rlast         (axi_rdma_rsp_payload_rlast),
+    .m_axi_rdma_rsp_payload_rvalid        (axi_rdma_rsp_payload_rvalid),
+    .m_axi_rdma_rsp_payload_rready        (axi_rdma_rsp_payload_rready),
+    .m_axi_rdma_rsp_payload_arlock        (axi_rdma_rsp_payload_arlock),
+
+    // RDMA AXI MM interface used to fetch WQE entries in the senq queue from DDR by the QP manager
+    .m_axi_qp_get_wqe_awid                (axi_rdma_get_wqe_awid),
+    .m_axi_qp_get_wqe_awaddr              (axi_rdma_get_wqe_awaddr),
+    .m_axi_qp_get_wqe_awlen               (axi_rdma_get_wqe_awlen),
+    .m_axi_qp_get_wqe_awsize              (axi_rdma_get_wqe_awsize),
+    .m_axi_qp_get_wqe_awburst             (axi_rdma_get_wqe_awburst),
+    .m_axi_qp_get_wqe_awcache             (axi_rdma_get_wqe_awcache),
+    .m_axi_qp_get_wqe_awprot              (axi_rdma_get_wqe_awprot),
+    .m_axi_qp_get_wqe_awvalid             (axi_rdma_get_wqe_awvalid),
+    .m_axi_qp_get_wqe_awready             (axi_rdma_get_wqe_awready),
+    .m_axi_qp_get_wqe_wdata               (axi_rdma_get_wqe_wdata),
+    .m_axi_qp_get_wqe_wstrb               (axi_rdma_get_wqe_wstrb),
+    .m_axi_qp_get_wqe_wlast               (axi_rdma_get_wqe_wlast),
+    .m_axi_qp_get_wqe_wvalid              (axi_rdma_get_wqe_wvalid),
+    .m_axi_qp_get_wqe_wready              (axi_rdma_get_wqe_wready),
+    .m_axi_qp_get_wqe_awlock              (axi_rdma_get_wqe_awlock),
+    .m_axi_qp_get_wqe_bid                 (axi_rdma_get_wqe_bid),
+    .m_axi_qp_get_wqe_bresp               (axi_rdma_get_wqe_bresp),
+    .m_axi_qp_get_wqe_bvalid              (axi_rdma_get_wqe_bvalid),
+    .m_axi_qp_get_wqe_bready              (axi_rdma_get_wqe_bready),
+    .m_axi_qp_get_wqe_arid                (axi_rdma_get_wqe_arid),
+    .m_axi_qp_get_wqe_araddr              (axi_rdma_get_wqe_araddr),
+    .m_axi_qp_get_wqe_arlen               (axi_rdma_get_wqe_arlen),
+    .m_axi_qp_get_wqe_arsize              (axi_rdma_get_wqe_arsize),
+    .m_axi_qp_get_wqe_arburst             (axi_rdma_get_wqe_arburst),
+    .m_axi_qp_get_wqe_arcache             (axi_rdma_get_wqe_arcache),
+    .m_axi_qp_get_wqe_arprot              (axi_rdma_get_wqe_arprot),
+    .m_axi_qp_get_wqe_arvalid             (axi_rdma_get_wqe_arvalid),
+    .m_axi_qp_get_wqe_arready             (axi_rdma_get_wqe_arready),
+    .m_axi_qp_get_wqe_rid                 (axi_rdma_get_wqe_rid),
+    .m_axi_qp_get_wqe_rdata               (axi_rdma_get_wqe_rdata),
+    .m_axi_qp_get_wqe_rresp               (axi_rdma_get_wqe_rresp),
+    .m_axi_qp_get_wqe_rlast               (axi_rdma_get_wqe_rlast),
+    .m_axi_qp_get_wqe_rvalid              (axi_rdma_get_wqe_rvalid),
+    .m_axi_qp_get_wqe_rready              (axi_rdma_get_wqe_rready),
+    .m_axi_qp_get_wqe_arlock              (axi_rdma_get_wqe_arlock),
+
+    // RDMA AXI MM interface used to store payload of an outgoing RDMA write packet to a retry buffer
+    .m_axi_payload_to_retry_buf_awid      (axi_payload_to_retry_buf_awid),
+    .m_axi_payload_to_retry_buf_awaddr    (axi_payload_to_retry_buf_awaddr),
+    .m_axi_payload_to_retry_buf_awlen     (axi_payload_to_retry_buf_awlen),
+    .m_axi_payload_to_retry_buf_awsize    (axi_payload_to_retry_buf_awsize),
+    .m_axi_payload_to_retry_buf_awburst   (axi_payload_to_retry_buf_awburst),
+    .m_axi_payload_to_retry_buf_awcache   (axi_payload_to_retry_buf_awcache),
+    .m_axi_payload_to_retry_buf_awprot    (axi_payload_to_retry_buf_awprot),
+    .m_axi_payload_to_retry_buf_awvalid   (axi_payload_to_retry_buf_awvalid),
+    .m_axi_payload_to_retry_buf_awready   (axi_payload_to_retry_buf_awready),
+    .m_axi_payload_to_retry_buf_wdata     (axi_payload_to_retry_buf_wdata),
+    .m_axi_payload_to_retry_buf_wstrb     (axi_payload_to_retry_buf_wstrb),
+    .m_axi_payload_to_retry_buf_wlast     (axi_payload_to_retry_buf_wlast),
+    .m_axi_payload_to_retry_buf_wvalid    (axi_payload_to_retry_buf_wvalid),
+    .m_axi_payload_to_retry_buf_wready    (axi_payload_to_retry_buf_wready),
+    .m_axi_payload_to_retry_buf_awlock    (axi_payload_to_retry_buf_awlock),
+    .m_axi_payload_to_retry_buf_bid       (axi_payload_to_retry_buf_bid),
+    .m_axi_payload_to_retry_buf_bresp     (axi_payload_to_retry_buf_bresp),
+    .m_axi_payload_to_retry_buf_bvalid    (axi_payload_to_retry_buf_bvalid),
+    .m_axi_payload_to_retry_buf_bready    (axi_payload_to_retry_buf_bready),
+    .m_axi_payload_to_retry_buf_arid      (axi_payload_to_retry_buf_arid),
+    .m_axi_payload_to_retry_buf_araddr    (axi_payload_to_retry_buf_araddr),
+    .m_axi_payload_to_retry_buf_arlen     (axi_payload_to_retry_buf_arlen),
+    .m_axi_payload_to_retry_buf_arsize    (axi_payload_to_retry_buf_arsize),
+    .m_axi_payload_to_retry_buf_arburst   (axi_payload_to_retry_buf_arburst),
+    .m_axi_payload_to_retry_buf_arcache   (axi_payload_to_retry_buf_arcache),
+    .m_axi_payload_to_retry_buf_arprot    (axi_payload_to_retry_buf_arprot),
+    .m_axi_payload_to_retry_buf_arvalid   (axi_payload_to_retry_buf_arvalid),
+    .m_axi_payload_to_retry_buf_arready   (axi_payload_to_retry_buf_arready),
+    .m_axi_payload_to_retry_buf_rid       (axi_payload_to_retry_buf_rid),
+    .m_axi_payload_to_retry_buf_rdata     (axi_payload_to_retry_buf_rdata),
+    .m_axi_payload_to_retry_buf_rresp     (axi_payload_to_retry_buf_rresp),
+    .m_axi_payload_to_retry_buf_rlast     (axi_payload_to_retry_buf_rlast),
+    .m_axi_payload_to_retry_buf_rvalid    (axi_payload_to_retry_buf_rvalid),
+    .m_axi_payload_to_retry_buf_rready    (axi_payload_to_retry_buf_rready),
+    .m_axi_payload_to_retry_buf_arlock    (axi_payload_to_retry_buf_arlock),
+
+    // RDMA AXI MM interface used to get payload of an outgoing RDMA send/write and read response packets
+    .m_axi_pktgen_get_payload_awid       (axi_rdma_get_payload_awid),
+    .m_axi_pktgen_get_payload_awaddr     (axi_rdma_get_payload_awaddr),
+    .m_axi_pktgen_get_payload_awlen      (axi_rdma_get_payload_awlen),
+    .m_axi_pktgen_get_payload_awsize     (axi_rdma_get_payload_awsize),
+    .m_axi_pktgen_get_payload_awburst    (axi_rdma_get_payload_awburst),
+    .m_axi_pktgen_get_payload_awcache    (axi_rdma_get_payload_awcache),
+    .m_axi_pktgen_get_payload_awprot     (axi_rdma_get_payload_awprot),
+    .m_axi_pktgen_get_payload_awvalid    (axi_rdma_get_payload_awvalid),
+    .m_axi_pktgen_get_payload_awready    (axi_rdma_get_payload_awready),
+    .m_axi_pktgen_get_payload_wdata      (axi_rdma_get_payload_wdata),
+    .m_axi_pktgen_get_payload_wstrb      (axi_rdma_get_payload_wstrb),
+    .m_axi_pktgen_get_payload_wlast      (axi_rdma_get_payload_wlast),
+    .m_axi_pktgen_get_payload_wvalid     (axi_rdma_get_payload_wvalid),
+    .m_axi_pktgen_get_payload_wready     (axi_rdma_get_payload_wready),
+    .m_axi_pktgen_get_payload_awlock     (axi_rdma_get_payload_awlock),
+    .m_axi_pktgen_get_payload_bid        (axi_rdma_get_payload_bid),
+    .m_axi_pktgen_get_payload_bresp      (axi_rdma_get_payload_bresp),
+    .m_axi_pktgen_get_payload_bvalid     (axi_rdma_get_payload_bvalid),
+    .m_axi_pktgen_get_payload_bready     (axi_rdma_get_payload_bready),
+    .m_axi_pktgen_get_payload_arid       (axi_rdma_get_payload_arid),
+    .m_axi_pktgen_get_payload_araddr     (axi_rdma_get_payload_araddr),
+    .m_axi_pktgen_get_payload_arlen      (axi_rdma_get_payload_arlen),
+    .m_axi_pktgen_get_payload_arsize     (axi_rdma_get_payload_arsize),
+    .m_axi_pktgen_get_payload_arburst    (axi_rdma_get_payload_arburst),
+    .m_axi_pktgen_get_payload_arcache    (axi_rdma_get_payload_arcache),
+    .m_axi_pktgen_get_payload_arprot     (axi_rdma_get_payload_arprot),
+    .m_axi_pktgen_get_payload_arvalid    (axi_rdma_get_payload_arvalid),
+    .m_axi_pktgen_get_payload_arready    (axi_rdma_get_payload_arready),
+    .m_axi_pktgen_get_payload_rid        (axi_rdma_get_payload_rid),
+    .m_axi_pktgen_get_payload_rdata      (axi_rdma_get_payload_rdata),
+    .m_axi_pktgen_get_payload_rresp      (axi_rdma_get_payload_rresp),
+    .m_axi_pktgen_get_payload_rlast      (axi_rdma_get_payload_rlast),
+    .m_axi_pktgen_get_payload_rvalid     (axi_rdma_get_payload_rvalid),
+    .m_axi_pktgen_get_payload_rready     (axi_rdma_get_payload_rready),
+    .m_axi_pktgen_get_payload_arlock     (axi_rdma_get_payload_arlock),
+
+    // RDMA AXI MM interface used to write completion entries to a completion queue in the DDR
+    .m_axi_write_completion_awid         (axi_rdma_completion_awid),
+    .m_axi_write_completion_awaddr       (axi_rdma_completion_awaddr),
+    .m_axi_write_completion_awlen        (axi_rdma_completion_awlen),
+    .m_axi_write_completion_awsize       (axi_rdma_completion_awsize),
+    .m_axi_write_completion_awburst      (axi_rdma_completion_awburst),
+    .m_axi_write_completion_awcache      (axi_rdma_completion_awcache),
+    .m_axi_write_completion_awprot       (axi_rdma_completion_awprot),
+    .m_axi_write_completion_awvalid      (axi_rdma_completion_awvalid),
+    .m_axi_write_completion_awready      (axi_rdma_completion_awready),
+    .m_axi_write_completion_wdata        (axi_rdma_completion_wdata),
+    .m_axi_write_completion_wstrb        (axi_rdma_completion_wstrb),
+    .m_axi_write_completion_wlast        (axi_rdma_completion_wlast),
+    .m_axi_write_completion_wvalid       (axi_rdma_completion_wvalid),
+    .m_axi_write_completion_wready       (axi_rdma_completion_wready),
+    .m_axi_write_completion_awlock       (axi_rdma_completion_awlock),
+    .m_axi_write_completion_bid          (axi_rdma_completion_bid),
+    .m_axi_write_completion_bresp        (axi_rdma_completion_bresp),
+    .m_axi_write_completion_bvalid       (axi_rdma_completion_bvalid),
+    .m_axi_write_completion_bready       (axi_rdma_completion_bready),
+    .m_axi_write_completion_arid         (axi_rdma_completion_arid),
+    .m_axi_write_completion_araddr       (axi_rdma_completion_araddr),
+    .m_axi_write_completion_arlen        (axi_rdma_completion_arlen),
+    .m_axi_write_completion_arsize       (axi_rdma_completion_arsize),
+    .m_axi_write_completion_arburst      (axi_rdma_completion_arburst),
+    .m_axi_write_completion_arcache      (axi_rdma_completion_arcache),
+    .m_axi_write_completion_arprot       (axi_rdma_completion_arprot),
+    .m_axi_write_completion_arvalid      (axi_rdma_completion_arvalid),
+    .m_axi_write_completion_arready      (axi_rdma_completion_arready),
+    .m_axi_write_completion_rid          (axi_rdma_completion_rid),
+    .m_axi_write_completion_rdata        (axi_rdma_completion_rdata),
+    .m_axi_write_completion_rresp        (axi_rdma_completion_rresp),
+    .m_axi_write_completion_rlast        (axi_rdma_completion_rlast),
+    .m_axi_write_completion_rvalid       (axi_rdma_completion_rvalid),
+    .m_axi_write_completion_rready       (axi_rdma_completion_rready),
+    .m_axi_write_completion_arlock       (axi_rdma_completion_arlock),
+
+    // TODO: In the current implementation, we do not consider hardware handshaking from user logic
+    // HW handshaking from user logic: Send WQE completion queue doorbell
+    .resp_hndler_o_send_cq_db_cnt_valid(resp_hndler_o_send_cq_db_cnt_valid),
+    .resp_hndler_o_send_cq_db_addr     (resp_hndler_o_send_cq_db_addr),
+    .resp_hndler_o_send_cq_db_cnt      (resp_hndler_o_send_cq_db_cnt),
+    .resp_hndler_i_send_cq_db_rdy      (resp_hndler_i_send_cq_db_rdy),
+
+    // HW handshaking from user logic: Send WQE producer index doorbell
+    .i_qp_sq_pidb_hndshk               (i_qp_sq_pidb_hndshk),
+    .i_qp_sq_pidb_wr_addr_hndshk       (i_qp_sq_pidb_wr_addr_hndshk),
+    .i_qp_sq_pidb_wr_valid_hndshk      (i_qp_sq_pidb_wr_valid_hndshk),
+    .o_qp_sq_pidb_wr_rdy               (o_qp_sq_pidb_wr_rdy),
+
+    // HW handshaking from user logic: RDMA-Send consumer index doorbell
+    .i_qp_rq_cidb_hndshk               (i_qp_rq_cidb_hndshk),
+    .i_qp_rq_cidb_wr_addr_hndshk       (i_qp_rq_cidb_wr_addr_hndshk),
+    .i_qp_rq_cidb_wr_valid_hndshk      (i_qp_rq_cidb_wr_valid_hndshk),
+    .o_qp_rq_cidb_wr_rdy               (o_qp_rq_cidb_wr_rdy),
+
+    // HW handshaking from user logic: RDMA-Send producer index doorbell
+    .rx_pkt_hndler_o_rq_db_data        (rx_pkt_hndler_o_rq_db_data),
+    .rx_pkt_hndler_o_rq_db_addr        (rx_pkt_hndler_o_rq_db_addr),
+    .rx_pkt_hndler_o_rq_db_data_valid  (rx_pkt_hndler_o_rq_db_data_valid),
+    .rx_pkt_hndler_i_rq_db_rdy         (rx_pkt_hndler_i_rq_db_rdy),
+
+    .rnic_intr    (rdma_intr),
+
+    .mod_rstn     (rdma_rstn),
+    .mod_rst_done (rdma_rst_done),
+    //.rdma_resetn_done (rdma_resetn_done),
+    .axil_clk     (axil_aclk),
+    .axis_clk     (axis_aclk)
+  );
+
+  axi_2to1_interconnect_to_dev_mem axi_interconnect_to_dev_mem_inst(
+    .s_axi_qdma_mm_awid                    (axi_qdma_mm_awid),
+    .s_axi_qdma_mm_awaddr                  (axi_qdma_mm_awaddr),
+    .s_axi_qdma_mm_awqos                   (axi_qdma_mm_awqos),
+    .s_axi_qdma_mm_awlen                   (axi_qdma_mm_awlen),
+    .s_axi_qdma_mm_awsize                  (axi_qdma_mm_awsize),
+    .s_axi_qdma_mm_awburst                 (axi_qdma_mm_awburst),
+    .s_axi_qdma_mm_awcache                 (axi_qdma_mm_awcache),
+    .s_axi_qdma_mm_awprot                  (axi_qdma_mm_awprot),
+    .s_axi_qdma_mm_awvalid                 (axi_qdma_mm_awvalid),
+    .s_axi_qdma_mm_awready                 (axi_qdma_mm_awready),
+    .s_axi_qdma_mm_wdata                   (axi_qdma_mm_wdata),
+    .s_axi_qdma_mm_wstrb                   (axi_qdma_mm_wstrb),
+    .s_axi_qdma_mm_wlast                   (axi_qdma_mm_wlast),
+    .s_axi_qdma_mm_wvalid                  (axi_qdma_mm_wvalid),
+    .s_axi_qdma_mm_wready                  (axi_qdma_mm_wready),
+    .s_axi_qdma_mm_awlock                  (axi_qdma_mm_awlock),
+    .s_axi_qdma_mm_bid                     (axi_qdma_mm_bid),
+    .s_axi_qdma_mm_bresp                   (axi_qdma_mm_bresp),
+    .s_axi_qdma_mm_bvalid                  (axi_qdma_mm_bvalid),
+    .s_axi_qdma_mm_bready                  (axi_qdma_mm_bready),
+    .s_axi_qdma_mm_arid                    (axi_qdma_mm_arid),
+    .s_axi_qdma_mm_araddr                  (axi_qdma_mm_araddr),
+    .s_axi_qdma_mm_arlen                   (axi_qdma_mm_arlen),
+    .s_axi_qdma_mm_arsize                  (axi_qdma_mm_arsize),
+    .s_axi_qdma_mm_arburst                 (axi_qdma_mm_arburst),
+    .s_axi_qdma_mm_arcache                 (axi_qdma_mm_arcache),
+    .s_axi_qdma_mm_arprot                  (axi_qdma_mm_arprot),
+    .s_axi_qdma_mm_arvalid                 (axi_qdma_mm_arvalid),
+    .s_axi_qdma_mm_arready                 (axi_qdma_mm_arready),
+    .s_axi_qdma_mm_rid                     (axi_qdma_mm_rid),
+    .s_axi_qdma_mm_rdata                   (axi_qdma_mm_rdata),
+    .s_axi_qdma_mm_rresp                   (axi_qdma_mm_rresp),
+    .s_axi_qdma_mm_rlast                   (axi_qdma_mm_rlast),
+    .s_axi_qdma_mm_rvalid                  (axi_qdma_mm_rvalid),
+    .s_axi_qdma_mm_rready                  (axi_qdma_mm_rready),
+    .s_axi_qdma_mm_arlock                  (axi_qdma_mm_arlock),
+    .s_axi_qdma_mm_arqos                   (axi_qdma_mm_arqos),
+
+    .s_axi_from_sys_crossbar_awid          ({1'b0,axi_from_sys_to_dev_crossbar_awid}),
+    .s_axi_from_sys_crossbar_awaddr        (axi_from_sys_to_dev_crossbar_awaddr),
+    .s_axi_from_sys_crossbar_awqos         (axi_from_sys_to_dev_crossbar_awqos),
+    .s_axi_from_sys_crossbar_awlen         (axi_from_sys_to_dev_crossbar_awlen),
+    .s_axi_from_sys_crossbar_awsize        (axi_from_sys_to_dev_crossbar_awsize),
+    .s_axi_from_sys_crossbar_awburst       (axi_from_sys_to_dev_crossbar_awburst),
+    .s_axi_from_sys_crossbar_awcache       (axi_from_sys_to_dev_crossbar_awcache),
+    .s_axi_from_sys_crossbar_awprot        (axi_from_sys_to_dev_crossbar_awprot),
+    .s_axi_from_sys_crossbar_awvalid       (axi_from_sys_to_dev_crossbar_awvalid),
+    .s_axi_from_sys_crossbar_awready       (axi_from_sys_to_dev_crossbar_awready),
+    .s_axi_from_sys_crossbar_wdata         (axi_from_sys_to_dev_crossbar_wdata),
+    .s_axi_from_sys_crossbar_wstrb         (axi_from_sys_to_dev_crossbar_wstrb),
+    .s_axi_from_sys_crossbar_wlast         (axi_from_sys_to_dev_crossbar_wlast),
+    .s_axi_from_sys_crossbar_wvalid        (axi_from_sys_to_dev_crossbar_wvalid),
+    .s_axi_from_sys_crossbar_wready        (axi_from_sys_to_dev_crossbar_wready),
+    .s_axi_from_sys_crossbar_awlock        (axi_from_sys_to_dev_crossbar_awlock),
+    .s_axi_from_sys_crossbar_bid           (axi_from_sys_to_dev_crossbar_bid),
+    .s_axi_from_sys_crossbar_bresp         (axi_from_sys_to_dev_crossbar_bresp),
+    .s_axi_from_sys_crossbar_bvalid        (axi_from_sys_to_dev_crossbar_bvalid),
+    .s_axi_from_sys_crossbar_bready        (axi_from_sys_to_dev_crossbar_bready),
+    .s_axi_from_sys_crossbar_arid          ({1'b0,axi_from_sys_to_dev_crossbar_arid}),
+    .s_axi_from_sys_crossbar_araddr        (axi_from_sys_to_dev_crossbar_araddr),
+    .s_axi_from_sys_crossbar_arlen         (axi_from_sys_to_dev_crossbar_arlen),
+    .s_axi_from_sys_crossbar_arsize        (axi_from_sys_to_dev_crossbar_arsize),
+    .s_axi_from_sys_crossbar_arburst       (axi_from_sys_to_dev_crossbar_arburst),
+    .s_axi_from_sys_crossbar_arcache       (axi_from_sys_to_dev_crossbar_arcache),
+    .s_axi_from_sys_crossbar_arprot        (axi_from_sys_to_dev_crossbar_arprot),
+    .s_axi_from_sys_crossbar_arvalid       (axi_from_sys_to_dev_crossbar_arvalid),
+    .s_axi_from_sys_crossbar_arready       (axi_from_sys_to_dev_crossbar_arready),
+    .s_axi_from_sys_crossbar_rid           (axi_from_sys_to_dev_crossbar_rid),
+    .s_axi_from_sys_crossbar_rdata         (axi_from_sys_to_dev_crossbar_rdata),
+    .s_axi_from_sys_crossbar_rresp         (axi_from_sys_to_dev_crossbar_rresp),
+    .s_axi_from_sys_crossbar_rlast         (axi_from_sys_to_dev_crossbar_rlast),
+    .s_axi_from_sys_crossbar_rvalid        (axi_from_sys_to_dev_crossbar_rvalid),
+    .s_axi_from_sys_crossbar_rready        (axi_from_sys_to_dev_crossbar_rready),
+    .s_axi_from_sys_crossbar_arlock        (axi_from_sys_to_dev_crossbar_arlock),
+    .s_axi_from_sys_crossbar_arqos         (axi_from_sys_to_dev_crossbar_arqos),
+
+    .m_axi_dev_mem_awaddr                  (axi_dev_mem_awaddr),
+    .m_axi_dev_mem_awprot                  (axi_dev_mem_awprot),
+    .m_axi_dev_mem_awvalid                 (axi_dev_mem_awvalid),
+    .m_axi_dev_mem_awready                 (axi_dev_mem_awready),
+    .m_axi_dev_mem_awsize                  (axi_dev_mem_awsize),
+    .m_axi_dev_mem_awburst                 (axi_dev_mem_awburst),
+    .m_axi_dev_mem_awcache                 (axi_dev_mem_awcache),
+    .m_axi_dev_mem_awlen                   (axi_dev_mem_awlen),
+    .m_axi_dev_mem_awlock                  (axi_dev_mem_awlock),
+    .m_axi_dev_mem_awqos                   (axi_dev_mem_awqos),
+    .m_axi_dev_mem_awregion                (axi_dev_mem_awregion),
+    .m_axi_dev_mem_awid                    (axi_dev_mem_awid),
+    .m_axi_dev_mem_wdata                   (axi_dev_mem_wdata),
+    .m_axi_dev_mem_wstrb                   (axi_dev_mem_wstrb),
+    .m_axi_dev_mem_wvalid                  (axi_dev_mem_wvalid),
+    .m_axi_dev_mem_wready                  (axi_dev_mem_wready),
+    .m_axi_dev_mem_wlast                   (axi_dev_mem_wlast),
+    .m_axi_dev_mem_bresp                   (axi_dev_mem_bresp),
+    .m_axi_dev_mem_bvalid                  (axi_dev_mem_bvalid),
+    .m_axi_dev_mem_bready                  (axi_dev_mem_bready),
+    .m_axi_dev_mem_bid                     (axi_dev_mem_bid),
+    .m_axi_dev_mem_araddr                  (axi_dev_mem_araddr),
+    .m_axi_dev_mem_arprot                  (axi_dev_mem_arprot),
+    .m_axi_dev_mem_arvalid                 (axi_dev_mem_arvalid),
+    .m_axi_dev_mem_arready                 (axi_dev_mem_arready),
+    .m_axi_dev_mem_arsize                  (axi_dev_mem_arsize),
+    .m_axi_dev_mem_arburst                 (axi_dev_mem_arburst),
+    .m_axi_dev_mem_arcache                 (axi_dev_mem_arcache),
+    .m_axi_dev_mem_arlock                  (axi_dev_mem_arlock),
+    .m_axi_dev_mem_arlen                   (axi_dev_mem_arlen),
+    .m_axi_dev_mem_arqos                   (axi_dev_mem_arqos),
+    .m_axi_dev_mem_arregion                (axi_dev_mem_arregion),
+    .m_axi_dev_mem_arid                    (axi_dev_mem_arid),
+    .m_axi_dev_mem_rdata                   (axi_dev_mem_rdata),
+    .m_axi_dev_mem_rresp                   (axi_dev_mem_rresp),
+    .m_axi_dev_mem_rvalid                  (axi_dev_mem_rvalid),
+    .m_axi_dev_mem_rready                  (axi_dev_mem_rready),
+    .m_axi_dev_mem_rlast                   (axi_dev_mem_rlast),
+    .m_axi_dev_mem_rid                     (axi_dev_mem_rid),
+
+    .axis_aclk                             (axis_aclk),
+    .axis_arestn                           (qdma_rstn)
+);
+
+axi_7to2_interconnect_to_sys_mem axi_interconnect_to_sys_mem_inst(
+    .s_axi_rdma_get_wqe_awid               (axi_rdma_get_wqe_awid),
+    .s_axi_rdma_get_wqe_awaddr             (axi_rdma_get_wqe_awaddr),
+    .s_axi_rdma_get_wqe_awqos              (axi_rdma_get_wqe_awqos),
+    .s_axi_rdma_get_wqe_awlen              (axi_rdma_get_wqe_awlen),
+    .s_axi_rdma_get_wqe_awsize             (axi_rdma_get_wqe_awsize),
+    .s_axi_rdma_get_wqe_awburst            (axi_rdma_get_wqe_awburst),
+    .s_axi_rdma_get_wqe_awcache            (axi_rdma_get_wqe_awcache),
+    .s_axi_rdma_get_wqe_awprot             (axi_rdma_get_wqe_awprot),
+    .s_axi_rdma_get_wqe_awvalid            (axi_rdma_get_wqe_awvalid),
+    .s_axi_rdma_get_wqe_awready            (axi_rdma_get_wqe_awready),
+    .s_axi_rdma_get_wqe_wdata              (axi_rdma_get_wqe_wdata),
+    .s_axi_rdma_get_wqe_wstrb              (axi_rdma_get_wqe_wstrb),
+    .s_axi_rdma_get_wqe_wlast              (axi_rdma_get_wqe_wlast),
+    .s_axi_rdma_get_wqe_wvalid             (axi_rdma_get_wqe_wvalid),
+    .s_axi_rdma_get_wqe_wready             (axi_rdma_get_wqe_wready),
+    .s_axi_rdma_get_wqe_awlock             (axi_rdma_get_wqe_awlock),
+    .s_axi_rdma_get_wqe_bid                (axi_rdma_get_wqe_bid),
+    .s_axi_rdma_get_wqe_bresp              (axi_rdma_get_wqe_bresp),
+    .s_axi_rdma_get_wqe_bvalid             (axi_rdma_get_wqe_bvalid),
+    .s_axi_rdma_get_wqe_bready             (axi_rdma_get_wqe_bready),
+    .s_axi_rdma_get_wqe_arid               (axi_rdma_get_wqe_arid),
+    .s_axi_rdma_get_wqe_araddr             (axi_rdma_get_wqe_araddr),
+    .s_axi_rdma_get_wqe_arlen              (axi_rdma_get_wqe_arlen),
+    .s_axi_rdma_get_wqe_arsize             (axi_rdma_get_wqe_arsize),
+    .s_axi_rdma_get_wqe_arburst            (axi_rdma_get_wqe_arburst),
+    .s_axi_rdma_get_wqe_arcache            (axi_rdma_get_wqe_arcache),
+    .s_axi_rdma_get_wqe_arprot             (axi_rdma_get_wqe_arprot),
+    .s_axi_rdma_get_wqe_arvalid            (axi_rdma_get_wqe_arvalid),
+    .s_axi_rdma_get_wqe_arready            (axi_rdma_get_wqe_arready),
+    .s_axi_rdma_get_wqe_rid                (axi_rdma_get_wqe_rid),
+    .s_axi_rdma_get_wqe_rdata              (axi_rdma_get_wqe_rdata),
+    .s_axi_rdma_get_wqe_rresp              (axi_rdma_get_wqe_rresp),
+    .s_axi_rdma_get_wqe_rlast              (axi_rdma_get_wqe_rlast),
+    .s_axi_rdma_get_wqe_rvalid             (axi_rdma_get_wqe_rvalid),
+    .s_axi_rdma_get_wqe_rready             (axi_rdma_get_wqe_rready),
+    .s_axi_rdma_get_wqe_arlock             (axi_rdma_get_wqe_arlock),
+    .s_axi_rdma_get_wqe_arqos              (axi_rdma_get_wqe_arqos),
+
+    .s_axi_rdma_get_payload_awid           (axi_rdma_get_payload_awid),
+    .s_axi_rdma_get_payload_awaddr         (axi_rdma_get_payload_awaddr),
+    .s_axi_rdma_get_payload_awqos          (axi_rdma_get_payload_awqos),
+    .s_axi_rdma_get_payload_awlen          (axi_rdma_get_payload_awlen),
+    .s_axi_rdma_get_payload_awsize         (axi_rdma_get_payload_awsize),
+    .s_axi_rdma_get_payload_awburst        (axi_rdma_get_payload_awburst),
+    .s_axi_rdma_get_payload_awcache        (axi_rdma_get_payload_awcache),
+    .s_axi_rdma_get_payload_awprot         (axi_rdma_get_payload_awprot),
+    .s_axi_rdma_get_payload_awvalid        (axi_rdma_get_payload_awvalid),
+    .s_axi_rdma_get_payload_awready        (axi_rdma_get_payload_awready),
+    .s_axi_rdma_get_payload_wdata          (axi_rdma_get_payload_wdata),
+    .s_axi_rdma_get_payload_wstrb          (axi_rdma_get_payload_wstrb),
+    .s_axi_rdma_get_payload_wlast          (axi_rdma_get_payload_wlast),
+    .s_axi_rdma_get_payload_wvalid         (axi_rdma_get_payload_wvalid),
+    .s_axi_rdma_get_payload_wready         (axi_rdma_get_payload_wready),
+    .s_axi_rdma_get_payload_awlock         (axi_rdma_get_payload_awlock),
+    .s_axi_rdma_get_payload_bid            (axi_rdma_get_payload_bid),
+    .s_axi_rdma_get_payload_bresp          (axi_rdma_get_payload_bresp),
+    .s_axi_rdma_get_payload_bvalid         (axi_rdma_get_payload_bvalid),
+    .s_axi_rdma_get_payload_bready         (axi_rdma_get_payload_bready),
+    .s_axi_rdma_get_payload_arid           (axi_rdma_get_payload_arid),
+    .s_axi_rdma_get_payload_araddr         (axi_rdma_get_payload_araddr),
+    .s_axi_rdma_get_payload_arlen          (axi_rdma_get_payload_arlen),
+    .s_axi_rdma_get_payload_arsize         (axi_rdma_get_payload_arsize),
+    .s_axi_rdma_get_payload_arburst        (axi_rdma_get_payload_arburst),
+    .s_axi_rdma_get_payload_arcache        (axi_rdma_get_payload_arcache),
+    .s_axi_rdma_get_payload_arprot         (axi_rdma_get_payload_arprot),
+    .s_axi_rdma_get_payload_arvalid        (axi_rdma_get_payload_arvalid),
+    .s_axi_rdma_get_payload_arready        (axi_rdma_get_payload_arready),
+    .s_axi_rdma_get_payload_rid            (axi_rdma_get_payload_rid),
+    .s_axi_rdma_get_payload_rdata          (axi_rdma_get_payload_rdata),
+    .s_axi_rdma_get_payload_rresp          (axi_rdma_get_payload_rresp),
+    .s_axi_rdma_get_payload_rlast          (axi_rdma_get_payload_rlast),
+    .s_axi_rdma_get_payload_rvalid         (axi_rdma_get_payload_rvalid),
+    .s_axi_rdma_get_payload_rready         (axi_rdma_get_payload_rready),
+    .s_axi_rdma_get_payload_arlock         (axi_rdma_get_payload_arlock),
+    .s_axi_rdma_get_payload_arqos          (axi_rdma_get_payload_arqos),
+
+    .s_axi_rdma_completion_awid            (axi_rdma_completion_awid),
+    .s_axi_rdma_completion_awaddr          (axi_rdma_completion_awaddr),
+    .s_axi_rdma_completion_awqos           (axi_rdma_completion_awqos),
+    .s_axi_rdma_completion_awlen           (axi_rdma_completion_awlen),
+    .s_axi_rdma_completion_awsize          (axi_rdma_completion_awsize),
+    .s_axi_rdma_completion_awburst         (axi_rdma_completion_awburst),
+    .s_axi_rdma_completion_awcache         (axi_rdma_completion_awcache),
+    .s_axi_rdma_completion_awprot          (axi_rdma_completion_awprot),
+    .s_axi_rdma_completion_awvalid         (axi_rdma_completion_awvalid),
+    .s_axi_rdma_completion_awready         (axi_rdma_completion_awready),
+    .s_axi_rdma_completion_wdata           (axi_rdma_completion_wdata),
+    .s_axi_rdma_completion_wstrb           (axi_rdma_completion_wstrb),
+    .s_axi_rdma_completion_wlast           (axi_rdma_completion_wlast),
+    .s_axi_rdma_completion_wvalid          (axi_rdma_completion_wvalid),
+    .s_axi_rdma_completion_wready          (axi_rdma_completion_wready),
+    .s_axi_rdma_completion_awlock          (axi_rdma_completion_awlock),
+    .s_axi_rdma_completion_bid             (axi_rdma_completion_bid),
+    .s_axi_rdma_completion_bresp           (axi_rdma_completion_bresp),
+    .s_axi_rdma_completion_bvalid          (axi_rdma_completion_bvalid),
+    .s_axi_rdma_completion_bready          (axi_rdma_completion_bready),
+    .s_axi_rdma_completion_arid            (axi_rdma_completion_arid),
+    .s_axi_rdma_completion_araddr          (axi_rdma_completion_araddr),
+    .s_axi_rdma_completion_arlen           (axi_rdma_completion_arlen),
+    .s_axi_rdma_completion_arsize          (axi_rdma_completion_arsize),
+    .s_axi_rdma_completion_arburst         (axi_rdma_completion_arburst),
+    .s_axi_rdma_completion_arcache         (axi_rdma_completion_arcache),
+    .s_axi_rdma_completion_arprot          (axi_rdma_completion_arprot),
+    .s_axi_rdma_completion_arvalid         (axi_rdma_completion_arvalid),
+    .s_axi_rdma_completion_arready         (axi_rdma_completion_arready),
+    .s_axi_rdma_completion_rid             (axi_rdma_completion_rid),
+    .s_axi_rdma_completion_rdata           (axi_rdma_completion_rdata),
+    .s_axi_rdma_completion_rresp           (axi_rdma_completion_rresp),
+    .s_axi_rdma_completion_rlast           (axi_rdma_completion_rlast),
+    .s_axi_rdma_completion_rvalid          (axi_rdma_completion_rvalid),
+    .s_axi_rdma_completion_rready          (axi_rdma_completion_rready),
+    .s_axi_rdma_completion_arlock          (axi_rdma_completion_arlock),
+    .s_axi_rdma_completion_arqos           (axi_rdma_completion_arqos),
+
+    .s_axi_rdma_send_write_payload_awid    (axi_rdma_send_write_payload_awid),
+    .s_axi_rdma_send_write_payload_awaddr  (axi_rdma_send_write_payload_awaddr),
+    .s_axi_rdma_send_write_payload_awqos   (axi_rdma_send_write_payload_awqos),
+    .s_axi_rdma_send_write_payload_awlen   (axi_rdma_send_write_payload_awlen),
+    .s_axi_rdma_send_write_payload_awsize  (axi_rdma_send_write_payload_awsize),
+    .s_axi_rdma_send_write_payload_awburst (axi_rdma_send_write_payload_awburst),
+    .s_axi_rdma_send_write_payload_awcache (axi_rdma_send_write_payload_awcache),
+    .s_axi_rdma_send_write_payload_awprot  (axi_rdma_send_write_payload_awprot),
+    .s_axi_rdma_send_write_payload_awvalid (axi_rdma_send_write_payload_awvalid),
+    .s_axi_rdma_send_write_payload_awready (axi_rdma_send_write_payload_awready),
+    .s_axi_rdma_send_write_payload_wdata   (axi_rdma_send_write_payload_wdata),
+    .s_axi_rdma_send_write_payload_wstrb   (axi_rdma_send_write_payload_wstrb),
+    .s_axi_rdma_send_write_payload_wlast   (axi_rdma_send_write_payload_wlast),
+    .s_axi_rdma_send_write_payload_wvalid  (axi_rdma_send_write_payload_wvalid),
+    .s_axi_rdma_send_write_payload_wready  (axi_rdma_send_write_payload_wready),
+    .s_axi_rdma_send_write_payload_awlock  (axi_rdma_send_write_payload_awlock),
+    .s_axi_rdma_send_write_payload_bid     (axi_rdma_send_write_payload_bid),
+    .s_axi_rdma_send_write_payload_bresp   (axi_rdma_send_write_payload_bresp),
+    .s_axi_rdma_send_write_payload_bvalid  (axi_rdma_send_write_payload_bvalid),
+    .s_axi_rdma_send_write_payload_bready  (axi_rdma_send_write_payload_bready),
+    .s_axi_rdma_send_write_payload_arid    (axi_rdma_send_write_payload_arid),
+    .s_axi_rdma_send_write_payload_araddr  (axi_rdma_send_write_payload_araddr),
+    .s_axi_rdma_send_write_payload_arlen   (axi_rdma_send_write_payload_arlen),
+    .s_axi_rdma_send_write_payload_arsize  (axi_rdma_send_write_payload_arsize),
+    .s_axi_rdma_send_write_payload_arburst (axi_rdma_send_write_payload_arburst),
+    .s_axi_rdma_send_write_payload_arcache (axi_rdma_send_write_payload_arcache),
+    .s_axi_rdma_send_write_payload_arprot  (axi_rdma_send_write_payload_arprot),
+    .s_axi_rdma_send_write_payload_arvalid (axi_rdma_send_write_payload_arvalid),
+    .s_axi_rdma_send_write_payload_arready (axi_rdma_send_write_payload_arready),
+    .s_axi_rdma_send_write_payload_rid     (axi_rdma_send_write_payload_rid),
+    .s_axi_rdma_send_write_payload_rdata   (axi_rdma_send_write_payload_rdata),
+    .s_axi_rdma_send_write_payload_rresp   (axi_rdma_send_write_payload_rresp),
+    .s_axi_rdma_send_write_payload_rlast   (axi_rdma_send_write_payload_rlast),
+    .s_axi_rdma_send_write_payload_rvalid  (axi_rdma_send_write_payload_rvalid),
+    .s_axi_rdma_send_write_payload_rready  (axi_rdma_send_write_payload_rready),
+    .s_axi_rdma_send_write_payload_arlock  (axi_rdma_send_write_payload_arlock),
+    .s_axi_rdma_send_write_payload_arqos   (axi_rdma_send_write_payload_arqos),
+
+    .s_axi_rdma_rsp_payload_awid           (axi_rdma_rsp_payload_awid),
+    .s_axi_rdma_rsp_payload_awaddr         (axi_rdma_rsp_payload_awaddr),
+    .s_axi_rdma_rsp_payload_awqos          (axi_rdma_rsp_payload_awqos),
+    .s_axi_rdma_rsp_payload_awlen          (axi_rdma_rsp_payload_awlen),
+    .s_axi_rdma_rsp_payload_awsize         (axi_rdma_rsp_payload_awsize),
+    .s_axi_rdma_rsp_payload_awburst        (axi_rdma_rsp_payload_awburst),
+    .s_axi_rdma_rsp_payload_awcache        (axi_rdma_rsp_payload_awcache),
+    .s_axi_rdma_rsp_payload_awprot         (axi_rdma_rsp_payload_awprot),
+    .s_axi_rdma_rsp_payload_awvalid        (axi_rdma_rsp_payload_awvalid),
+    .s_axi_rdma_rsp_payload_awready        (axi_rdma_rsp_payload_awready),
+    .s_axi_rdma_rsp_payload_wdata          (axi_rdma_rsp_payload_wdata),
+    .s_axi_rdma_rsp_payload_wstrb          (axi_rdma_rsp_payload_wstrb),
+    .s_axi_rdma_rsp_payload_wlast          (axi_rdma_rsp_payload_wlast),
+    .s_axi_rdma_rsp_payload_wvalid         (axi_rdma_rsp_payload_wvalid),
+    .s_axi_rdma_rsp_payload_wready         (axi_rdma_rsp_payload_wready),
+    .s_axi_rdma_rsp_payload_awlock         (axi_rdma_rsp_payload_awlock),
+    .s_axi_rdma_rsp_payload_bid            (axi_rdma_rsp_payload_bid),
+    .s_axi_rdma_rsp_payload_bresp          (axi_rdma_rsp_payload_bresp),
+    .s_axi_rdma_rsp_payload_bvalid         (axi_rdma_rsp_payload_bvalid),
+    .s_axi_rdma_rsp_payload_bready         (axi_rdma_rsp_payload_bready),
+    .s_axi_rdma_rsp_payload_arid           (axi_rdma_rsp_payload_arid),
+    .s_axi_rdma_rsp_payload_araddr         (axi_rdma_rsp_payload_araddr),
+    .s_axi_rdma_rsp_payload_arlen          (axi_rdma_rsp_payload_arlen),
+    .s_axi_rdma_rsp_payload_arsize         (axi_rdma_rsp_payload_arsize),
+    .s_axi_rdma_rsp_payload_arburst        (axi_rdma_rsp_payload_arburst),
+    .s_axi_rdma_rsp_payload_arcache        (axi_rdma_rsp_payload_arcache),
+    .s_axi_rdma_rsp_payload_arprot         (axi_rdma_rsp_payload_arprot),
+    .s_axi_rdma_rsp_payload_arvalid        (axi_rdma_rsp_payload_arvalid),
+    .s_axi_rdma_rsp_payload_arready        (axi_rdma_rsp_payload_arready),
+    .s_axi_rdma_rsp_payload_rid            (axi_rdma_rsp_payload_rid),
+    .s_axi_rdma_rsp_payload_rdata          (axi_rdma_rsp_payload_rdata),
+    .s_axi_rdma_rsp_payload_rresp          (axi_rdma_rsp_payload_rresp),
+    .s_axi_rdma_rsp_payload_rlast          (axi_rdma_rsp_payload_rlast),
+    .s_axi_rdma_rsp_payload_rvalid         (axi_rdma_rsp_payload_rvalid),
+    .s_axi_rdma_rsp_payload_rready         (axi_rdma_rsp_payload_rready),
+    .s_axi_rdma_rsp_payload_arlock         (axi_rdma_rsp_payload_arlock),
+    .s_axi_rdma_rsp_payload_arqos          (axi_rdma_rsp_payload_arqos),
+
+    .s_axi_hw_hndshk_awid                  (axi_hw_hndshk_awid),
+    .s_axi_hw_hndshk_awaddr                (axi_hw_hndshk_awaddr),
+    .s_axi_hw_hndshk_awqos                 (axi_hw_hndshk_awqos),
+    .s_axi_hw_hndshk_awlen                 (axi_hw_hndshk_awlen),
+    .s_axi_hw_hndshk_awsize                (axi_hw_hndshk_awsize),
+    .s_axi_hw_hndshk_awburst               (axi_hw_hndshk_awburst),
+    .s_axi_hw_hndshk_awcache               (axi_hw_hndshk_awcache),
+    .s_axi_hw_hndshk_awprot                (axi_hw_hndshk_awprot),
+    .s_axi_hw_hndshk_awvalid               (axi_hw_hndshk_awvalid),
+    .s_axi_hw_hndshk_awready               (axi_hw_hndshk_awready),
+    .s_axi_hw_hndshk_wdata                 (axi_hw_hndshk_wdata),
+    .s_axi_hw_hndshk_wstrb                 (axi_hw_hndshk_wstrb),
+    .s_axi_hw_hndshk_wlast                 (axi_hw_hndshk_wlast),
+    .s_axi_hw_hndshk_wvalid                (axi_hw_hndshk_wvalid),
+    .s_axi_hw_hndshk_wready                (axi_hw_hndshk_wready),
+    .s_axi_hw_hndshk_awlock                (axi_hw_hndshk_awlock),
+    .s_axi_hw_hndshk_bid                   (axi_hw_hndshk_bid),
+    .s_axi_hw_hndshk_bresp                 (axi_hw_hndshk_bresp),
+    .s_axi_hw_hndshk_bvalid                (axi_hw_hndshk_bvalid),
+    .s_axi_hw_hndshk_bready                (axi_hw_hndshk_bready),
+    .s_axi_hw_hndshk_arid                  (axi_hw_hndshk_arid),
+    .s_axi_hw_hndshk_araddr                (axi_hw_hndshk_araddr),
+    .s_axi_hw_hndshk_arlen                 (axi_hw_hndshk_arlen),
+    .s_axi_hw_hndshk_arsize                (axi_hw_hndshk_arsize),
+    .s_axi_hw_hndshk_arburst               (axi_hw_hndshk_arburst),
+    .s_axi_hw_hndshk_arcache               (axi_hw_hndshk_arcache),
+    .s_axi_hw_hndshk_arprot                (axi_hw_hndshk_arprot),
+    .s_axi_hw_hndshk_arvalid               (axi_hw_hndshk_arvalid),
+    .s_axi_hw_hndshk_arready               (axi_hw_hndshk_arready),
+    .s_axi_hw_hndshk_rid                   (axi_hw_hndshk_rid),
+    .s_axi_hw_hndshk_rdata                 (axi_hw_hndshk_rdata),
+    .s_axi_hw_hndshk_rresp                 (axi_hw_hndshk_rresp),
+    .s_axi_hw_hndshk_rlast                 (axi_hw_hndshk_rlast),
+    .s_axi_hw_hndshk_rvalid                (axi_hw_hndshk_rvalid),
+    .s_axi_hw_hndshk_rready                (axi_hw_hndshk_rready),
+    .s_axi_hw_hndshk_arlock                (axi_hw_hndshk_arlock),
+    .s_axi_hw_hndshk_arqos                 (axi_hw_hndshk_arqos),
+
+    .s_axi_payload_to_retry_buf_awid       (axi_payload_to_retry_buf_awid),
+    .s_axi_payload_to_retry_buf_awaddr     (axi_payload_to_retry_buf_awaddr),
+    .s_axi_payload_to_retry_buf_awlen      (axi_payload_to_retry_buf_awlen),
+    .s_axi_payload_to_retry_buf_awsize     (axi_payload_to_retry_buf_awsize),
+    .s_axi_payload_to_retry_buf_awburst    (axi_payload_to_retry_buf_awburst),
+    .s_axi_payload_to_retry_buf_awcache    (axi_payload_to_retry_buf_awcache),
+    .s_axi_payload_to_retry_buf_awprot     (axi_payload_to_retry_buf_awprot),
+    .s_axi_payload_to_retry_buf_awvalid    (axi_payload_to_retry_buf_awvalid),
+    .s_axi_payload_to_retry_buf_awready    (axi_payload_to_retry_buf_awready),
+    .s_axi_payload_to_retry_buf_wdata      (axi_payload_to_retry_buf_wdata),
+    .s_axi_payload_to_retry_buf_wstrb      (axi_payload_to_retry_buf_wstrb),
+    .s_axi_payload_to_retry_buf_wlast      (axi_payload_to_retry_buf_wlast),
+    .s_axi_payload_to_retry_buf_wvalid     (axi_payload_to_retry_buf_wvalid),
+    .s_axi_payload_to_retry_buf_wready     (axi_payload_to_retry_buf_wready),
+    .s_axi_payload_to_retry_buf_awlock     (axi_payload_to_retry_buf_awlock),
+    .s_axi_payload_to_retry_buf_bid        (axi_payload_to_retry_buf_bid),
+    .s_axi_payload_to_retry_buf_bresp      (axi_payload_to_retry_buf_bresp),
+    .s_axi_payload_to_retry_buf_bvalid     (axi_payload_to_retry_buf_bvalid),
+    .s_axi_payload_to_retry_buf_bready     (axi_payload_to_retry_buf_bready),
+    .s_axi_payload_to_retry_buf_arid       (axi_payload_to_retry_buf_arid),
+    .s_axi_payload_to_retry_buf_araddr     (axi_payload_to_retry_buf_araddr),
+    .s_axi_payload_to_retry_buf_arlen      (axi_payload_to_retry_buf_arlen),
+    .s_axi_payload_to_retry_buf_arsize     (axi_payload_to_retry_buf_arsize),
+    .s_axi_payload_to_retry_buf_arburst    (axi_payload_to_retry_buf_arburst),
+    .s_axi_payload_to_retry_buf_arcache    (axi_payload_to_retry_buf_arcache),
+    .s_axi_payload_to_retry_buf_arprot     (axi_payload_to_retry_buf_arprot),
+    .s_axi_payload_to_retry_buf_arvalid    (axi_payload_to_retry_buf_arvalid),
+    .s_axi_payload_to_retry_buf_arready    (axi_payload_to_retry_buf_arready),
+    .s_axi_payload_to_retry_buf_rid        (axi_payload_to_retry_buf_rid),
+    .s_axi_payload_to_retry_buf_rdata      (axi_payload_to_retry_buf_rdata),
+    .s_axi_payload_to_retry_buf_rresp      (axi_payload_to_retry_buf_rresp),
+    .s_axi_payload_to_retry_buf_rlast      (axi_payload_to_retry_buf_rlast),
+    .s_axi_payload_to_retry_buf_rvalid     (axi_payload_to_retry_buf_rvalid),
+    .s_axi_payload_to_retry_buf_rready     (axi_payload_to_retry_buf_rready),
+    .s_axi_payload_to_retry_buf_arlock     (axi_payload_to_retry_buf_arlock),
+
+    .m_axi_sys_mem_awaddr                  (axi_sys_mem_awaddr),
+    .m_axi_sys_mem_awprot                  (axi_sys_mem_awprot),
+    .m_axi_sys_mem_awvalid                 (axi_sys_mem_awvalid),
+    .m_axi_sys_mem_awready                 (axi_sys_mem_awready),
+    .m_axi_sys_mem_awsize                  (axi_sys_mem_awsize),
+    .m_axi_sys_mem_awburst                 (axi_sys_mem_awburst),
+    .m_axi_sys_mem_awcache                 (axi_sys_mem_awcache),
+    .m_axi_sys_mem_awlen                   (axi_sys_mem_awlen),
+    .m_axi_sys_mem_awlock                  (axi_sys_mem_awlock),
+    .m_axi_sys_mem_awqos                   (axi_sys_mem_awqos),
+    .m_axi_sys_mem_awregion                (axi_sys_mem_awregion),
+    .m_axi_sys_mem_awid                    (axi_sys_mem_awid),
+    .m_axi_sys_mem_wdata                   (axi_sys_mem_wdata),
+    .m_axi_sys_mem_wstrb                   (axi_sys_mem_wstrb),
+    .m_axi_sys_mem_wvalid                  (axi_sys_mem_wvalid),
+    .m_axi_sys_mem_wready                  (axi_sys_mem_wready),
+    .m_axi_sys_mem_wlast                   (axi_sys_mem_wlast),
+    .m_axi_sys_mem_bresp                   (axi_sys_mem_bresp),
+    .m_axi_sys_mem_bvalid                  (axi_sys_mem_bvalid),
+    .m_axi_sys_mem_bready                  (axi_sys_mem_bready),
+    .m_axi_sys_mem_bid                     (axi_sys_mem_bid[2:0]),
+    .m_axi_sys_mem_araddr                  (axi_sys_mem_araddr),
+    .m_axi_sys_mem_arprot                  (axi_sys_mem_arprot),
+    .m_axi_sys_mem_arvalid                 (axi_sys_mem_arvalid),
+    .m_axi_sys_mem_arready                 (axi_sys_mem_arready),
+    .m_axi_sys_mem_arsize                  (axi_sys_mem_arsize),
+    .m_axi_sys_mem_arburst                 (axi_sys_mem_arburst),
+    .m_axi_sys_mem_arcache                 (axi_sys_mem_arcache),
+    .m_axi_sys_mem_arlock                  (axi_sys_mem_arlock),
+    .m_axi_sys_mem_arlen                   (axi_sys_mem_arlen),
+    .m_axi_sys_mem_arqos                   (axi_sys_mem_arqos),
+    .m_axi_sys_mem_arregion                (axi_sys_mem_arregion),
+    .m_axi_sys_mem_arid                    (axi_sys_mem_arid),
+    .m_axi_sys_mem_rdata                   (axi_sys_mem_rdata),
+    .m_axi_sys_mem_rresp                   (axi_sys_mem_rresp),
+    .m_axi_sys_mem_rvalid                  (axi_sys_mem_rvalid),
+    .m_axi_sys_mem_rready                  (axi_sys_mem_rready),
+    .m_axi_sys_mem_rlast                   (axi_sys_mem_rlast),
+    .m_axi_sys_mem_rid                     (axi_sys_mem_rid[2:0]),
+
+    .m_axi_sys_to_dev_crossbar_awaddr      (axi_from_sys_to_dev_crossbar_awaddr),
+    .m_axi_sys_to_dev_crossbar_awprot      (axi_from_sys_to_dev_crossbar_awprot),
+    .m_axi_sys_to_dev_crossbar_awvalid     (axi_from_sys_to_dev_crossbar_awvalid),
+    .m_axi_sys_to_dev_crossbar_awready     (axi_from_sys_to_dev_crossbar_awready),
+    .m_axi_sys_to_dev_crossbar_awsize      (axi_from_sys_to_dev_crossbar_awsize),
+    .m_axi_sys_to_dev_crossbar_awburst     (axi_from_sys_to_dev_crossbar_awburst),
+    .m_axi_sys_to_dev_crossbar_awcache     (axi_from_sys_to_dev_crossbar_awcache),
+    .m_axi_sys_to_dev_crossbar_awlen       (axi_from_sys_to_dev_crossbar_awlen),
+    .m_axi_sys_to_dev_crossbar_awlock      (axi_from_sys_to_dev_crossbar_awlock),
+    .m_axi_sys_to_dev_crossbar_awqos       (axi_from_sys_to_dev_crossbar_awqos),
+    .m_axi_sys_to_dev_crossbar_awregion    (axi_from_sys_to_dev_crossbar_awregion),
+    .m_axi_sys_to_dev_crossbar_awid        (axi_from_sys_to_dev_crossbar_awid),
+    .m_axi_sys_to_dev_crossbar_wdata       (axi_from_sys_to_dev_crossbar_wdata),
+    .m_axi_sys_to_dev_crossbar_wstrb       (axi_from_sys_to_dev_crossbar_wstrb),
+    .m_axi_sys_to_dev_crossbar_wvalid      (axi_from_sys_to_dev_crossbar_wvalid),
+    .m_axi_sys_to_dev_crossbar_wready      (axi_from_sys_to_dev_crossbar_wready),
+    .m_axi_sys_to_dev_crossbar_wlast       (axi_from_sys_to_dev_crossbar_wlast),
+    .m_axi_sys_to_dev_crossbar_bresp       (axi_from_sys_to_dev_crossbar_bresp),
+    .m_axi_sys_to_dev_crossbar_bvalid      (axi_from_sys_to_dev_crossbar_bvalid),
+    .m_axi_sys_to_dev_crossbar_bready      (axi_from_sys_to_dev_crossbar_bready),
+    .m_axi_sys_to_dev_crossbar_bid         (axi_from_sys_to_dev_crossbar_bid[2:0]),
+    .m_axi_sys_to_dev_crossbar_araddr      (axi_from_sys_to_dev_crossbar_araddr),
+    .m_axi_sys_to_dev_crossbar_arprot      (axi_from_sys_to_dev_crossbar_arprot),
+    .m_axi_sys_to_dev_crossbar_arvalid     (axi_from_sys_to_dev_crossbar_arvalid),
+    .m_axi_sys_to_dev_crossbar_arready     (axi_from_sys_to_dev_crossbar_arready),
+    .m_axi_sys_to_dev_crossbar_arsize      (axi_from_sys_to_dev_crossbar_arsize),
+    .m_axi_sys_to_dev_crossbar_arburst     (axi_from_sys_to_dev_crossbar_arburst),
+    .m_axi_sys_to_dev_crossbar_arcache     (axi_from_sys_to_dev_crossbar_arcache),
+    .m_axi_sys_to_dev_crossbar_arlock      (axi_from_sys_to_dev_crossbar_arlock),
+    .m_axi_sys_to_dev_crossbar_arlen       (axi_from_sys_to_dev_crossbar_arlen),
+    .m_axi_sys_to_dev_crossbar_arqos       (axi_from_sys_to_dev_crossbar_arqos),
+    .m_axi_sys_to_dev_crossbar_arregion    (axi_from_sys_to_dev_crossbar_arregion),
+    .m_axi_sys_to_dev_crossbar_arid        (axi_from_sys_to_dev_crossbar_arid),
+    .m_axi_sys_to_dev_crossbar_rdata       (axi_from_sys_to_dev_crossbar_rdata),
+    .m_axi_sys_to_dev_crossbar_rresp       (axi_from_sys_to_dev_crossbar_rresp),
+    .m_axi_sys_to_dev_crossbar_rvalid      (axi_from_sys_to_dev_crossbar_rvalid),
+    .m_axi_sys_to_dev_crossbar_rready      (axi_from_sys_to_dev_crossbar_rready),
+    .m_axi_sys_to_dev_crossbar_rlast       (axi_from_sys_to_dev_crossbar_rlast),
+    .m_axi_sys_to_dev_crossbar_rid         (axi_from_sys_to_dev_crossbar_rid[2:0]),
+
+    .axis_aclk                             (axis_aclk),
+    .axis_arestn                           (qdma_rstn)
+);
+
+  axi_clock_converter_for_ddr  axi_clock_converter_for_ddr_inst (
+    .s_axi_aclk      (axis_aclk),
+    .s_axi_aresetn   (qdma_rstn),
+    .s_axi_awid      (axi_dev_mem_awid),
+    .s_axi_awaddr    (axi_dev_mem_awaddr),
+    .s_axi_awlen     (axi_dev_mem_awlen),
+    .s_axi_awsize    (axi_dev_mem_awsize),
+    .s_axi_awburst   (axi_dev_mem_awburst),
+    .s_axi_awlock    (1'b0),
+    .s_axi_awcache   (4'b0),
+    .s_axi_awprot    (3'b0),
+    .s_axi_awregion  (4'b0),
+    .s_axi_awqos     (4'b0),
+    .s_axi_awvalid   (axi_dev_mem_awvalid),
+    .s_axi_awready   (axi_dev_mem_awready),
+    .s_axi_wdata     (axi_dev_mem_wdata),
+    .s_axi_wstrb     (axi_dev_mem_wstrb),
+    .s_axi_wlast     (axi_dev_mem_wlast),
+    .s_axi_wvalid    (axi_dev_mem_wvalid),
+    .s_axi_wready    (axi_dev_mem_wready),
+    .s_axi_bid       (axi_dev_mem_bid),
+    .s_axi_bresp     (axi_dev_mem_bresp),
+    .s_axi_bvalid    (axi_dev_mem_bvalid),
+    .s_axi_bready    (axi_dev_mem_bready),
+    .s_axi_arid      (axi_dev_mem_arid),
+    .s_axi_araddr    (axi_dev_mem_araddr),
+    .s_axi_arlen     (axi_dev_mem_arlen),
+    .s_axi_arsize    (axi_dev_mem_arsize),
+    .s_axi_arburst   (axi_dev_mem_arburst),
+    .s_axi_arlock    (1'b0),
+    .s_axi_arcache   (4'b0),
+    .s_axi_arprot    (3'b0),
+    .s_axi_arregion  (4'b0),
+    .s_axi_arqos     (4'b0),
+    .s_axi_arvalid   (axi_dev_mem_arvalid),
+    .s_axi_arready   (axi_dev_mem_arready),
+    .s_axi_rid       (axi_dev_mem_rid),
+    .s_axi_rdata     (axi_dev_mem_rdata),
+    .s_axi_rresp     (axi_dev_mem_rresp),
+    .s_axi_rlast     (axi_dev_mem_rlast),
+    .s_axi_rvalid    (axi_dev_mem_rvalid),
+    .s_axi_rready    (axi_dev_mem_rready),
+
+    .m_axi_aclk      (c0_ddr4_ui_clk),
+    .m_axi_aresetn   (~c0_ddr4_ui_clk_sync_rst),
+    .m_axi_awid      (axi_from_clk_converter_to_ddr4_awid),
+    .m_axi_awaddr    (axi_from_clk_converter_to_ddr4_awaddr),
+    .m_axi_awlen     (axi_from_clk_converter_to_ddr4_awlen),
+    .m_axi_awsize    (axi_from_clk_converter_to_ddr4_awsize),
+    .m_axi_awburst   (axi_from_clk_converter_to_ddr4_awburst),
+    .m_axi_awlock    (axi_from_clk_converter_to_ddr4_awlock),
+    .m_axi_awcache   (axi_from_clk_converter_to_ddr4_awcache),
+    .m_axi_awprot    (axi_from_clk_converter_to_ddr4_awprot),
+    .m_axi_awregion  (axi_from_clk_converter_to_ddr4_awregion),
+    .m_axi_awqos     (axi_from_clk_converter_to_ddr4_awqos),
+    .m_axi_awvalid   (axi_from_clk_converter_to_ddr4_awvalid),
+    .m_axi_awready   (axi_from_clk_converter_to_ddr4_awready),
+    .m_axi_wdata     (axi_from_clk_converter_to_ddr4_wdata),
+    .m_axi_wstrb     (axi_from_clk_converter_to_ddr4_wstrb),
+    .m_axi_wlast     (axi_from_clk_converter_to_ddr4_wlast),
+    .m_axi_wvalid    (axi_from_clk_converter_to_ddr4_wvalid),
+    .m_axi_wready    (axi_from_clk_converter_to_ddr4_wready),
+    .m_axi_bid       (axi_from_clk_converter_to_ddr4_bid),
+    .m_axi_bresp     (axi_from_clk_converter_to_ddr4_bresp),
+    .m_axi_bvalid    (axi_from_clk_converter_to_ddr4_bvalid),
+    .m_axi_bready    (axi_from_clk_converter_to_ddr4_bready),
+    .m_axi_arid      (axi_from_clk_converter_to_ddr4_arid),
+    .m_axi_araddr    (axi_from_clk_converter_to_ddr4_araddr),
+    .m_axi_arlen     (axi_from_clk_converter_to_ddr4_arlen),
+    .m_axi_arsize    (axi_from_clk_converter_to_ddr4_arsize),
+    .m_axi_arburst   (axi_from_clk_converter_to_ddr4_arburst),
+    .m_axi_arlock    (axi_from_clk_converter_to_ddr4_arlock),
+    .m_axi_arcache   (axi_from_clk_converter_to_ddr4_arcache),
+    .m_axi_arprot    (axi_from_clk_converter_to_ddr4_arprot),
+    .m_axi_arregion  (axi_from_clk_converter_to_ddr4_arregion),
+    .m_axi_arqos     (axi_from_clk_converter_to_ddr4_arqos),
+    .m_axi_arvalid   (axi_from_clk_converter_to_ddr4_arvalid),
+    .m_axi_arready   (axi_from_clk_converter_to_ddr4_arready),
+    .m_axi_rid       (axi_from_clk_converter_to_ddr4_rid),
+    .m_axi_rdata     (axi_from_clk_converter_to_ddr4_rdata),
+    .m_axi_rresp     (axi_from_clk_converter_to_ddr4_rresp),
+    .m_axi_rlast     (axi_from_clk_converter_to_ddr4_rlast),
+    .m_axi_rvalid    (axi_from_clk_converter_to_ddr4_rvalid),
+    .m_axi_rready    (axi_from_clk_converter_to_ddr4_rready)
+  );
+
+  dev_mem_ddr4_controller  ddr4_inst (
+    .dbg_clk(),
+    .dbg_bus(),
+
+    .sys_rst(~pcie_rstn_int),
+    .c0_sys_clk_p(c0_sys_clk_p),
+    .c0_sys_clk_n(c0_sys_clk_n),
+
+    .c0_init_calib_complete(c0_init_calib_complete),
+
+    .c0_ddr4_ui_clk(c0_ddr4_ui_clk),
+    .c0_ddr4_ui_clk_sync_rst(c0_ddr4_ui_clk_sync_rst),
+
+    .c0_ddr4_aresetn(pcie_rstn_int),
+    .c0_ddr4_adr(c0_ddr4_adr),
+    .c0_ddr4_ba(c0_ddr4_ba),
+    .c0_ddr4_cke(c0_ddr4_cke),
+    .c0_ddr4_cs_n(c0_ddr4_cs_n),
+    .c0_ddr4_dq(c0_ddr4_dq),
+    .c0_ddr4_dqs_c(c0_ddr4_dqs_c),
+    .c0_ddr4_dqs_t(c0_ddr4_dqs_t),
+    .c0_ddr4_bg(c0_ddr4_bg),
+    .c0_ddr4_parity(c0_ddr4_parity),
+    .c0_ddr4_odt(c0_ddr4_odt),
+    .c0_ddr4_reset_n(c0_ddr4_reset_n),
+    .c0_ddr4_act_n(c0_ddr4_act_n),
+    .c0_ddr4_ck_c(c0_ddr4_ck_c),
+    .c0_ddr4_ck_t(c0_ddr4_ck_t),
+
+    .c0_ddr4_s_axi_ctrl_wdata(32'b0),
+    .c0_ddr4_s_axi_ctrl_bready(1'b0),
+    .c0_ddr4_s_axi_ctrl_arvalid(1'b0),
+    .c0_ddr4_s_axi_ctrl_araddr(32'b0),
+    .c0_ddr4_s_axi_ctrl_rready(1'b0),
+    .c0_ddr4_s_axi_ctrl_wvalid(1'b0),
+    .c0_ddr4_s_axi_ctrl_awvalid(1'b0),
+    .c0_ddr4_s_axi_ctrl_awaddr(32'b0),
+
+    .c0_ddr4_s_axi_awid(axi_from_clk_converter_to_ddr4_awid),
+    .c0_ddr4_s_axi_awaddr(axi_from_clk_converter_to_ddr4_awaddr),
+    .c0_ddr4_s_axi_awlen(axi_from_clk_converter_to_ddr4_awlen),
+    .c0_ddr4_s_axi_awsize(axi_from_clk_converter_to_ddr4_awsize),
+    .c0_ddr4_s_axi_awburst(axi_from_clk_converter_to_ddr4_awburst),
+    .c0_ddr4_s_axi_awlock(1'b0),
+    .c0_ddr4_s_axi_awcache(4'b0),
+    .c0_ddr4_s_axi_awprot(3'b0),
+    .c0_ddr4_s_axi_awqos(4'b0),
+    .c0_ddr4_s_axi_awvalid(axi_from_clk_converter_to_ddr4_awvalid),
+    .c0_ddr4_s_axi_awready(axi_from_clk_converter_to_ddr4_awready),
+    .c0_ddr4_s_axi_wdata(axi_from_clk_converter_to_ddr4_wdata),
+    .c0_ddr4_s_axi_wstrb(axi_from_clk_converter_to_ddr4_wstrb),
+    .c0_ddr4_s_axi_wlast(axi_from_clk_converter_to_ddr4_wlast),
+    .c0_ddr4_s_axi_wvalid(axi_from_clk_converter_to_ddr4_wvalid),
+    .c0_ddr4_s_axi_wready(axi_from_clk_converter_to_ddr4_wready),
+    .c0_ddr4_s_axi_bready(axi_from_clk_converter_to_ddr4_bready),
+    .c0_ddr4_s_axi_bid(axi_from_clk_converter_to_ddr4_bid),
+    .c0_ddr4_s_axi_bresp(axi_from_clk_converter_to_ddr4_bresp),
+    .c0_ddr4_s_axi_bvalid(axi_from_clk_converter_to_ddr4_bvalid),
+    .c0_ddr4_s_axi_arid(axi_from_clk_converter_to_ddr4_arid),
+    .c0_ddr4_s_axi_araddr(axi_from_clk_converter_to_ddr4_araddr),
+    .c0_ddr4_s_axi_arlen(axi_from_clk_converter_to_ddr4_arlen),
+    .c0_ddr4_s_axi_arsize(axi_from_clk_converter_to_ddr4_arsize),
+    .c0_ddr4_s_axi_arburst(axi_from_clk_converter_to_ddr4_arburst),
+    .c0_ddr4_s_axi_arlock(1'b0),
+    .c0_ddr4_s_axi_arcache(4'b0),
+    .c0_ddr4_s_axi_arprot(3'b0),
+    .c0_ddr4_s_axi_arqos(4'b0),
+    .c0_ddr4_s_axi_arvalid(axi_from_clk_converter_to_ddr4_arvalid),
+    .c0_ddr4_s_axi_arready(axi_from_clk_converter_to_ddr4_arready),
+    .c0_ddr4_s_axi_rready(axi_from_clk_converter_to_ddr4_rready),
+    .c0_ddr4_s_axi_rlast(axi_from_clk_converter_to_ddr4_rlast),
+    .c0_ddr4_s_axi_rvalid(axi_from_clk_converter_to_ddr4_rvalid),
+    .c0_ddr4_s_axi_rresp(axi_from_clk_converter_to_ddr4_rresp),
+    .c0_ddr4_s_axi_rid(axi_from_clk_converter_to_ddr4_rid),
+    .c0_ddr4_s_axi_rdata(axi_from_clk_converter_to_ddr4_rdata)
+  );
+
+  // User logic boxes
   box_250mhz #(
     .MIN_PKT_LEN   (MIN_PKT_LEN),
     .MAX_PKT_LEN   (MAX_PKT_LEN),
@@ -846,14 +2533,103 @@ module open_nic_shell #(
     .s_axis_adap_rx_250mhz_tuser_dst  (axis_adap_rx_250mhz_tuser_dst),
     .s_axis_adap_rx_250mhz_tready     (axis_adap_rx_250mhz_tready),
 
-    .mod_rstn                         (user_250mhz_rstn),
-    .mod_rst_done                     (user_250mhz_rst_done),
-
-    .box_rstn                         (box_250mhz_rstn),
-    .box_rst_done                     (box_250mhz_rst_done),
-
-    .axil_aclk                        (axil_aclk),
-    .axis_aclk                        (axis_aclk)
+    // RoCEv2 packets from user logic box to rdma
+    .m_axis_user2rdma_roce_from_cmac_rx_tvalid (cmac2rdma_roce_axis_tvalid),
+    .m_axis_user2rdma_roce_from_cmac_rx_tdata  (cmac2rdma_roce_axis_tdata),
+    .m_axis_user2rdma_roce_from_cmac_rx_tkeep  (cmac2rdma_roce_axis_tkeep),
+    .m_axis_user2rdma_roce_from_cmac_rx_tlast  (cmac2rdma_roce_axis_tlast),
+    .m_axis_user2rdma_roce_from_cmac_rx_tready (cmac2rdma_roce_axis_tready),
+
+    // packets from rdma to user logic
+    .s_axis_rdma2user_to_cmac_tx_tvalid        (rdma2cmac_axis_tvalid),
+    .s_axis_rdma2user_to_cmac_tx_tdata         (rdma2cmac_axis_tdata),
+    .s_axis_rdma2user_to_cmac_tx_tkeep         (rdma2cmac_axis_tkeep),
+    .s_axis_rdma2user_to_cmac_tx_tlast         (rdma2cmac_axis_tlast),
+    .s_axis_rdma2user_to_cmac_tx_tready        (rdma2cmac_axis_tready),
+
+    // packets from user logic to rdma
+    .m_axis_user2rdma_from_qdma_tx_tvalid      (qdma2rdma_non_roce_axis_tvalid),
+    .m_axis_user2rdma_from_qdma_tx_tdata       (qdma2rdma_non_roce_axis_tdata),
+    .m_axis_user2rdma_from_qdma_tx_tkeep       (qdma2rdma_non_roce_axis_tkeep),
+    .m_axis_user2rdma_from_qdma_tx_tlast       (qdma2rdma_non_roce_axis_tlast),
+    .m_axis_user2rdma_from_qdma_tx_tready      (qdma2rdma_non_roce_axis_tready),
+
+    // ieth or immdt data from rdma packets
+    .s_axis_rdma2user_ieth_immdt_tdata         (rdma2user_ieth_immdt_axis_tdata),
+    .s_axis_rdma2user_ieth_immdt_tlast         (rdma2user_ieth_immdt_axis_tlast),
+    .s_axis_rdma2user_ieth_immdt_tvalid        (rdma2user_ieth_immdt_axis_tvalid),
+    .s_axis_rdma2user_ieth_immdt_trdy          (rdma2user_ieth_immdt_axis_trdy),
+
+    // HW handshaking from user logic: Send WQE completion queue doorbell
+    .s_resp_hndler_i_send_cq_db_cnt_valid(resp_hndler_o_send_cq_db_cnt_valid),
+    .s_resp_hndler_i_send_cq_db_addr     (resp_hndler_o_send_cq_db_addr),
+    .s_resp_hndler_i_send_cq_db_cnt      (resp_hndler_o_send_cq_db_cnt),
+    .s_resp_hndler_o_send_cq_db_rdy      (resp_hndler_i_send_cq_db_rdy),
+
+    // HW handshaking from user logic: Send WQE producer index doorbell
+    .m_o_qp_sq_pidb_hndshk               (i_qp_sq_pidb_hndshk),
+    .m_o_qp_sq_pidb_wr_addr_hndshk       (i_qp_sq_pidb_wr_addr_hndshk),
+    .m_o_qp_sq_pidb_wr_valid_hndshk      (i_qp_sq_pidb_wr_valid_hndshk),
+    .m_i_qp_sq_pidb_wr_rdy               (o_qp_sq_pidb_wr_rdy),
+
+    // HW handshaking from user logic: RDMA-Send consumer index doorbell
+    .m_o_qp_rq_cidb_hndshk               (i_qp_rq_cidb_hndshk),
+    .m_o_qp_rq_cidb_wr_addr_hndshk       (i_qp_rq_cidb_wr_addr_hndshk),
+    .m_o_qp_rq_cidb_wr_valid_hndshk      (i_qp_rq_cidb_wr_valid_hndshk),
+    .m_i_qp_rq_cidb_wr_rdy               (o_qp_rq_cidb_wr_rdy),
+
+    // HW handshaking from user logic: RDMA-Send producer index doorbell
+    .s_rx_pkt_hndler_i_rq_db_data        (rx_pkt_hndler_o_rq_db_data),
+    .s_rx_pkt_hndler_i_rq_db_addr        (rx_pkt_hndler_o_rq_db_addr),
+    .s_rx_pkt_hndler_i_rq_db_data_valid  (rx_pkt_hndler_o_rq_db_data_valid),
+    .s_rx_pkt_hndler_o_rq_db_rdy         (rx_pkt_hndler_i_rq_db_rdy),
+
+    .m_axi_hw_hndshk_to_sys_mem_awid     (axi_hw_hndshk_awid),
+    .m_axi_hw_hndshk_to_sys_mem_awaddr   (axi_hw_hndshk_awaddr),
+    .m_axi_hw_hndshk_to_sys_mem_awqos    (axi_hw_hndshk_awqos),
+    .m_axi_hw_hndshk_to_sys_mem_awlen    (axi_hw_hndshk_awlen),
+    .m_axi_hw_hndshk_to_sys_mem_awsize   (axi_hw_hndshk_awsize),
+    .m_axi_hw_hndshk_to_sys_mem_awburst  (axi_hw_hndshk_awburst),
+    .m_axi_hw_hndshk_to_sys_mem_awcache  (axi_hw_hndshk_awcache),
+    .m_axi_hw_hndshk_to_sys_mem_awprot   (axi_hw_hndshk_awprot),
+    .m_axi_hw_hndshk_to_sys_mem_awvalid  (axi_hw_hndshk_awvalid),
+    .m_axi_hw_hndshk_to_sys_mem_awready  (axi_hw_hndshk_awready),
+    .m_axi_hw_hndshk_to_sys_mem_wdata    (axi_hw_hndshk_wdata),
+    .m_axi_hw_hndshk_to_sys_mem_wstrb    (axi_hw_hndshk_wstrb),
+    .m_axi_hw_hndshk_to_sys_mem_wlast    (axi_hw_hndshk_wlast),
+    .m_axi_hw_hndshk_to_sys_mem_wvalid   (axi_hw_hndshk_wvalid),
+    .m_axi_hw_hndshk_to_sys_mem_wready   (axi_hw_hndshk_wready),
+    .m_axi_hw_hndshk_to_sys_mem_awlock   (axi_hw_hndshk_awlock),
+    .m_axi_hw_hndshk_to_sys_mem_bid      (axi_hw_hndshk_bid),
+    .m_axi_hw_hndshk_to_sys_mem_bresp    (axi_hw_hndshk_bresp),
+    .m_axi_hw_hndshk_to_sys_mem_bvalid   (axi_hw_hndshk_bvalid),
+    .m_axi_hw_hndshk_to_sys_mem_bready   (axi_hw_hndshk_bready),
+    .m_axi_hw_hndshk_to_sys_mem_arid     (axi_hw_hndshk_arid),
+    .m_axi_hw_hndshk_to_sys_mem_araddr   (axi_hw_hndshk_araddr),
+    .m_axi_hw_hndshk_to_sys_mem_arlen    (axi_hw_hndshk_arlen),
+    .m_axi_hw_hndshk_to_sys_mem_arsize   (axi_hw_hndshk_arsize),
+    .m_axi_hw_hndshk_to_sys_mem_arburst  (axi_hw_hndshk_arburst),
+    .m_axi_hw_hndshk_to_sys_mem_arcache  (axi_hw_hndshk_arcache),
+    .m_axi_hw_hndshk_to_sys_mem_arprot   (axi_hw_hndshk_arprot),
+    .m_axi_hw_hndshk_to_sys_mem_arvalid  (axi_hw_hndshk_arvalid),
+    .m_axi_hw_hndshk_to_sys_mem_arready  (axi_hw_hndshk_arready),
+    .m_axi_hw_hndshk_to_sys_mem_rid      (axi_hw_hndshk_rid),
+    .m_axi_hw_hndshk_to_sys_mem_rdata    (axi_hw_hndshk_rdata),
+    .m_axi_hw_hndshk_to_sys_mem_rresp    (axi_hw_hndshk_rresp),
+    .m_axi_hw_hndshk_to_sys_mem_rlast    (axi_hw_hndshk_rlast),
+    .m_axi_hw_hndshk_to_sys_mem_rvalid   (axi_hw_hndshk_rvalid),
+    .m_axi_hw_hndshk_to_sys_mem_rready   (axi_hw_hndshk_rready),
+    .m_axi_hw_hndshk_to_sys_mem_arlock   (axi_hw_hndshk_arlock),
+    .m_axi_hw_hndshk_to_sys_mem_arqos    (axi_hw_hndshk_arqos),
+
+    .mod_rstn     (user_250mhz_rstn),
+    .mod_rst_done (user_250mhz_rst_done),
+
+    .box_rstn     (box_250mhz_rstn),
+    .box_rst_done (box_250mhz_rst_done),
+
+    .axil_aclk    (axil_aclk),
+    .axis_aclk    (axis_aclk)
   );
 
   box_322mhz #(
@@ -914,4 +2690,54 @@ module open_nic_shell #(
     .cmac_clk                        (cmac_clk)
   );
 
-endmodule: open_nic_shell
+  always_ff @(posedge axil_aclk)
+  begin
+    if(~rdma_rstn)
+    begin
+      axil_rdma_SQPI_wr <= 1'b0;
+      axil_rdma_CQHEAD_rd <= 1'b0;
+    end
+
+    else
+    begin
+      if((axil_rdma_awaddr == 32'h00020338) && (axil_rdma_awvalid == 1'b1)) 
+        begin
+          axil_rdma_SQPI_wr <= 1'b1;
+        end
+      else
+        begin
+          axil_rdma_SQPI_wr <= 1'b0;
+        end
+      if((axil_rdma_araddr == 32'h00020330) && (axil_rdma_arvalid == 1'b1)) 
+        begin
+          axil_rdma_CQHEAD_rd <= 1'b1;
+        end
+      else
+        begin
+          axil_rdma_CQHEAD_rd <= 1'b0;
+        end
+    end
+  end
+
+  assign axi_rdma_send_write_payload_awqos = 16'd0;
+  assign axi_rdma_send_write_payload_arqos = 16'd0;
+  assign axi_rdma_rsp_payload_awqos = 4'd0;
+  assign axi_rdma_rsp_payload_arqos = 4'd0;
+  assign axi_qdma_mm_awqos  = 4'd0;
+  assign axi_qdma_mm_arqos  = 4'd0;
+
+  assign axi_rdma_get_wqe_awqos     = 4'd0;
+  assign axi_rdma_get_wqe_arqos     = 4'd0;
+  assign axi_rdma_get_payload_awqos = 4'd0;
+  assign axi_rdma_get_payload_arqos = 4'd0;
+  assign axi_rdma_completion_awqos  = 4'd0;
+  assign axi_rdma_completion_arqos  = 4'd0;
+
+  assign cmac2rdma_roce_axis_tready = 1'b1;
+  assign cmac2rdma_roce_axis_tuser  = 1'b1;
+
+  assign axi_sys_mem_wuser  = 64'd0;
+  assign axi_sys_mem_aruser = 12'd0;
+  assign axi_sys_mem_awuser = 12'd0;
+
+endmodule: open_nic_shell
\ No newline at end of file
diff --git a/src/packet_adapter/packet_adapter_register.v b/src/packet_adapter/packet_adapter_register.v
index 7ce55e9..2543c1a 100644
--- a/src/packet_adapter/packet_adapter_register.v
+++ b/src/packet_adapter/packet_adapter_register.v
@@ -140,7 +140,7 @@ module packet_adapter_register (
     .DATA_W        (32)
   ) axil_reg_inst (
     .s_axil_awvalid (s_axil_awvalid),
-    .s_axil_awaddr  (s_axil_awaddr),
+    .s_axil_awaddr  (s_axil_awaddr[C_ADDR_W-1:0]),
     .s_axil_awready (s_axil_awready),
     .s_axil_wvalid  (s_axil_wvalid),
     .s_axil_wdata   (s_axil_wdata),
@@ -149,7 +149,7 @@ module packet_adapter_register (
     .s_axil_bresp   (s_axil_bresp),
     .s_axil_bready  (s_axil_bready),
     .s_axil_arvalid (s_axil_arvalid),
-    .s_axil_araddr  (s_axil_araddr),
+    .s_axil_araddr  (s_axil_araddr[C_ADDR_W-1:0]),
     .s_axil_arready (s_axil_arready),
     .s_axil_rvalid  (s_axil_rvalid),
     .s_axil_rdata   (s_axil_rdata),
diff --git a/src/qdma_subsystem/qdma_subsystem.sv b/src/qdma_subsystem/qdma_subsystem.sv
index e46dcb9..dc24cc6 100644
--- a/src/qdma_subsystem/qdma_subsystem.sv
+++ b/src/qdma_subsystem/qdma_subsystem.sv
@@ -59,6 +59,46 @@ module qdma_subsystem #(
   input   [16*NUM_PHYS_FUNC-1:0] s_axis_c2h_tuser_dst,
   output     [NUM_PHYS_FUNC-1:0] s_axis_c2h_tready,
 
+  // QDMA DMA Engine - AXI MM interface
+  input                          m_axi_awready,
+  input                          m_axi_wready,
+  input                  [3:0]   m_axi_bid,
+  input                  [1:0]   m_axi_bresp,
+  input                          m_axi_bvalid,
+  input                          m_axi_arready,
+  input                  [3:0]   m_axi_rid,
+  input                  [511:0] m_axi_rdata,
+  input                  [1:0]   m_axi_rresp,
+  input                          m_axi_rlast,
+  input                          m_axi_rvalid,
+  output                 [3:0]   m_axi_awid,
+  output                 [63:0]  m_axi_awaddr,
+  output                 [31:0]  m_axi_awuser,
+  output                 [7:0]   m_axi_awlen,
+  output                 [2:0]   m_axi_awsize,
+  output                 [1:0]   m_axi_awburst,
+  output                 [2:0]   m_axi_awprot,
+  output                         m_axi_awvalid,
+  output                         m_axi_awlock,
+  output                 [3:0]   m_axi_awcache,
+  output                 [511:0] m_axi_wdata,
+  output                 [63:0]  m_axi_wuser,
+  output                 [63:0]  m_axi_wstrb,
+  output                         m_axi_wlast,
+  output                         m_axi_wvalid,
+  output                         m_axi_bready,
+  output                 [3:0]   m_axi_arid,
+  output                 [63:0]  m_axi_araddr,
+  output                 [31:0]  m_axi_aruser,
+  output                 [7:0]   m_axi_arlen,
+  output                 [2:0]   m_axi_arsize,
+  output                 [1:0]   m_axi_arburst,
+  output                 [2:0]   m_axi_arprot,
+  output                         m_axi_arvalid,
+  output                         m_axi_arlock,
+  output                 [3:0]   m_axi_arcache,
+  output                         m_axi_rready,
+
 `ifdef __synthesis__
   input                   [15:0] pcie_rxp,
   input                   [15:0] pcie_rxn,
@@ -135,6 +175,65 @@ module qdma_subsystem #(
   input                          m_axis_qdma_cpl_tready,
 `endif
 
+  // QDMA control/status register interface
+  output                         s_csr_prog_done,
+  input                   [31:0] s_axil_csr_awaddr,
+  input                    [2:0] s_axil_csr_awprot,
+  input                          s_axil_csr_awvalid,
+  output                         s_axil_csr_awready,
+  input                   [31:0] s_axil_csr_wdata,
+  input                   [3:0]  s_axil_csr_wstrb,
+  input                          s_axil_csr_wvalid,
+  output                         s_axil_csr_wready,
+  output                         s_axil_csr_bvalid,
+  output                   [1:0] s_axil_csr_bresp,
+  input                          s_axil_csr_bready,
+  input                   [31:0] s_axil_csr_araddr,
+  input                    [2:0] s_axil_csr_arprot,
+  input                          s_axil_csr_arvalid,
+  output                         s_axil_csr_arready,
+  output                  [31:0] s_axil_csr_rdata,
+  output                   [1:0] s_axil_csr_rresp,
+  output                         s_axil_csr_rvalid,
+  input                          s_axil_csr_rready,
+
+  // QDMA bridge slave interface
+  input                    [3:0] s_axib_awid,
+  input                   [63:0] s_axib_awaddr,
+  input                    [3:0] s_axib_awregion,
+  input                    [7:0] s_axib_awlen,
+  input                    [2:0] s_axib_awsize,
+  input                    [1:0] s_axib_awburst,
+  input                          s_axib_awvalid,
+  input                  [511:0] s_axib_wdata,
+  input                   [63:0] s_axib_wstrb,
+  input                          s_axib_wlast,
+  input                          s_axib_wvalid,
+  input                   [63:0] s_axib_wuser,
+  output                  [63:0] s_axib_ruser,
+  input                          s_axib_bready,
+  input                    [3:0] s_axib_arid,
+  input                   [63:0] s_axib_araddr,
+  input                   [11:0] s_axib_aruser,
+  input                   [11:0] s_axib_awuser,
+  input                    [3:0] s_axib_arregion,
+  input                    [7:0] s_axib_arlen,
+  input                    [2:0] s_axib_arsize,
+  input                    [1:0] s_axib_arburst,
+  input                          s_axib_arvalid,
+  input                          s_axib_rready,
+  output                         s_axib_awready,
+  output                         s_axib_wready,
+  output                   [3:0] s_axib_bid,
+  output                   [1:0] s_axib_bresp,
+  output                         s_axib_bvalid,
+  output                         s_axib_arready,
+  output                   [3:0] s_axib_rid,
+  output                 [511:0] s_axib_rdata,
+  output                   [1:0] s_axib_rresp,
+  output                         s_axib_rlast,
+  output                         s_axib_rvalid,
+
   input                          mod_rstn,
   output                         mod_rst_done,
 
@@ -172,6 +271,47 @@ module qdma_subsystem #(
   wire   [5:0] axis_qdma_c2h_mty;
   wire         axis_qdma_c2h_tready;
 
+  /*
+  wire         axi_qdma_mm_awready;
+  wire         axi_qdma_mm_wready;
+  wire [3:0]   axi_qdma_mm_bid;
+  wire [1:0]   axi_qdma_mm_bresp;
+  wire         axi_qdma_mm_bvalid;
+  wire         axi_qdma_mm_arready;
+  wire [3:0]   axi_qdma_mm_rid;
+  wire [511:0] axi_qdma_mm_rdata;
+  wire [1:0]   axi_qdma_mm_rresp;
+  wire         axi_qdma_mm_rlast;
+  wire         axi_qdma_mm_rvalid;
+  wire [3:0]   axi_qdma_mm_awid;
+  wire [63:0]  axi_qdma_mm_awaddr;
+  wire [31:0]  axi_qdma_mm_awuser;
+  wire [7:0]   axi_qdma_mm_awlen;
+  wire [2:0]   axi_qdma_mm_awsize;
+  wire [1:0]   axi_qdma_mm_awburst;
+  wire [2:0]   axi_qdma_mm_awprot;
+  wire         axi_qdma_mm_awvalid;
+  wire         axi_qdma_mm_awlock;
+  wire [3:0]   axi_qdma_mm_awcache;
+  wire [511:0] axi_qdma_mm_wdata;
+  wire [63:0]  axi_qdma_mm_wuser;
+  wire [63:0]  axi_qdma_mm_wstrb;
+  wire         axi_qdma_mm_wlast;
+  wire         axi_qdma_mm_wvalid;
+  wire         axi_qdma_mm_bready;
+  wire [3:0]   axi_qdma_mm_arid;
+  wire [63:0]  axi_qdma_mm_araddr;
+  wire [31:0]  axi_qdma_mm_aruser;
+  wire [7:0]   axi_qdma_mm_arlen;
+  wire [2:0]   axi_qdma_mm_arsize;
+  wire [1:0]   axi_qdma_mm_arburst;
+  wire [2:0]   axi_qdma_mm_arprot;
+  wire         axi_qdma_mm_arvalid;
+  wire         axi_qdma_mm_arlock;
+  wire [3:0]   axi_qdma_mm_arcache;
+  wire         axi_qdma_mm_rready;
+  */
+
   wire         axis_qdma_cpl_tvalid;
   wire [511:0] axis_qdma_cpl_tdata;
   wire   [1:0] axis_qdma_cpl_size;
@@ -214,6 +354,20 @@ module qdma_subsystem #(
   wire         h2c_byp_in_st_no_dma;
   wire         h2c_byp_in_st_rdy;
 
+  wire  [63:0] h2c_byp_in_mm_radr;
+  wire  [63:0] h2c_byp_in_mm_wadr;
+  wire  [15:0] h2c_byp_in_mm_len;
+  wire         h2c_byp_in_mm_mrkr_req;
+  wire  [2:0]  h2c_byp_in_mm_port_id;
+  wire         h2c_byp_in_mm_sdi;
+  wire  [10:0] h2c_byp_in_mm_qid;
+  wire         h2c_byp_in_mm_error;
+  wire  [7:0]  h2c_byp_in_mm_func;
+  wire  [15:0] h2c_byp_in_mm_cidx;
+  wire         h2c_byp_in_mm_no_dma;
+  wire         h2c_byp_in_mm_vld;
+  wire         h2c_byp_in_mm_rdy;
+
   wire         c2h_byp_out_vld;
   wire [255:0] c2h_byp_out_dsc;
   wire         c2h_byp_out_st_mm;
@@ -236,6 +390,20 @@ module qdma_subsystem #(
   wire   [6:0] c2h_byp_in_st_csh_pfch_tag;
   wire         c2h_byp_in_st_csh_rdy;
 
+  wire  [63:0] c2h_byp_in_mm_radr;
+  wire  [63:0] c2h_byp_in_mm_wadr;
+  wire  [15:0] c2h_byp_in_mm_len;
+  wire         c2h_byp_in_mm_mrkr_req;
+  wire  [2:0]  c2h_byp_in_mm_port_id;
+  wire         c2h_byp_in_mm_sdi;
+  wire  [10:0] c2h_byp_in_mm_qid;
+  wire         c2h_byp_in_mm_error;
+  wire  [7:0]  c2h_byp_in_mm_func;
+  wire  [15:0] c2h_byp_in_mm_cidx;
+  wire         c2h_byp_in_mm_vld;
+  wire         c2h_byp_in_mm_no_dma;
+  wire         c2h_byp_in_mm_rdy;
+
   wire         axil_aresetn;
 
   // Reset is clocked by the 125MHz AXI-Lite clock
@@ -276,6 +444,19 @@ module qdma_subsystem #(
   assign h2c_byp_in_st_cidx         = 0;
   assign h2c_byp_in_st_no_dma       = 1'b0;
 
+  assign h2c_byp_in_mm_radr         = 0;
+  assign h2c_byp_in_mm_wadr         = 0;
+  assign h2c_byp_in_mm_len          = 0;
+  assign h2c_byp_in_mm_mrkr_req     = 1'b0;
+  assign h2c_byp_in_mm_port_id      = 0;
+  assign h2c_byp_in_mm_sdi          = 1'b0;
+  assign h2c_byp_in_mm_qid          = 0;
+  assign h2c_byp_in_mm_error        = 1'b0;
+  assign h2c_byp_in_mm_func         = 0;
+  assign h2c_byp_in_mm_cidx         = 0;
+  assign h2c_byp_in_mm_no_dma       = 1'b0;
+  assign h2c_byp_in_mm_vld          = 1'b0;
+
   assign c2h_byp_out_rdy            = 1'b1;
   assign c2h_byp_in_st_csh_vld      = 1'b0;
   assign c2h_byp_in_st_csh_addr     = 0;
@@ -285,6 +466,19 @@ module qdma_subsystem #(
   assign c2h_byp_in_st_csh_func     = 0;
   assign c2h_byp_in_st_csh_pfch_tag = 0;
 
+  assign c2h_byp_in_mm_radr         = 0;
+  assign c2h_byp_in_mm_wadr         = 0;
+  assign c2h_byp_in_mm_len          = 0;
+  assign c2h_byp_in_mm_mrkr_req     = 1'b0;
+  assign c2h_byp_in_mm_port_id      = 0;
+  assign c2h_byp_in_mm_sdi          = 1'b0;
+  assign c2h_byp_in_mm_qid          = 0;
+  assign c2h_byp_in_mm_error        = 1'b0;
+  assign c2h_byp_in_mm_func         = 0;
+  assign c2h_byp_in_mm_cidx         = 0;
+  assign c2h_byp_in_mm_vld          = 1'b0;
+  assign c2h_byp_in_mm_no_dma       = 1'b0;
+
   qdma_subsystem_qdma_wrapper qdma_wrapper_inst (
     .pcie_rxp                        (pcie_rxp),
     .pcie_rxn                        (pcie_rxn),
@@ -308,6 +502,45 @@ module qdma_subsystem #(
     .m_axil_rresp                    (m_axil_pcie_rresp),
     .m_axil_rready                   (m_axil_pcie_rready),
 
+    .m_axi_awready                   (m_axi_awready),
+    .m_axi_wready                    (m_axi_wready),
+    .m_axi_bid                       (m_axi_bid),
+    .m_axi_bresp                     (m_axi_bresp),
+    .m_axi_bvalid                    (m_axi_bvalid),
+    .m_axi_arready                   (m_axi_arready),
+    .m_axi_rid                       (m_axi_rid),
+    .m_axi_rdata                     (m_axi_rdata),
+    .m_axi_rresp                     (m_axi_rresp),
+    .m_axi_rlast                     (m_axi_rlast),
+    .m_axi_rvalid                    (m_axi_rvalid),
+    .m_axi_awid                      (m_axi_awid),
+    .m_axi_awaddr                    (m_axi_awaddr),
+    .m_axi_awuser                    (m_axi_awuser),
+    .m_axi_awlen                     (m_axi_awlen),
+    .m_axi_awsize                    (m_axi_awsize),
+    .m_axi_awburst                   (m_axi_awburst),
+    .m_axi_awprot                    (m_axi_awprot),
+    .m_axi_awvalid                   (m_axi_awvalid),
+    .m_axi_awlock                    (m_axi_awlock),
+    .m_axi_awcache                   (m_axi_awcache),
+    .m_axi_wdata                     (m_axi_wdata),
+    .m_axi_wuser                     (m_axi_wuser),
+    .m_axi_wstrb                     (m_axi_wstrb),
+    .m_axi_wlast                     (m_axi_wlast),
+    .m_axi_wvalid                    (m_axi_wvalid),
+    .m_axi_bready                    (m_axi_bready),
+    .m_axi_arid                      (m_axi_arid),
+    .m_axi_araddr                    (m_axi_araddr),
+    .m_axi_aruser                    (m_axi_aruser),
+    .m_axi_arlen                     (m_axi_arlen),
+    .m_axi_arsize                    (m_axi_arsize),
+    .m_axi_arburst                   (m_axi_arburst),
+    .m_axi_arprot                    (m_axi_arprot),
+    .m_axi_arvalid                   (m_axi_arvalid),
+    .m_axi_arlock                    (m_axi_arlock),
+    .m_axi_arcache                   (m_axi_arcache),
+    .m_axi_rready                    (m_axi_rready),
+
     .m_axis_h2c_tvalid               (axis_qdma_h2c_tvalid),
     .m_axis_h2c_tdata                (axis_qdma_h2c_tdata),
     .m_axis_h2c_tcrc                 (axis_qdma_h2c_tcrc),
@@ -375,6 +608,20 @@ module qdma_subsystem #(
     .h2c_byp_in_st_no_dma            (h2c_byp_in_st_no_dma),
     .h2c_byp_in_st_rdy               (h2c_byp_in_st_rdy),
 
+    .h2c_byp_in_mm_radr              (h2c_byp_in_mm_radr),
+    .h2c_byp_in_mm_wadr              (h2c_byp_in_mm_wadr),
+    .h2c_byp_in_mm_len               (h2c_byp_in_mm_len),
+    .h2c_byp_in_mm_mrkr_req          (h2c_byp_in_mm_mrkr_req),
+    .h2c_byp_in_mm_port_id           (h2c_byp_in_mm_port_id),
+    .h2c_byp_in_mm_sdi               (h2c_byp_in_mm_sdi),
+    .h2c_byp_in_mm_qid               (h2c_byp_in_mm_qid),
+    .h2c_byp_in_mm_error             (h2c_byp_in_mm_error),
+    .h2c_byp_in_mm_func              (h2c_byp_in_mm_func),
+    .h2c_byp_in_mm_cidx              (h2c_byp_in_mm_cidx),
+    .h2c_byp_in_mm_no_dma            (h2c_byp_in_mm_no_dma),
+    .h2c_byp_in_mm_vld               (h2c_byp_in_mm_vld),
+    .h2c_byp_in_mm_rdy               (h2c_byp_in_mm_rdy),
+
     .c2h_byp_out_vld                 (c2h_byp_out_vld),
     .c2h_byp_out_dsc                 (c2h_byp_out_dsc),
     .c2h_byp_out_st_mm               (c2h_byp_out_st_mm),
@@ -397,6 +644,77 @@ module qdma_subsystem #(
     .c2h_byp_in_st_csh_pfch_tag      (c2h_byp_in_st_csh_pfch_tag),
     .c2h_byp_in_st_csh_rdy           (c2h_byp_in_st_csh_rdy),
 
+    .c2h_byp_in_mm_radr              (c2h_byp_in_mm_radr),
+    .c2h_byp_in_mm_wadr              (c2h_byp_in_mm_wadr),
+    .c2h_byp_in_mm_len               (c2h_byp_in_mm_len),
+    .c2h_byp_in_mm_mrkr_req          (c2h_byp_in_mm_mrkr_req),
+    .c2h_byp_in_mm_port_id           (c2h_byp_in_mm_port_id),
+    .c2h_byp_in_mm_sdi               (c2h_byp_in_mm_sdi),
+    .c2h_byp_in_mm_qid               (c2h_byp_in_mm_qid),
+    .c2h_byp_in_mm_error             (c2h_byp_in_mm_error),
+    .c2h_byp_in_mm_func              (c2h_byp_in_mm_func),
+    .c2h_byp_in_mm_cidx              (c2h_byp_in_mm_cidx),
+    .c2h_byp_in_mm_vld               (c2h_byp_in_mm_vld),
+    .c2h_byp_in_mm_no_dma            (c2h_byp_in_mm_no_dma),
+    .c2h_byp_in_mm_rdy               (c2h_byp_in_mm_rdy),
+
+    .s_csr_prog_done                 (s_csr_prog_done),
+    .s_axil_csr_awaddr               (s_axil_csr_awaddr),
+    .s_axil_csr_awprot               (s_axil_csr_awprot),
+    .s_axil_csr_awvalid              (s_axil_csr_awvalid),
+    .s_axil_csr_awready              (s_axil_csr_awready),
+    .s_axil_csr_wdata                (s_axil_csr_wdata),
+    .s_axil_csr_wstrb                (s_axil_csr_wstrb),
+    .s_axil_csr_wvalid               (s_axil_csr_wvalid),
+    .s_axil_csr_wready               (s_axil_csr_wready),
+    .s_axil_csr_bvalid               (s_axil_csr_bvalid),
+    .s_axil_csr_bresp                (s_axil_csr_bresp),
+    .s_axil_csr_bready               (s_axil_csr_bready),
+    .s_axil_csr_araddr               (s_axil_csr_araddr),
+    .s_axil_csr_arprot               (s_axil_csr_arprot),
+    .s_axil_csr_arvalid              (s_axil_csr_arvalid),
+    .s_axil_csr_arready              (s_axil_csr_arready),
+    .s_axil_csr_rdata                (s_axil_csr_rdata),
+    .s_axil_csr_rresp                (s_axil_csr_rresp),
+    .s_axil_csr_rvalid               (s_axil_csr_rvalid),
+    .s_axil_csr_rready               (s_axil_csr_rready),
+
+    .s_axib_awid                     (s_axib_awid),
+    .s_axib_awaddr                   (s_axib_awaddr),
+    .s_axib_awregion                 (s_axib_awregion),
+    .s_axib_awlen                    (s_axib_awlen),
+    .s_axib_awsize                   (s_axib_awsize),
+    .s_axib_awburst                  (s_axib_awburst),
+    .s_axib_awvalid                  (s_axib_awvalid),
+    .s_axib_wdata                    (s_axib_wdata),
+    .s_axib_wstrb                    (s_axib_wstrb),
+    .s_axib_wlast                    (s_axib_wlast),
+    .s_axib_wvalid                   (s_axib_wvalid),
+    .s_axib_wuser                    (s_axib_wuser),
+    .s_axib_ruser                    (s_axib_ruser),
+    .s_axib_bready                   (s_axib_bready),
+    .s_axib_arid                     (s_axib_arid),
+    .s_axib_araddr                   (s_axib_araddr),
+    .s_axib_aruser                   (s_axib_aruser),
+    .s_axib_awuser                   (s_axib_awuser),
+    .s_axib_arregion                 (s_axib_arregion),
+    .s_axib_arlen                    (s_axib_arlen),
+    .s_axib_arsize                   (s_axib_arsize),
+    .s_axib_arburst                  (s_axib_arburst),
+    .s_axib_arvalid                  (s_axib_arvalid),
+    .s_axib_rready                   (s_axib_rready),
+    .s_axib_awready                  (s_axib_awready),
+    .s_axib_wready                   (s_axib_wready),
+    .s_axib_bid                      (s_axib_bid),
+    .s_axib_bresp                    (s_axib_bresp),
+    .s_axib_bvalid                   (s_axib_bvalid),
+    .s_axib_arready                  (s_axib_arready),
+    .s_axib_rid                      (s_axib_rid),
+    .s_axib_rdata                    (s_axib_rdata),
+    .s_axib_rresp                    (s_axib_rresp),
+    .s_axib_rlast                    (s_axib_rlast),
+    .s_axib_rvalid                   (s_axib_rvalid),
+
     .pcie_refclk                     (pcie_refclk),
     .pcie_refclk_gt                  (pcie_refclk_gt),
     .pcie_rstn                       (pcie_rstn),
@@ -801,7 +1119,26 @@ module qdma_subsystem #(
         .axil_aresetn          (axil_aresetn)
       );
     end
-  end
+
+    (* mark_debug = "true" *) logic [47:0] qdma_h2c_pkt_cnt;
+    (* mark_debug = "true" *) logic [47:0] qdma_c2h_pkt_cnt;
+
+    always_ff @(posedge axis_aclk)
+      if(!axil_aresetn) begin
+        qdma_h2c_pkt_cnt <= 0;
+        qdma_c2h_pkt_cnt <= 0;
+      end
+      else begin
+        if ((m_axis_h2c_tvalid != 0) && (m_axis_h2c_tready != 0) && (m_axis_h2c_tlast != 0)) begin
+          qdma_h2c_pkt_cnt <= qdma_h2c_pkt_cnt + 1;
+        end
+
+        if ((s_axis_c2h_tvalid != 0) && (s_axis_c2h_tready != 0) && (axis_c2h_tlast !=0)) begin
+          qdma_c2h_pkt_cnt <= qdma_c2h_pkt_cnt + 1;
+        end
+      end
+    end
+
   endgenerate
 
 endmodule: qdma_subsystem
diff --git a/src/qdma_subsystem/qdma_subsystem_c2h.sv b/src/qdma_subsystem/qdma_subsystem_c2h.sv
index 50e9082..b230c82 100644
--- a/src/qdma_subsystem/qdma_subsystem_c2h.sv
+++ b/src/qdma_subsystem/qdma_subsystem_c2h.sv
@@ -277,10 +277,14 @@ module qdma_subsystem_c2h #(
   assign m_axis_qdma_cpl_tdata[511:256]       = 0;
   assign m_axis_qdma_cpl_tdata[255:128]       = 0;
   assign m_axis_qdma_cpl_tdata[127:64]        = 0;
-  assign m_axis_qdma_cpl_tdata[63:32]         = cpl_fifo_dout[31:0];
+  // patch
+  assign m_axis_qdma_cpl_tdata[63:20]         = 0;
+  assign m_axis_qdma_cpl_tdata[19:4]          = cpl_fifo_dout[15:0];
+  assign m_axis_qdma_cpl_tdata[3:0]           = 4'b1000;
+/*  assign m_axis_qdma_cpl_tdata[63:32]         = cpl_fifo_dout[31:0];
   assign m_axis_qdma_cpl_tdata[31:27]         = 0;
   assign m_axis_qdma_cpl_tdata[26:16]         = cpl_fifo_dout[42:32];
-  assign m_axis_qdma_cpl_tdata[15:0]          = 0;
+  assign m_axis_qdma_cpl_tdata[15:0]          = 0;*/
 
   assign m_axis_qdma_cpl_ctrl_no_wrb_marker   = 1'b0;
   assign m_axis_qdma_cpl_ctrl_col_idx         = 0;
diff --git a/src/qdma_subsystem/qdma_subsystem_h2c.sv b/src/qdma_subsystem/qdma_subsystem_h2c.sv
index 6a7ee26..38cbe65 100644
--- a/src/qdma_subsystem/qdma_subsystem_h2c.sv
+++ b/src/qdma_subsystem/qdma_subsystem_h2c.sv
@@ -71,7 +71,8 @@ module qdma_subsystem_h2c #(
     .s_axis_tdata  (s_axis_qdma_h2c_tdata),
     .s_axis_tkeep  ({64{1'b1}}),
     .s_axis_tlast  (s_axis_qdma_h2c_tlast),
-    .s_axis_tuser  ({s_axis_qdma_h2c_tuser_mdata[15:0],
+	.s_axis_tuser  ({s_axis_qdma_h2c_tuser_mdata[31:16], // patch
+//    .s_axis_tuser  ({s_axis_qdma_h2c_tuser_mdata[15:0],
                      s_axis_qdma_h2c_tuser_mty,
                      s_axis_qdma_h2c_tuser_qid}),
     .s_axis_tid    (0),
diff --git a/src/qdma_subsystem/qdma_subsystem_qdma_wrapper.v b/src/qdma_subsystem/qdma_subsystem_qdma_wrapper.v
index cfd0dca..0417dad 100644
--- a/src/qdma_subsystem/qdma_subsystem_qdma_wrapper.v
+++ b/src/qdma_subsystem/qdma_subsystem_qdma_wrapper.v
@@ -42,6 +42,45 @@ module qdma_subsystem_qdma_wrapper (
   input    [1:0] m_axil_rresp,
   output         m_axil_rready,
 
+  input          m_axi_awready,
+  input          m_axi_wready,
+  input  [3:0]   m_axi_bid,
+  input  [1:0]   m_axi_bresp,
+  input          m_axi_bvalid,
+  input          m_axi_arready,
+  input  [3:0]   m_axi_rid,
+  input  [511:0] m_axi_rdata,
+  input  [1:0]   m_axi_rresp,
+  input          m_axi_rlast,
+  input          m_axi_rvalid,
+  output [3:0]   m_axi_awid,
+  output [63:0]  m_axi_awaddr,
+  output [31:0]  m_axi_awuser,
+  output [7:0]   m_axi_awlen,
+  output [2:0]   m_axi_awsize,
+  output [1:0]   m_axi_awburst,
+  output [2:0]   m_axi_awprot,
+  output         m_axi_awvalid,
+  output         m_axi_awlock,
+  output [3:0]   m_axi_awcache,
+  output [511:0] m_axi_wdata,
+  output [63:0]  m_axi_wuser,
+  output [63:0]  m_axi_wstrb,
+  output         m_axi_wlast,
+  output         m_axi_wvalid,
+  output         m_axi_bready,
+  output [3:0]   m_axi_arid,
+  output [63:0]  m_axi_araddr,
+  output [31:0]  m_axi_aruser,
+  output [7:0]   m_axi_arlen,
+  output [2:0]   m_axi_arsize,
+  output [1:0]   m_axi_arburst,
+  output [2:0]   m_axi_arprot,
+  output         m_axi_arvalid,
+  output         m_axi_arlock,
+  output [3:0]   m_axi_arcache,
+  output         m_axi_rready,
+
   output         m_axis_h2c_tvalid,
   output [511:0] m_axis_h2c_tdata,
   output  [31:0] m_axis_h2c_tcrc,
@@ -109,6 +148,20 @@ module qdma_subsystem_qdma_wrapper (
   input          h2c_byp_in_st_no_dma,
   output         h2c_byp_in_st_rdy,
 
+  input  [63:0]  h2c_byp_in_mm_radr,
+  input  [63:0]  h2c_byp_in_mm_wadr,
+  input  [15:0]  h2c_byp_in_mm_len,
+  input          h2c_byp_in_mm_mrkr_req,
+  input  [2:0]   h2c_byp_in_mm_port_id,
+  input          h2c_byp_in_mm_sdi,
+  input  [10:0]  h2c_byp_in_mm_qid,
+  input          h2c_byp_in_mm_error,
+  input  [7:0]   h2c_byp_in_mm_func,
+  input  [15:0]  h2c_byp_in_mm_cidx,
+  input          h2c_byp_in_mm_no_dma,
+  input          h2c_byp_in_mm_vld,
+  output         h2c_byp_in_mm_rdy,
+
   output         c2h_byp_out_vld,
   output [255:0] c2h_byp_out_dsc,
   output         c2h_byp_out_st_mm,
@@ -131,6 +184,79 @@ module qdma_subsystem_qdma_wrapper (
   input    [6:0] c2h_byp_in_st_csh_pfch_tag,
   output         c2h_byp_in_st_csh_rdy,
 
+  input   [63:0] c2h_byp_in_mm_radr,
+  input   [63:0] c2h_byp_in_mm_wadr,
+  input   [15:0] c2h_byp_in_mm_len,
+  input          c2h_byp_in_mm_mrkr_req,
+  input   [2:0]  c2h_byp_in_mm_port_id,
+  input          c2h_byp_in_mm_sdi,
+  input   [10:0] c2h_byp_in_mm_qid,
+  input          c2h_byp_in_mm_error,
+  input   [7:0]  c2h_byp_in_mm_func,
+  input   [15:0] c2h_byp_in_mm_cidx,
+  input          c2h_byp_in_mm_vld,
+  input          c2h_byp_in_mm_no_dma,
+  output         c2h_byp_in_mm_rdy,
+
+  // QDMA control/status register interface
+  output         s_csr_prog_done,
+  input   [31:0] s_axil_csr_awaddr,
+  input    [2:0] s_axil_csr_awprot,
+  input          s_axil_csr_awvalid,
+  output         s_axil_csr_awready,
+  input   [31:0] s_axil_csr_wdata,
+  input   [3:0]  s_axil_csr_wstrb,
+  input          s_axil_csr_wvalid,
+  output         s_axil_csr_wready,
+  output         s_axil_csr_bvalid,
+  output   [1:0] s_axil_csr_bresp,
+  input          s_axil_csr_bready,
+  input   [31:0] s_axil_csr_araddr,
+  input    [2:0] s_axil_csr_arprot,
+  input          s_axil_csr_arvalid,
+  output         s_axil_csr_arready,
+  output  [31:0] s_axil_csr_rdata,
+  output   [1:0] s_axil_csr_rresp,
+  output         s_axil_csr_rvalid,
+  input          s_axil_csr_rready,
+
+  // QDMA bridge slave interface
+  (* mark_debug = "true" *) input    [3:0] s_axib_awid,
+  (* mark_debug = "true" *) input   [63:0] s_axib_awaddr,
+  (* mark_debug = "true" *) input    [3:0] s_axib_awregion,
+  (* mark_debug = "true" *) input    [7:0] s_axib_awlen,
+  (* mark_debug = "true" *) input    [2:0] s_axib_awsize,
+  (* mark_debug = "true" *) input    [1:0] s_axib_awburst,
+  (* mark_debug = "true" *) input          s_axib_awvalid,
+  (* mark_debug = "true" *) input  [511:0] s_axib_wdata,
+  (* mark_debug = "true" *) input   [63:0] s_axib_wstrb,
+  (* mark_debug = "true" *) input          s_axib_wlast,
+  (* mark_debug = "true" *) input          s_axib_wvalid,
+  (* mark_debug = "true" *) input   [63:0] s_axib_wuser,
+  (* mark_debug = "true" *) output  [63:0] s_axib_ruser,
+  (* mark_debug = "true" *) input          s_axib_bready,
+  (* mark_debug = "true" *) input    [3:0] s_axib_arid,
+  (* mark_debug = "true" *) input   [63:0] s_axib_araddr,
+  (* mark_debug = "true" *) input   [11:0] s_axib_aruser,
+  (* mark_debug = "true" *) input   [11:0] s_axib_awuser,
+  (* mark_debug = "true" *) input    [3:0] s_axib_arregion,
+  (* mark_debug = "true" *) input    [7:0] s_axib_arlen,
+  (* mark_debug = "true" *) input    [2:0] s_axib_arsize,
+  (* mark_debug = "true" *) input    [1:0] s_axib_arburst,
+  (* mark_debug = "true" *) input          s_axib_arvalid,
+  (* mark_debug = "true" *) input          s_axib_rready,
+  (* mark_debug = "true" *) output         s_axib_awready,
+  (* mark_debug = "true" *) output         s_axib_wready,
+  (* mark_debug = "true" *) output   [3:0] s_axib_bid,
+  (* mark_debug = "true" *) output   [1:0] s_axib_bresp,
+  (* mark_debug = "true" *) output         s_axib_bvalid,
+  (* mark_debug = "true" *) output         s_axib_arready,
+  (* mark_debug = "true" *) output   [3:0] s_axib_rid,
+  (* mark_debug = "true" *) output [511:0] s_axib_rdata,
+  (* mark_debug = "true" *) output   [1:0] s_axib_rresp,
+  (* mark_debug = "true" *) output         s_axib_rlast,
+  (* mark_debug = "true" *) output         s_axib_rvalid,
+
   input          pcie_refclk,
   input          pcie_refclk_gt,
   input          pcie_rstn,
@@ -150,6 +276,27 @@ module qdma_subsystem_qdma_wrapper (
 
   reg   [1:0] aresetn_sync = 2'b11;
 
+  (* mark_debug = "true" *) wire         qdma_csr_prog_done;
+  (* mark_debug = "true" *) wire  [31:0] qdma_axil_csr_awaddr;
+  (* mark_debug = "true" *) wire   [2:0] qdma_axil_csr_awprot;
+  (* mark_debug = "true" *) wire         qdma_axil_csr_awvalid;
+  (* mark_debug = "true" *) wire         qdma_axil_csr_awready;
+  (* mark_debug = "true" *) wire  [31:0] qdma_axil_csr_wdata;
+  (* mark_debug = "true" *) wire  [3:0]  qdma_axil_csr_wstrb;
+  (* mark_debug = "true" *) wire         qdma_axil_csr_wvalid;
+  (* mark_debug = "true" *) wire         qdma_axil_csr_wready;
+  (* mark_debug = "true" *) wire         qdma_axil_csr_bvalid;
+  (* mark_debug = "true" *) wire   [1:0] qdma_axil_csr_bresp;
+  (* mark_debug = "true" *) wire         qdma_axil_csr_bready;
+  (* mark_debug = "true" *) wire  [31:0] qdma_axil_csr_araddr;
+  (* mark_debug = "true" *) wire   [2:0] qdma_axil_csr_arprot;
+  (* mark_debug = "true" *) wire         qdma_axil_csr_arvalid;
+  (* mark_debug = "true" *) wire         qdma_axil_csr_arready;
+  (* mark_debug = "true" *) wire  [31:0] qdma_axil_csr_rdata;
+  (* mark_debug = "true" *) wire   [1:0] qdma_axil_csr_rresp;
+  (* mark_debug = "true" *) wire         qdma_axil_csr_rvalid;
+  (* mark_debug = "true" *) wire         qdma_axil_csr_rready;
+
   wire        qdma_axil_awvalid;
   wire [31:0] qdma_axil_awaddr;
   wire  [2:0] qdma_axil_awprot;
@@ -260,6 +407,66 @@ module qdma_subsystem_qdma_wrapper (
     .m_axi_aresetn (aresetn)
   );
 
+  qdma_subsystem_axi_csr_cdc axi_csr_cdc_inst (
+    .s_axi_awvalid (s_axil_csr_awvalid),
+    .s_axi_awaddr  (s_axil_csr_awaddr),
+    .s_axi_awprot  (s_axil_csr_awprot),
+    .s_axi_awready (s_axil_csr_awready),
+    .s_axi_wvalid  (s_axil_csr_wvalid),
+    .s_axi_wdata   (s_axil_csr_wdata),
+    .s_axi_wstrb   (s_axil_csr_wstrb),
+    .s_axi_wready  (s_axil_csr_wready),
+    .s_axi_bvalid  (s_axil_csr_bvalid),
+    .s_axi_bresp   (s_axil_csr_bresp),
+    .s_axi_bready  (s_axil_csr_bready),
+    .s_axi_arvalid (s_axil_csr_arvalid),
+    .s_axi_araddr  (s_axil_csr_araddr),
+    .s_axi_arprot  (s_axil_csr_arprot),
+    .s_axi_arready (s_axil_csr_arready),
+    .s_axi_rvalid  (s_axil_csr_rvalid),
+    .s_axi_rdata   (s_axil_csr_rdata),
+    .s_axi_rresp   (s_axil_csr_rresp),
+    .s_axi_rready  (s_axil_csr_rready),
+
+    .m_axi_awvalid (qdma_axil_csr_awvalid),
+    .m_axi_awaddr  (qdma_axil_csr_awaddr),
+    .m_axi_awprot  (qdma_axil_csr_awprot),
+    .m_axi_awready (qdma_axil_csr_awready),
+    .m_axi_wvalid  (qdma_axil_csr_wvalid),
+    .m_axi_wdata   (qdma_axil_csr_wdata),
+    .m_axi_wstrb   (qdma_axil_csr_wstrb),
+    .m_axi_wready  (qdma_axil_csr_wready),
+    .m_axi_bvalid  (qdma_axil_csr_bvalid),
+    .m_axi_bresp   (qdma_axil_csr_bresp),
+    .m_axi_bready  (qdma_axil_csr_bready),
+    .m_axi_arvalid (qdma_axil_csr_arvalid),
+    .m_axi_araddr  (qdma_axil_csr_araddr),
+    .m_axi_arprot  (qdma_axil_csr_arprot),
+    .m_axi_arready (qdma_axil_csr_arready),
+    .m_axi_rvalid  (qdma_axil_csr_rvalid),
+    .m_axi_rdata   (qdma_axil_csr_rdata),
+    .m_axi_rresp   (qdma_axil_csr_rresp),
+    .m_axi_rready  (qdma_axil_csr_rready),
+
+    .s_axi_aclk    (axil_aclk),
+    .s_axi_aresetn (aresetn),
+    .m_axi_aclk    (axis_aclk),
+    .m_axi_aresetn (aresetn_250mhz)
+  );
+
+  // Convert signals @ axis_aclk to axil_aclk
+  xpm_cdc_single #(
+    .DEST_SYNC_FF(4), // DECIMAL; range: 2-10
+    .INIT_SYNC_FF(0), // DECIMAL; 0=disable simulation init values, 1=enable simulation init values
+    .SIM_ASSERT_CHK(1), // DECIMAL; 0=disable simulation messages, 1=enable simulation messages
+    .SRC_INPUT_REG(1) // DECIMAL; 0=do not register input, 1=register input
+  ) roce_pkt_recved_cdc (
+    .dest_out(s_csr_prog_done),
+    .dest_clk(axil_aclk),
+    .src_clk(axis_aclk),
+    .src_in(qdma_csr_prog_done)
+  );
+
   assign usr_irq_in_vld    = 1'b0;
   assign usr_irq_in_vec    = 0;
   assign usr_irq_in_fnc    = 0;
@@ -335,6 +542,20 @@ module qdma_subsystem_qdma_wrapper (
     .h2c_byp_in_st_no_dma                 (h2c_byp_in_st_no_dma),
     .h2c_byp_in_st_rdy                    (h2c_byp_in_st_rdy),
 
+    .h2c_byp_in_mm_radr                   (h2c_byp_in_mm_radr),
+    .h2c_byp_in_mm_wadr                   (h2c_byp_in_mm_wadr),
+    .h2c_byp_in_mm_len                    (h2c_byp_in_mm_len),
+    .h2c_byp_in_mm_mrkr_req               (h2c_byp_in_mm_mrkr_req),
+    .h2c_byp_in_mm_port_id                (h2c_byp_in_mm_port_id),
+    .h2c_byp_in_mm_sdi                    (h2c_byp_in_mm_sdi),
+    .h2c_byp_in_mm_qid                    (h2c_byp_in_mm_qid),
+    .h2c_byp_in_mm_error                  (h2c_byp_in_mm_error),
+    .h2c_byp_in_mm_func                   (h2c_byp_in_mm_func),
+    .h2c_byp_in_mm_cidx                   (h2c_byp_in_mm_cidx),
+    .h2c_byp_in_mm_no_dma                 (h2c_byp_in_mm_no_dma),
+    .h2c_byp_in_mm_vld                    (h2c_byp_in_mm_vld),
+    .h2c_byp_in_mm_rdy                    (h2c_byp_in_mm_rdy),
+
     .c2h_byp_out_vld                      (c2h_byp_out_vld),
     .c2h_byp_out_dsc                      (c2h_byp_out_dsc),
     .c2h_byp_out_st_mm                    (c2h_byp_out_st_mm),
@@ -357,12 +578,31 @@ module qdma_subsystem_qdma_wrapper (
     .c2h_byp_in_st_csh_pfch_tag           (c2h_byp_in_st_csh_pfch_tag),
     .c2h_byp_in_st_csh_rdy                (c2h_byp_in_st_csh_rdy),
 
+    .c2h_byp_in_mm_radr                   (c2h_byp_in_mm_radr),
+    .c2h_byp_in_mm_wadr                   (c2h_byp_in_mm_wadr),
+    .c2h_byp_in_mm_len                    (c2h_byp_in_mm_len),
+    .c2h_byp_in_mm_mrkr_req               (c2h_byp_in_mm_mrkr_req),
+    .c2h_byp_in_mm_port_id                (c2h_byp_in_mm_port_id),
+    .c2h_byp_in_mm_sdi                    (c2h_byp_in_mm_sdi),
+    .c2h_byp_in_mm_qid                    (c2h_byp_in_mm_qid),
+    .c2h_byp_in_mm_error                  (c2h_byp_in_mm_error),
+    .c2h_byp_in_mm_func                   (c2h_byp_in_mm_func),
+    .c2h_byp_in_mm_cidx                   (c2h_byp_in_mm_cidx),
+    .c2h_byp_in_mm_vld                    (c2h_byp_in_mm_vld),
+    .c2h_byp_in_mm_no_dma                 (c2h_byp_in_mm_no_dma),
+    .c2h_byp_in_mm_rdy                    (c2h_byp_in_mm_rdy),
+
     .usr_irq_in_vld                       (usr_irq_in_vld),
     .usr_irq_in_vec                       (usr_irq_in_vec),
     .usr_irq_in_fnc                       (usr_irq_in_fnc),
     .usr_irq_out_ack                      (usr_irq_out_ack),
     .usr_irq_out_fail                     (usr_irq_out_fail),
 
+    .st_rx_msg_rdy                        (1'b1),
+    .st_rx_msg_valid                      (),
+    .st_rx_msg_last                       (),
+    .st_rx_msg_data                       (),
+
     .tm_dsc_sts_vld                       (tm_dsc_sts_vld),
     .tm_dsc_sts_port_id                   (tm_dsc_sts_port_id),
     .tm_dsc_sts_qen                       (tm_dsc_sts_qen),
@@ -384,6 +624,86 @@ module qdma_subsystem_qdma_wrapper (
     .dsc_crdt_in_fence                    (dsc_crdt_in_fence),
     .dsc_crdt_in_rdy                      (dsc_crdt_in_rdy),
 
+    .m_axi_awready                        (m_axi_awready),
+    .m_axi_wready                         (m_axi_wready),
+    .m_axi_bid                            (m_axi_bid),
+    .m_axi_bresp                          (m_axi_bresp),
+    .m_axi_bvalid                         (m_axi_bvalid),
+    .m_axi_arready                        (m_axi_arready),
+    .m_axi_rid                            (m_axi_rid),
+    .m_axi_rdata                          (m_axi_rdata),
+    .m_axi_rresp                          (m_axi_rresp),
+    .m_axi_rlast                          (m_axi_rlast),
+    .m_axi_rvalid                         (m_axi_rvalid),
+    .m_axi_awid                           (m_axi_awid),
+    .m_axi_awaddr                         (m_axi_awaddr),
+    .m_axi_awuser                         (m_axi_awuser),
+    .m_axi_awlen                          (m_axi_awlen),
+    .m_axi_awsize                         (m_axi_awsize),
+    .m_axi_awburst                        (m_axi_awburst),
+    .m_axi_awprot                         (m_axi_awprot),
+    .m_axi_awvalid                        (m_axi_awvalid),
+    .m_axi_awlock                         (m_axi_awlock),
+    .m_axi_awcache                        (m_axi_awcache),
+    .m_axi_wdata                          (m_axi_wdata),
+    .m_axi_wuser                          (m_axi_wuser),
+    .m_axi_wstrb                          (m_axi_wstrb),
+    .m_axi_wlast                          (m_axi_wlast),
+    .m_axi_wvalid                         (m_axi_wvalid),
+    .m_axi_bready                         (m_axi_bready),
+    .m_axi_arid                           (m_axi_arid),
+    .m_axi_araddr                         (m_axi_araddr),
+    .m_axi_aruser                         (m_axi_aruser),
+    .m_axi_arlen                          (m_axi_arlen),
+    .m_axi_arsize                         (m_axi_arsize),
+    .m_axi_arburst                        (m_axi_arburst),
+    .m_axi_arprot                         (m_axi_arprot),
+    .m_axi_arvalid                        (m_axi_arvalid),
+    .m_axi_arlock                         (m_axi_arlock),
+    .m_axi_arcache                        (m_axi_arcache),
+    .m_axi_rready                         (m_axi_rready),
+
+    /*
+    // No need to connect Master AXI Bridge signals
+    .m_axib_awid                          (),
+    .m_axib_awaddr                        (),
+    .m_axib_awlen                         (),
+    .m_axib_awuser                        (),
+    .m_axib_awsize                        (),
+    .m_axib_awburst                       (),
+    .m_axib_awprot                        (),
+    .m_axib_awvalid                       (),
+    .m_axib_awready                       (1'b0),
+    .m_axib_awlock                        (),
+    .m_axib_awcache                       (),
+    .m_axib_wdata                         (),
+    .m_axib_wstrb                         (),
+    .m_axib_wlast                         (),
+    .m_axib_wvalid                        (),
+    .m_axib_wready                        (1'b0),
+    .m_axib_bid                           (4'd0),
+    .m_axib_bresp                         (2'd0),
+    .m_axib_bvalid                        (1'b0),
+    .m_axib_bready                        (),
+    .m_axib_arid                          (),
+    .m_axib_araddr                        (),
+    .m_axib_arlen                         (),
+    .m_axib_aruser                        (),
+    .m_axib_arsize                        (),
+    .m_axib_arburst                       (),
+    .m_axib_arprot                        (),
+    .m_axib_arvalid                       (),
+    .m_axib_arready                       (1'b0),
+    .m_axib_arlock                        (),
+    .m_axib_arcache                       (),
+    .m_axib_rid                           (4'd0),
+    .m_axib_rdata                         (512'd0),
+    .m_axib_rresp                         (2'd0),
+    .m_axib_rlast                         (1'b0),
+    .m_axib_rvalid                        (1'b0),
+    .m_axib_rready                        (),
+    */
+
     .m_axis_h2c_tvalid                    (m_axis_h2c_tvalid),
     .m_axis_h2c_tdata                     (m_axis_h2c_tdata),
     .m_axis_h2c_tcrc                      (m_axis_h2c_tcrc),
@@ -424,6 +744,65 @@ module qdma_subsystem_qdma_wrapper (
     .s_axis_c2h_cmpt_ctrl_no_wrb_marker   (s_axis_cpl_ctrl_no_wrb_marker),
     .s_axis_c2h_cmpt_tready               (s_axis_cpl_tready),
 
+    // Control status register interface
+    .csr_prog_done                        (qdma_csr_prog_done),
+    .s_axil_csr_awaddr                    (qdma_axil_csr_awaddr),
+    .s_axil_csr_awprot                    (qdma_axil_csr_awprot),
+    .s_axil_csr_awvalid                   (qdma_axil_csr_awvalid),
+    .s_axil_csr_awready                   (qdma_axil_csr_awready),
+    .s_axil_csr_wdata                     (qdma_axil_csr_wdata),
+    .s_axil_csr_wstrb                     (qdma_axil_csr_wstrb),
+    .s_axil_csr_wvalid                    (qdma_axil_csr_wvalid),
+    .s_axil_csr_wready                    (qdma_axil_csr_wready),
+    .s_axil_csr_bvalid                    (qdma_axil_csr_bvalid),
+    .s_axil_csr_bresp                     (qdma_axil_csr_bresp),
+    .s_axil_csr_bready                    (qdma_axil_csr_bready),
+    .s_axil_csr_araddr                    (qdma_axil_csr_araddr),
+    .s_axil_csr_arprot                    (qdma_axil_csr_arprot),
+    .s_axil_csr_arvalid                   (qdma_axil_csr_arvalid),
+    .s_axil_csr_arready                   (qdma_axil_csr_arready),
+    .s_axil_csr_rdata                     (qdma_axil_csr_rdata),
+    .s_axil_csr_rresp                     (qdma_axil_csr_rresp),
+    .s_axil_csr_rvalid                    (qdma_axil_csr_rvalid),
+    .s_axil_csr_rready                    (qdma_axil_csr_rready),
+
+    // AXI bridge interface used to access host memory
+    .s_axib_awid                          (s_axib_awid),
+    .s_axib_awaddr                        (s_axib_awaddr),
+    .s_axib_awregion                      (s_axib_awregion),
+    .s_axib_awlen                         (s_axib_awlen),
+    .s_axib_awsize                        (s_axib_awsize),
+    .s_axib_awburst                       (s_axib_awburst),
+    .s_axib_awvalid                       (s_axib_awvalid),
+    .s_axib_wdata                         (s_axib_wdata),
+    .s_axib_wstrb                         (s_axib_wstrb),
+    .s_axib_wlast                         (s_axib_wlast),
+    .s_axib_wvalid                        (s_axib_wvalid),
+    .s_axib_wuser                         (s_axib_wuser),
+    .s_axib_ruser                         (s_axib_ruser),
+    .s_axib_bready                        (s_axib_bready),
+    .s_axib_arid                          (s_axib_arid),
+    .s_axib_araddr                        (s_axib_araddr),
+    .s_axib_aruser                        (s_axib_aruser),
+    .s_axib_awuser                        (s_axib_awuser),
+    .s_axib_arregion                      (s_axib_arregion),
+    .s_axib_arlen                         (s_axib_arlen),
+    .s_axib_arsize                        (s_axib_arsize),
+    .s_axib_arburst                       (s_axib_arburst),
+    .s_axib_arvalid                       (s_axib_arvalid),
+    .s_axib_rready                        (s_axib_rready),
+    .s_axib_awready                       (s_axib_awready),
+    .s_axib_wready                        (s_axib_wready),
+    .s_axib_bid                           (s_axib_bid),
+    .s_axib_bresp                         (s_axib_bresp),
+    .s_axib_bvalid                        (s_axib_bvalid),
+    .s_axib_arready                       (s_axib_arready),
+    .s_axib_rid                           (s_axib_rid),
+    .s_axib_rdata                         (s_axib_rdata),
+    .s_axib_rresp                         (s_axib_rresp),
+    .s_axib_rlast                         (s_axib_rlast),
+    .s_axib_rvalid                        (s_axib_rvalid),
+
     .axis_c2h_status_drop                 (),     // output wire axis_c2h_status_drop
     .axis_c2h_status_valid                (),     // output wire axis_c2h_status_valid
     .axis_c2h_status_cmp                  (),     // output wire axis_c2h_status_cmp
diff --git a/src/qdma_subsystem/vivado_ip/axi_mm_bram.tcl b/src/qdma_subsystem/vivado_ip/axi_mm_bram.tcl
new file mode 100755
index 0000000..e541d98
--- /dev/null
+++ b/src/qdma_subsystem/vivado_ip/axi_mm_bram.tcl
@@ -0,0 +1,18 @@
+#==============================================================================
+# Copyright (C) 2023, Advanced Micro Devices, Inc. All rights reserved.
+# SPDX-License-Identifier: MIT
+#
+#==============================================================================
+set axi_mm_mem axi_mm_bram
+create_ip -name axi_bram_ctrl -vendor xilinx.com -library ip -version 4.1 -module_name $axi_mm_mem -dir ${ip_build_dir}
+set_property -dict {
+    CONFIG.DATA_WIDTH {512}
+    CONFIG.SUPPORTS_NARROW_BURST {1}
+    CONFIG.SINGLE_PORT_BRAM {0}
+    CONFIG.ECC_TYPE {0}
+    CONFIG.Component_Name {$axi_mm_mem}
+    CONFIG.BMG_INSTANCE {INTERNAL}
+    CONFIG.MEM_DEPTH {8192}
+    CONFIG.ID_WIDTH {5}
+    CONFIG.RD_CMD_OPTIMIZATION {0}
+} [get_ips $axi_mm_mem]
\ No newline at end of file
diff --git a/src/qdma_subsystem/vivado_ip/qdma_no_sriov_au200.tcl b/src/qdma_subsystem/vivado_ip/qdma_no_sriov_au200.tcl
index 07b1095..c3b90d9 100644
--- a/src/qdma_subsystem/vivado_ip/qdma_no_sriov_au200.tcl
+++ b/src/qdma_subsystem/vivado_ip/qdma_no_sriov_au200.tcl
@@ -1,23 +1,11 @@
-# *************************************************************************
+#==============================================================================
+# Copyright (C) 2023, Advanced Micro Devices, Inc. All rights reserved.
+# SPDX-License-Identifier: MIT
 #
-# Copyright 2020 Xilinx, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-# *************************************************************************
+#==============================================================================
 set qdma qdma_no_sriov
 create_ip -name qdma -vendor xilinx.com -library ip -module_name $qdma -dir ${ip_build_dir}
-set_property -dict { 
+set_property -dict {
     CONFIG.mode_selection {Advanced}
     CONFIG.pl_link_cap_max_link_width {X16}
     CONFIG.pl_link_cap_max_link_speed {8.0_GT/s}
diff --git a/src/qdma_subsystem/vivado_ip/qdma_no_sriov_au250.tcl b/src/qdma_subsystem/vivado_ip/qdma_no_sriov_au250.tcl
index 9a87ceb..b784e21 100644
--- a/src/qdma_subsystem/vivado_ip/qdma_no_sriov_au250.tcl
+++ b/src/qdma_subsystem/vivado_ip/qdma_no_sriov_au250.tcl
@@ -1,50 +1,27 @@
-# *************************************************************************
+#==============================================================================
+# Copyright (C) 2023, Advanced Micro Devices, Inc. All rights reserved.
+# SPDX-License-Identifier: MIT
 #
-# Copyright 2020 Xilinx, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-# *************************************************************************
+#==============================================================================
 set qdma qdma_no_sriov
 create_ip -name qdma -vendor xilinx.com -library ip -module_name $qdma -dir ${ip_build_dir}
-set_property -dict { 
+set_property -dict {
     CONFIG.mode_selection {Advanced}
-    CONFIG.pl_link_cap_max_link_width {X16}
-    CONFIG.pl_link_cap_max_link_speed {8.0_GT/s}
-    CONFIG.en_transceiver_status_ports {false}
+    CONFIG.en_gt_selection {true}
+    CONFIG.csr_axilite_slave {true}
     CONFIG.dsc_byp_mode {Descriptor_bypass_and_internal}
-    CONFIG.testname {st}
-    CONFIG.pf1_pciebar2axibar_2 {0x0000000000000000}
-    CONFIG.pf2_pciebar2axibar_2 {0x0000000000000000}
-    CONFIG.pf3_pciebar2axibar_2 {0x0000000000000000}
+    CONFIG.axibar_highaddr_0 {0x000000FFFFFFFFFF}
     CONFIG.dma_reset_source_sel {Phy_Ready}
     CONFIG.pf0_bar2_scale_qdma {Megabytes}
-    CONFIG.pf0_bar2_size_qdma {4}
     CONFIG.pf1_bar2_scale_qdma {Megabytes}
-    CONFIG.pf1_bar2_size_qdma {4}
     CONFIG.pf2_bar2_scale_qdma {Megabytes}
-    CONFIG.pf2_bar2_size_qdma {4}
     CONFIG.pf3_bar2_scale_qdma {Megabytes}
-    CONFIG.pf3_bar2_size_qdma {4}
-    CONFIG.PF0_MSIX_CAP_TABLE_SIZE_qdma {009}
-    CONFIG.PF1_MSIX_CAP_TABLE_SIZE_qdma {008}
-    CONFIG.PF2_MSIX_CAP_TABLE_SIZE_qdma {008}
-    CONFIG.PF3_MSIX_CAP_TABLE_SIZE_qdma {008}
-    CONFIG.dma_intf_sel_qdma {AXI_Stream_with_Completion}
-    CONFIG.en_axi_mm_qdma {false}
-    CONFIG.SYS_RST_N_BOARD_INTERFACE {pcie_perstn}
-    CONFIG.PCIE_BOARD_INTERFACE {pci_express_x16}
-    CONFIG.xlnx_ref_board {AU250}
+    CONFIG.en_bridge_slv {true}
+    CONFIG.dma_intf_sel_qdma {AXI_MM_and_AXI_Stream_with_Completion}
+    CONFIG.en_axi_mm_qdma {true}
+    CONFIG.axibar_notranslate {false}
+    CONFIG.vdm_en {1}
 } [get_ips $qdma]
+
 set_property CONFIG.tl_pf_enable_reg $num_phys_func [get_ips $qdma]
 set_property CONFIG.num_queues $num_queue [get_ips $qdma]
diff --git a/src/qdma_subsystem/vivado_ip/qdma_no_sriov_au280.tcl b/src/qdma_subsystem/vivado_ip/qdma_no_sriov_au280.tcl
index 5bb9b5c..ee7e7a3 100644
--- a/src/qdma_subsystem/vivado_ip/qdma_no_sriov_au280.tcl
+++ b/src/qdma_subsystem/vivado_ip/qdma_no_sriov_au280.tcl
@@ -1,20 +1,8 @@
-# *************************************************************************
+#==============================================================================
+# Copyright (C) 2023, Advanced Micro Devices, Inc. All rights reserved.
+# SPDX-License-Identifier: MIT
 #
-# Copyright 2020 Xilinx, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-# *************************************************************************
+#==============================================================================
 set qdma qdma_no_sriov
 create_ip -name qdma -vendor xilinx.com -library ip -module_name $qdma -dir ${ip_build_dir}
 set_property -dict {
@@ -23,7 +11,7 @@ set_property -dict {
     CONFIG.pl_link_cap_max_link_speed {8.0_GT/s}
     CONFIG.en_transceiver_status_ports {false}
     CONFIG.dsc_byp_mode {Descriptor_bypass_and_internal}
-    CONFIG.testname {st}
+    CONFIG.testname {mm_st}
     CONFIG.pf1_pciebar2axibar_2 {0x0000000000000000}
     CONFIG.pf2_pciebar2axibar_2 {0x0000000000000000}
     CONFIG.pf3_pciebar2axibar_2 {0x0000000000000000}
@@ -40,8 +28,8 @@ set_property -dict {
     CONFIG.PF1_MSIX_CAP_TABLE_SIZE_qdma {008}
     CONFIG.PF2_MSIX_CAP_TABLE_SIZE_qdma {008}
     CONFIG.PF3_MSIX_CAP_TABLE_SIZE_qdma {008}
-    CONFIG.dma_intf_sel_qdma {AXI_Stream_with_Completion}
-    CONFIG.en_axi_mm_qdma {false}
+    CONFIG.dma_intf_sel_qdma {AXI_MM_and_AXI_Stream_with_Completion}
+    CONFIG.en_axi_mm_qdma {true}
     CONFIG.SYS_RST_N_BOARD_INTERFACE {pcie_perstn}
     CONFIG.PCIE_BOARD_INTERFACE {pci_express_x16}
     CONFIG.xlnx_ref_board {AU280}
diff --git a/src/qdma_subsystem/vivado_ip/qdma_no_sriov_au50.tcl b/src/qdma_subsystem/vivado_ip/qdma_no_sriov_au50.tcl
index 380c4dc..1e3a19e 100644
--- a/src/qdma_subsystem/vivado_ip/qdma_no_sriov_au50.tcl
+++ b/src/qdma_subsystem/vivado_ip/qdma_no_sriov_au50.tcl
@@ -1,20 +1,8 @@
-# *************************************************************************
+#==============================================================================
+# Copyright (C) 2023, Advanced Micro Devices, Inc. All rights reserved.
+# SPDX-License-Identifier: MIT
 #
-# Copyright 2020 Xilinx, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-# *************************************************************************
+#==============================================================================
 set qdma qdma_no_sriov
 create_ip -name qdma -vendor xilinx.com -library ip -module_name $qdma -dir ${ip_build_dir}
 set_property -dict {
diff --git a/src/qdma_subsystem/vivado_ip/qdma_no_sriov_soc250.tcl b/src/qdma_subsystem/vivado_ip/qdma_no_sriov_soc250.tcl
index 6b009e3..ac5b3bc 100644
--- a/src/qdma_subsystem/vivado_ip/qdma_no_sriov_soc250.tcl
+++ b/src/qdma_subsystem/vivado_ip/qdma_no_sriov_soc250.tcl
@@ -1,20 +1,8 @@
-# *************************************************************************
+#==============================================================================
+# Copyright (C) 2023, Advanced Micro Devices, Inc. All rights reserved.
+# SPDX-License-Identifier: MIT
 #
-# Copyright 2020 Xilinx, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-# *************************************************************************
+#==============================================================================
 set qdma qdma_no_sriov
 create_ip -name qdma -vendor xilinx.com -library ip -module_name $qdma -dir ${ip_build_dir}
 set_property -dict {
diff --git a/src/qdma_subsystem/vivado_ip/qdma_subsystem_axi_cdc.tcl b/src/qdma_subsystem/vivado_ip/qdma_subsystem_axi_cdc.tcl
index 7bbe0f9..aae4aaf 100644
--- a/src/qdma_subsystem/vivado_ip/qdma_subsystem_axi_cdc.tcl
+++ b/src/qdma_subsystem/vivado_ip/qdma_subsystem_axi_cdc.tcl
@@ -1,20 +1,8 @@
-# *************************************************************************
+#==============================================================================
+# Copyright (C) 2023, Advanced Micro Devices, Inc. All rights reserved.
+# SPDX-License-Identifier: MIT
 #
-# Copyright 2020 Xilinx, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-# *************************************************************************
+#==============================================================================
 set axi_clock_converter qdma_subsystem_axi_cdc
 create_ip -name axi_clock_converter -vendor xilinx.com -library ip -module_name $axi_clock_converter -dir ${ip_build_dir}
 set_property -dict {
diff --git a/src/qdma_subsystem/vivado_ip/qdma_subsystem_axi_crossbar.tcl b/src/qdma_subsystem/vivado_ip/qdma_subsystem_axi_crossbar.tcl
index 20082af..2950eb3 100644
--- a/src/qdma_subsystem/vivado_ip/qdma_subsystem_axi_crossbar.tcl
+++ b/src/qdma_subsystem/vivado_ip/qdma_subsystem_axi_crossbar.tcl
@@ -1,20 +1,8 @@
-# *************************************************************************
+#==============================================================================
+# Copyright (C) 2023, Advanced Micro Devices, Inc. All rights reserved.
+# SPDX-License-Identifier: MIT
 #
-# Copyright 2020 Xilinx, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-# *************************************************************************
+#==============================================================================
 set axi_crossbar qdma_subsystem_axi_crossbar
 create_ip -name axi_crossbar -vendor xilinx.com -library ip -module_name $axi_crossbar -dir ${ip_build_dir}
 set_property CONFIG.NUM_MI [expr {$num_phys_func + 1}] [get_ips $axi_crossbar]
@@ -24,7 +12,7 @@ for {set i 0} {$i < $num_phys_func} {incr i} {
 }
 set_property "CONFIG.M0${num_phys_func}_A00_BASE_ADDR" {0x0000000000004000} [get_ips $axi_crossbar]
 set_property "CONFIG.M0${num_phys_func}_A00_ADDR_WIDTH" {12} [get_ips $axi_crossbar]
-set_property -dict { 
+set_property -dict {
     CONFIG.PROTOCOL {AXI4LITE}
     CONFIG.CONNECTIVITY_MODE {SASD}
     CONFIG.R_REGISTER {1}
diff --git a/src/qdma_subsystem/vivado_ip/qdma_subsystem_axi_csr_cdc.tcl b/src/qdma_subsystem/vivado_ip/qdma_subsystem_axi_csr_cdc.tcl
new file mode 100755
index 0000000..9ab46fa
--- /dev/null
+++ b/src/qdma_subsystem/vivado_ip/qdma_subsystem_axi_csr_cdc.tcl
@@ -0,0 +1,22 @@
+#==============================================================================
+# Copyright (C) 2023, Advanced Micro Devices, Inc. All rights reserved.
+# SPDX-License-Identifier: MIT
+#
+#==============================================================================
+set axi_clock_converter qdma_subsystem_axi_csr_cdc
+create_ip -name axi_clock_converter -vendor xilinx.com -library ip -module_name $axi_clock_converter -dir ${ip_build_dir}
+set_property -dict {
+    CONFIG.PROTOCOL {AXI4LITE}
+    CONFIG.DATA_WIDTH {32}
+    CONFIG.ID_WIDTH {0}
+    CONFIG.AWUSER_WIDTH {0}
+    CONFIG.ARUSER_WIDTH {0}
+    CONFIG.RUSER_WIDTH {0}
+    CONFIG.WUSER_WIDTH {0}
+    CONFIG.BUSER_WIDTH {0}
+    CONFIG.SI_CLK.FREQ_HZ {125000000}
+    CONFIG.MI_CLK.FREQ_HZ {250000000}
+    CONFIG.ACLK_ASYNC {1}
+    CONFIG.SYNCHRONIZATION_STAGES {2}
+    CONFIG.ACLK_RATIO {1:2}
+} [get_ips $axi_clock_converter]
diff --git a/src/qdma_subsystem/vivado_ip/qdma_subsystem_c2h_ecc.tcl b/src/qdma_subsystem/vivado_ip/qdma_subsystem_c2h_ecc.tcl
index 0922cba..6dea586 100644
--- a/src/qdma_subsystem/vivado_ip/qdma_subsystem_c2h_ecc.tcl
+++ b/src/qdma_subsystem/vivado_ip/qdma_subsystem_c2h_ecc.tcl
@@ -1,57 +1,11 @@
-# *************************************************************************
-#    ____  ____
-#   /   /\/   /
-#  /___/  \  /
-#  \   \   \/      Copyright 2019 Xilinx, Inc. All rights reserved.
-#   \   \        This file contains confidential and proprietary
-#   /   /        information of Xilinx, Inc. and is protected under U.S.
-#  /___/   /\    and international copyright and other intellectual
-#  \   \  /  \   property laws.
-#   \___\/\___\
+#==============================================================================
+# Copyright (C) 2023, Advanced Micro Devices, Inc. All rights reserved.
+# SPDX-License-Identifier: MIT
 #
-#
-# *************************************************************************
-#
-# Disclaimer:
-#
-#       This disclaimer is not a license and does not grant any rights to
-#       the materials distributed herewith. Except as otherwise provided in
-#       a valid license issued to you by Xilinx, and to the maximum extent
-#       permitted by applicable law: (1) THESE MATERIALS ARE MADE AVAILABLE
-#       "AS IS" AND WITH ALL FAULTS, AND XILINX HEREBY DISCLAIMS ALL
-#       WARRANTIES AND CONDITIONS, EXPRESS, IMPLIED, OR STATUTORY,
-#       INCLUDING BUT NOT LIMITED TO WARRANTIES OF MERCHANTABILITY,
-#       NON-INFRINGEMENT, OR FITNESS FOR ANY PARTICULAR PURPOSE; and
-#       (2) Xilinx shall not be liable (whether in contract or tort,
-#       including negligence, or under any other theory of liability) for
-#       any loss or damage of any kind or nature related to, arising under
-#       or in connection with these materials, including for any direct, or
-#       any indirect, special, incidental, or consequential loss or damage
-#       (including loss of data, profits, goodwill, or any type of loss or
-#       damage suffered as a result of any action brought by a third party)
-#       even if such damage or loss was reasonably foreseeable or Xilinx
-#       had been advised of the possibility of the same.
-#
-# Critical Applications:
-#
-#       Xilinx products are not designed or intended to be fail-safe, or
-#       for use in any application requiring fail-safe performance, such as
-#       life-support or safety devices or systems, Class III medical
-#       devices, nuclear facilities, applications related to the deployment
-#       of airbags, or any other applications that could lead to death,
-#       personal injury, or severe property or environmental damage
-#       (individually and collectively, "Critical Applications"). Customer
-#       assumes the sole risk and liability of any use of Xilinx products
-#       in Critical Applications, subject only to applicable laws and
-#       regulations governing limitations on product liability.
-#
-# THIS COPYRIGHT NOTICE AND DISCLAIMER MUST BE RETAINED AS PART OF THIS
-# FILE AT ALL TIMES.
-#
-# *************************************************************************
+#==============================================================================
 set ecc qdma_subsystem_c2h_ecc
 create_ip -name ecc -vendor xilinx.com -library ip -module_name $ecc -dir ${ip_build_dir}
-set_property -dict { 
+set_property -dict {
     CONFIG.C_USE_CLK_ENABLE {true}
     CONFIG.C_REG_OUTPUT {true}
     CONFIG.C_REG_INPUT {false}
diff --git a/src/qdma_subsystem/vivado_ip/qdma_subsystem_clk_div.tcl b/src/qdma_subsystem/vivado_ip/qdma_subsystem_clk_div.tcl
index ee5a370..629636d 100644
--- a/src/qdma_subsystem/vivado_ip/qdma_subsystem_clk_div.tcl
+++ b/src/qdma_subsystem/vivado_ip/qdma_subsystem_clk_div.tcl
@@ -1,20 +1,8 @@
-# *************************************************************************
+#==============================================================================
+# Copyright (C) 2023, Advanced Micro Devices, Inc. All rights reserved.
+# SPDX-License-Identifier: MIT
 #
-# Copyright 2020 Xilinx, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-# *************************************************************************
+#==============================================================================
 set clk_wiz qdma_subsystem_clk_div
 create_ip -name clk_wiz -vendor xilinx.com -library ip -module_name $clk_wiz -dir ${ip_build_dir}
 set_property -dict {
diff --git a/src/qdma_subsystem/vivado_ip/vivado_ip.tcl b/src/qdma_subsystem/vivado_ip/vivado_ip.tcl
index 1159969..2e1ba7d 100644
--- a/src/qdma_subsystem/vivado_ip/vivado_ip.tcl
+++ b/src/qdma_subsystem/vivado_ip/vivado_ip.tcl
@@ -1,24 +1,14 @@
-# *************************************************************************
+#==============================================================================
+# Copyright (C) 2023, Advanced Micro Devices, Inc. All rights reserved.
+# SPDX-License-Identifier: MIT
 #
-# Copyright 2020 Xilinx, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-# *************************************************************************
+#==============================================================================
 set ips {
     qdma_no_sriov
     qdma_subsystem_clk_div
     qdma_subsystem_axi_cdc
+    qdma_subsystem_axi_csr_cdc
     qdma_subsystem_axi_crossbar
     qdma_subsystem_c2h_ecc
+    axi_mm_bram
 }
diff --git a/src/rdma_subsystem/rdma_subsystem.sv b/src/rdma_subsystem/rdma_subsystem.sv
new file mode 100644
index 0000000..82ba064
--- /dev/null
+++ b/src/rdma_subsystem/rdma_subsystem.sv
@@ -0,0 +1,672 @@
+// *************************************************************************
+//
+// Copyright 2022 Xilinx, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+//
+// *************************************************************************
+`timescale 1ns/1ps
+
+module rdma_subsystem #(
+  parameter  C_AXIS_DATA_WIDTH = 512,
+  parameter  C_AXIS_KEEP_WIDTH = 64,
+  parameter C_AXIS_IMMDT_WIDTH = 64
+) (
+  // AXIL interface for RDMA control register
+  input  [31:0] s_axil_awaddr,
+  input         s_axil_awvalid,
+  output        s_axil_awready,
+  input  [31:0] s_axil_wdata,
+  input   [3:0] s_axil_wstrb,
+  input         s_axil_wvalid,
+  output        s_axil_wready,
+  input  [31:0] s_axil_araddr,
+  input         s_axil_arvalid,
+  output        s_axil_arready,
+  output [31:0] s_axil_rdata,
+  output        s_axil_rvalid,
+  output  [1:0] s_axil_rresp,
+  input         s_axil_rready,
+  output  [1:0] s_axil_bresp,
+  output        s_axil_bvalid,
+  input         s_axil_bready,
+
+  // RDMA TX interface (including roce and non-roce packets) to CMAC TX path
+  output [C_AXIS_DATA_WIDTH-1:0] m_rdma2cmac_axis_tdata,
+  output [C_AXIS_KEEP_WIDTH-1:0] m_rdma2cmac_axis_tkeep,
+  output                         m_rdma2cmac_axis_tvalid,
+  output                         m_rdma2cmac_axis_tlast,
+  input                          m_rdma2cmac_axis_tready,
+
+  // Non-RDMA packets from QDMA TX bypassing RDMA TX
+  input  [C_AXIS_DATA_WIDTH-1:0] s_qdma2rdma_non_roce_axis_tdata,
+  input  [C_AXIS_KEEP_WIDTH-1:0] s_qdma2rdma_non_roce_axis_tkeep,
+  input                          s_qdma2rdma_non_roce_axis_tvalid,
+  input                          s_qdma2rdma_non_roce_axis_tlast,
+  output                         s_qdma2rdma_non_roce_axis_tready,
+
+  // RDMA RX interface from CMAC RX, no rx backpressure
+  input  [C_AXIS_DATA_WIDTH-1:0] s_cmac2rdma_roce_axis_tdata,
+  input  [C_AXIS_KEEP_WIDTH-1:0] s_cmac2rdma_roce_axis_tkeep,
+  input                          s_cmac2rdma_roce_axis_tvalid,
+  input                          s_cmac2rdma_roce_axis_tlast,
+  input                          s_cmac2rdma_roce_axis_tuser,
+
+  // Non-RDMA packets from CMAC RX bypassing RDMA, no rx backpressure
+  input  [C_AXIS_DATA_WIDTH-1:0] s_cmac2rdma_non_roce_axis_tdata,
+  input  [C_AXIS_KEEP_WIDTH-1:0] s_cmac2rdma_non_roce_axis_tkeep,
+  input                          s_cmac2rdma_non_roce_axis_tvalid,
+  input                          s_cmac2rdma_non_roce_axis_tlast,
+  input                          s_cmac2rdma_non_roce_axis_tuser,
+
+  // Non-RDMA packets bypassing RDMA to QDMA RX
+  output [C_AXIS_DATA_WIDTH-1:0] m_rdma2qdma_non_roce_axis_tdata,
+  output [C_AXIS_KEEP_WIDTH-1:0] m_rdma2qdma_non_roce_axis_tkeep,
+  output                         m_rdma2qdma_non_roce_axis_tvalid,
+  output                         m_rdma2qdma_non_roce_axis_tlast,
+  input                          m_rdma2qdma_non_roce_axis_tready,
+
+  // invalidate or immediate data from roce IETH/IMMDT header
+  output [C_AXIS_IMMDT_WIDTH-1:0] m_rdma2user_ieth_immdt_axis_tdata,
+  output                          m_rdma2user_ieth_immdt_axis_tlast,
+  output                          m_rdma2user_ieth_immdt_axis_tvalid,
+  input                           m_rdma2user_ieth_immdt_axis_trdy,
+
+  // RDMA AXI MM interface used to store payload from RDMA MAD, Send or Write operation
+  output           m_axi_rdma_send_write_payload_store_awid,
+  output  [63 : 0] m_axi_rdma_send_write_payload_store_awaddr,
+  output  [31 : 0] m_axi_rdma_send_write_payload_store_awuser,
+  output   [7 : 0] m_axi_rdma_send_write_payload_store_awlen,
+  output   [2 : 0] m_axi_rdma_send_write_payload_store_awsize,
+  output   [1 : 0] m_axi_rdma_send_write_payload_store_awburst,
+  output   [3 : 0] m_axi_rdma_send_write_payload_store_awcache,
+  output   [2 : 0] m_axi_rdma_send_write_payload_store_awprot,
+  output           m_axi_rdma_send_write_payload_store_awvalid,
+  input            m_axi_rdma_send_write_payload_store_awready,
+  output [511 : 0] m_axi_rdma_send_write_payload_store_wdata,
+  output  [63 : 0] m_axi_rdma_send_write_payload_store_wstrb,
+  output           m_axi_rdma_send_write_payload_store_wlast,
+  output           m_axi_rdma_send_write_payload_store_wvalid,
+  input            m_axi_rdma_send_write_payload_store_wready,
+  output           m_axi_rdma_send_write_payload_store_awlock,
+  input            m_axi_rdma_send_write_payload_store_bid,
+  input    [1 : 0] m_axi_rdma_send_write_payload_store_bresp,
+  input            m_axi_rdma_send_write_payload_store_bvalid,
+  output           m_axi_rdma_send_write_payload_store_bready,
+  output           m_axi_rdma_send_write_payload_store_arid,
+  output  [63 : 0] m_axi_rdma_send_write_payload_store_araddr,
+  output   [7 : 0] m_axi_rdma_send_write_payload_store_arlen,
+  output   [2 : 0] m_axi_rdma_send_write_payload_store_arsize,
+  output   [1 : 0] m_axi_rdma_send_write_payload_store_arburst,
+  output   [3 : 0] m_axi_rdma_send_write_payload_store_arcache,
+  output   [2 : 0] m_axi_rdma_send_write_payload_store_arprot,
+  output           m_axi_rdma_send_write_payload_store_arvalid,
+  input            m_axi_rdma_send_write_payload_store_arready,
+  input            m_axi_rdma_send_write_payload_store_rid,
+  input  [511 : 0] m_axi_rdma_send_write_payload_store_rdata,
+  input    [1 : 0] m_axi_rdma_send_write_payload_store_rresp,
+  input            m_axi_rdma_send_write_payload_store_rlast,
+  input            m_axi_rdma_send_write_payload_store_rvalid,
+  output           m_axi_rdma_send_write_payload_store_rready,
+  output           m_axi_rdma_send_write_payload_store_arlock,
+
+  // RDMA AXI MM interface used to store payload from RDMA Read response operation
+  output           m_axi_rdma_rsp_payload_awid,
+  output  [63 : 0] m_axi_rdma_rsp_payload_awaddr,
+  output   [7 : 0] m_axi_rdma_rsp_payload_awlen,
+  output   [2 : 0] m_axi_rdma_rsp_payload_awsize,
+  output   [1 : 0] m_axi_rdma_rsp_payload_awburst,
+  output   [3 : 0] m_axi_rdma_rsp_payload_awcache,
+  output   [2 : 0] m_axi_rdma_rsp_payload_awprot,
+  output           m_axi_rdma_rsp_payload_awvalid,
+  input            m_axi_rdma_rsp_payload_awready,
+  output [511 : 0] m_axi_rdma_rsp_payload_wdata,
+  output  [63 : 0] m_axi_rdma_rsp_payload_wstrb,
+  output           m_axi_rdma_rsp_payload_wlast,
+  output           m_axi_rdma_rsp_payload_wvalid,
+  input            m_axi_rdma_rsp_payload_wready,
+  output           m_axi_rdma_rsp_payload_awlock,
+  input            m_axi_rdma_rsp_payload_bid,
+  input    [1 : 0] m_axi_rdma_rsp_payload_bresp,
+  input            m_axi_rdma_rsp_payload_bvalid,
+  output           m_axi_rdma_rsp_payload_bready,
+  output           m_axi_rdma_rsp_payload_arid,
+  output  [63 : 0] m_axi_rdma_rsp_payload_araddr,
+  output   [7 : 0] m_axi_rdma_rsp_payload_arlen,
+  output   [2 : 0] m_axi_rdma_rsp_payload_arsize,
+  output   [1 : 0] m_axi_rdma_rsp_payload_arburst,
+  output   [3 : 0] m_axi_rdma_rsp_payload_arcache,
+  output   [2 : 0] m_axi_rdma_rsp_payload_arprot,
+  output           m_axi_rdma_rsp_payload_arvalid,
+  input            m_axi_rdma_rsp_payload_arready,
+  input            m_axi_rdma_rsp_payload_rid,
+  input  [511 : 0] m_axi_rdma_rsp_payload_rdata,
+  input    [1 : 0] m_axi_rdma_rsp_payload_rresp,
+  input            m_axi_rdma_rsp_payload_rlast,
+  input            m_axi_rdma_rsp_payload_rvalid,
+  output           m_axi_rdma_rsp_payload_rready,
+  output           m_axi_rdma_rsp_payload_arlock,
+
+  // RDMA AXI MM interface used to fetch WQE entries in the senq queue from DDR by the QP manager
+  output           m_axi_qp_get_wqe_awid,
+  output  [63 : 0] m_axi_qp_get_wqe_awaddr,
+  output   [7 : 0] m_axi_qp_get_wqe_awlen,
+  output   [2 : 0] m_axi_qp_get_wqe_awsize,
+  output   [1 : 0] m_axi_qp_get_wqe_awburst,
+  output   [3 : 0] m_axi_qp_get_wqe_awcache,
+  output   [2 : 0] m_axi_qp_get_wqe_awprot,
+  output           m_axi_qp_get_wqe_awvalid,
+  input            m_axi_qp_get_wqe_awready,
+  output [511 : 0] m_axi_qp_get_wqe_wdata,
+  output  [63 : 0] m_axi_qp_get_wqe_wstrb,
+  output           m_axi_qp_get_wqe_wlast,
+  output           m_axi_qp_get_wqe_wvalid,
+  input            m_axi_qp_get_wqe_wready,
+  output           m_axi_qp_get_wqe_awlock,
+  input            m_axi_qp_get_wqe_bid,
+  input    [1 : 0] m_axi_qp_get_wqe_bresp,
+  input            m_axi_qp_get_wqe_bvalid,
+  output           m_axi_qp_get_wqe_bready,
+  output           m_axi_qp_get_wqe_arid,
+  output  [63 : 0] m_axi_qp_get_wqe_araddr,
+  output   [7 : 0] m_axi_qp_get_wqe_arlen,
+  output   [2 : 0] m_axi_qp_get_wqe_arsize,
+  output   [1 : 0] m_axi_qp_get_wqe_arburst,
+  output   [3 : 0] m_axi_qp_get_wqe_arcache,
+  output   [2 : 0] m_axi_qp_get_wqe_arprot,
+  output           m_axi_qp_get_wqe_arvalid,
+  input            m_axi_qp_get_wqe_arready,
+  input            m_axi_qp_get_wqe_rid,
+  input  [511 : 0] m_axi_qp_get_wqe_rdata,
+  input    [1 : 0] m_axi_qp_get_wqe_rresp,
+  input            m_axi_qp_get_wqe_rlast,
+  input            m_axi_qp_get_wqe_rvalid,
+  output           m_axi_qp_get_wqe_rready,
+  output           m_axi_qp_get_wqe_arlock,
+
+  // RDMA AXI MM interface used to store payload of an outgoing RDMA write packet to a retry buffer
+  output           m_axi_payload_to_retry_buf_awid,
+  output  [63 : 0] m_axi_payload_to_retry_buf_awaddr,
+  output   [7 : 0] m_axi_payload_to_retry_buf_awlen,
+  output   [2 : 0] m_axi_payload_to_retry_buf_awsize,
+  output   [1 : 0] m_axi_payload_to_retry_buf_awburst,
+  output   [3 : 0] m_axi_payload_to_retry_buf_awcache,
+  output   [2 : 0] m_axi_payload_to_retry_buf_awprot,
+  output           m_axi_payload_to_retry_buf_awvalid,
+  input            m_axi_payload_to_retry_buf_awready,
+  output [511 : 0] m_axi_payload_to_retry_buf_wdata,
+  output  [63 : 0] m_axi_payload_to_retry_buf_wstrb,
+  output           m_axi_payload_to_retry_buf_wlast,
+  output           m_axi_payload_to_retry_buf_wvalid,
+  input            m_axi_payload_to_retry_buf_wready,
+  output           m_axi_payload_to_retry_buf_awlock,
+  input            m_axi_payload_to_retry_buf_bid,
+  input    [1 : 0] m_axi_payload_to_retry_buf_bresp,
+  input            m_axi_payload_to_retry_buf_bvalid,
+  output           m_axi_payload_to_retry_buf_bready,
+  output           m_axi_payload_to_retry_buf_arid,
+  output  [63 : 0] m_axi_payload_to_retry_buf_araddr,
+  output   [7 : 0] m_axi_payload_to_retry_buf_arlen,
+  output   [2 : 0] m_axi_payload_to_retry_buf_arsize,
+  output   [1 : 0] m_axi_payload_to_retry_buf_arburst,
+  output   [3 : 0] m_axi_payload_to_retry_buf_arcache,
+  output   [2 : 0] m_axi_payload_to_retry_buf_arprot,
+  output           m_axi_payload_to_retry_buf_arvalid,
+  input            m_axi_payload_to_retry_buf_arready,
+  input            m_axi_payload_to_retry_buf_rid,
+  input  [511 : 0] m_axi_payload_to_retry_buf_rdata,
+  input    [1 : 0] m_axi_payload_to_retry_buf_rresp,
+  input            m_axi_payload_to_retry_buf_rlast,
+  input            m_axi_payload_to_retry_buf_rvalid,
+  output           m_axi_payload_to_retry_buf_rready,
+  output           m_axi_payload_to_retry_buf_arlock,
+
+  // RDMA AXI MM interface used to get payload of an outgoing RDMA send/write and read response packets
+  output           m_axi_pktgen_get_payload_awid,
+  output  [63 : 0] m_axi_pktgen_get_payload_awaddr,
+  output   [7 : 0] m_axi_pktgen_get_payload_awlen,
+  output   [2 : 0] m_axi_pktgen_get_payload_awsize,
+  output   [1 : 0] m_axi_pktgen_get_payload_awburst,
+  output   [3 : 0] m_axi_pktgen_get_payload_awcache,
+  output   [2 : 0] m_axi_pktgen_get_payload_awprot,
+  output           m_axi_pktgen_get_payload_awvalid,
+  input            m_axi_pktgen_get_payload_awready,
+  output [511 : 0] m_axi_pktgen_get_payload_wdata,
+  output  [63 : 0] m_axi_pktgen_get_payload_wstrb,
+  output           m_axi_pktgen_get_payload_wlast,
+  output           m_axi_pktgen_get_payload_wvalid,
+  input            m_axi_pktgen_get_payload_wready,
+  output           m_axi_pktgen_get_payload_awlock,
+  input            m_axi_pktgen_get_payload_bid,
+  input    [1 : 0] m_axi_pktgen_get_payload_bresp,
+  input            m_axi_pktgen_get_payload_bvalid,
+  output           m_axi_pktgen_get_payload_bready,
+  output           m_axi_pktgen_get_payload_arid,
+  output  [63 : 0] m_axi_pktgen_get_payload_araddr,
+  output   [7 : 0] m_axi_pktgen_get_payload_arlen,
+  output   [2 : 0] m_axi_pktgen_get_payload_arsize,
+  output   [1 : 0] m_axi_pktgen_get_payload_arburst,
+  output   [3 : 0] m_axi_pktgen_get_payload_arcache,
+  output   [2 : 0] m_axi_pktgen_get_payload_arprot,
+  output           m_axi_pktgen_get_payload_arvalid,
+  input            m_axi_pktgen_get_payload_arready,
+  input            m_axi_pktgen_get_payload_rid,
+  input  [511 : 0] m_axi_pktgen_get_payload_rdata,
+  input    [1 : 0] m_axi_pktgen_get_payload_rresp,
+  input            m_axi_pktgen_get_payload_rlast,
+  input            m_axi_pktgen_get_payload_rvalid,
+  output           m_axi_pktgen_get_payload_rready,
+  output           m_axi_pktgen_get_payload_arlock,
+
+  // RDMA AXI MM interface used to write completion entries to a completion queue in the DDR
+  output           m_axi_write_completion_awid,
+  output  [63 : 0] m_axi_write_completion_awaddr,
+  output   [7 : 0] m_axi_write_completion_awlen,
+  output   [2 : 0] m_axi_write_completion_awsize,
+  output   [1 : 0] m_axi_write_completion_awburst,
+  output   [3 : 0] m_axi_write_completion_awcache,
+  output   [2 : 0] m_axi_write_completion_awprot,
+  output           m_axi_write_completion_awvalid,
+  input            m_axi_write_completion_awready,
+  output [511 : 0] m_axi_write_completion_wdata,
+  output  [63 : 0] m_axi_write_completion_wstrb,
+  output           m_axi_write_completion_wlast,
+  output           m_axi_write_completion_wvalid,
+  input            m_axi_write_completion_wready,
+  output           m_axi_write_completion_awlock,
+  input            m_axi_write_completion_bid,
+  input    [1 : 0] m_axi_write_completion_bresp,
+  input            m_axi_write_completion_bvalid,
+  output           m_axi_write_completion_bready,
+  output           m_axi_write_completion_arid,
+  output  [63 : 0] m_axi_write_completion_araddr,
+  output   [7 : 0] m_axi_write_completion_arlen,
+  output   [2 : 0] m_axi_write_completion_arsize,
+  output   [1 : 0] m_axi_write_completion_arburst,
+  output   [3 : 0] m_axi_write_completion_arcache,
+  output   [2 : 0] m_axi_write_completion_arprot,
+  output           m_axi_write_completion_arvalid,
+  input            m_axi_write_completion_arready,
+  input            m_axi_write_completion_rid,
+  input  [511 : 0] m_axi_write_completion_rdata,
+  input    [1 : 0] m_axi_write_completion_rresp,
+  input            m_axi_write_completion_rlast,
+  input            m_axi_write_completion_rvalid,
+  output           m_axi_write_completion_rready,
+  output           m_axi_write_completion_arlock,
+
+  // Send WQE completion queue doorbell
+  output           resp_hndler_o_send_cq_db_cnt_valid,
+  output     [9:0] resp_hndler_o_send_cq_db_addr,
+  output    [31:0] resp_hndler_o_send_cq_db_cnt,
+  input            resp_hndler_i_send_cq_db_rdy,
+
+  // Send WQE producer index doorbell
+  input     [15:0] i_qp_sq_pidb_hndshk,
+  input     [31:0] i_qp_sq_pidb_wr_addr_hndshk,
+  input            i_qp_sq_pidb_wr_valid_hndshk,
+  output           o_qp_sq_pidb_wr_rdy,
+
+  // RDMA-Send consumer index doorbell
+  input     [15:0] i_qp_rq_cidb_hndshk,
+  input     [31:0] i_qp_rq_cidb_wr_addr_hndshk,
+  input            i_qp_rq_cidb_wr_valid_hndshk,
+  output           o_qp_rq_cidb_wr_rdy,
+
+  // RDMA-Send producer index doorbell
+  output    [31:0] rx_pkt_hndler_o_rq_db_data,
+  output     [9:0] rx_pkt_hndler_o_rq_db_addr,
+  output           rx_pkt_hndler_o_rq_db_data_valid,
+  input            rx_pkt_hndler_i_rq_db_rdy,
+
+  output           rnic_intr,
+  input      [8:0] stat_rx_pause_req,
+  output     [8:0] ctl_tx_pause_req,
+  output           ctl_tx_resend_pause,
+
+  output           o_global_dbg_cnt_en,
+  output           o_global_dbg_cnt_clr,
+
+  input  axil_rstn,
+  input  axis_rstn,
+  input  axil_clk,
+  input  axis_clk,
+  output rdma_resetn_done
+);
+
+rdma_core rdma_inst (
+  .s_axi_lite_aclk                   (axil_clk),
+  .s_axi_lite_aresetn                (axil_rstn),
+  .m_axi_aclk                        (axis_clk),
+  .m_axi_aresetn                     (axis_rstn),
+  .cmac_rx_clk                       (axis_clk),
+  .cmac_rx_rst                       (~axis_rstn),
+  .cmac_tx_clk                       (axis_clk),
+  .cmac_tx_rst                       (~axis_rstn),
+  .system_resetn                     (rdma_resetn_done),
+
+  .s_axi_lite_awaddr                 (s_axil_awaddr),
+  .s_axi_lite_awready                (s_axil_awready),
+  .s_axi_lite_awvalid                (s_axil_awvalid),
+  .s_axi_lite_araddr                 (s_axil_araddr),
+  .s_axi_lite_arready                (s_axil_arready),
+  .s_axi_lite_arvalid                (s_axil_arvalid),
+  .s_axi_lite_wdata                  (s_axil_wdata),
+  .s_axi_lite_wstrb                  (s_axil_wstrb),
+  .s_axi_lite_wready                 (s_axil_wready),
+  .s_axi_lite_wvalid                 (s_axil_wvalid),
+  .s_axi_lite_rdata                  (s_axil_rdata),
+  .s_axi_lite_rresp                  (s_axil_rresp),
+  .s_axi_lite_rready                 (s_axil_rready),
+  .s_axi_lite_rvalid                 (s_axil_rvalid),
+  .s_axi_lite_bresp                  (s_axil_bresp),
+  .s_axi_lite_bready                 (s_axil_bready),
+  .s_axi_lite_bvalid                 (s_axil_bvalid),
+
+  // RDMA AXI MM interface used to store payload from RDMA MAD, Send or Write operation
+  .rx_pkt_hndler_ddr_m_axi_awid      (m_axi_rdma_send_write_payload_store_awid),
+  .rx_pkt_hndler_ddr_m_axi_awaddr    (m_axi_rdma_send_write_payload_store_awaddr),
+  .rx_pkt_hndler_ddr_m_axi_awuser    (m_axi_rdma_send_write_payload_store_awuser),
+  .rx_pkt_hndler_ddr_m_axi_awlen     (m_axi_rdma_send_write_payload_store_awlen),
+  .rx_pkt_hndler_ddr_m_axi_awsize    (m_axi_rdma_send_write_payload_store_awsize),
+  .rx_pkt_hndler_ddr_m_axi_awburst   (m_axi_rdma_send_write_payload_store_awburst),
+  .rx_pkt_hndler_ddr_m_axi_awcache   (m_axi_rdma_send_write_payload_store_awcache),
+  .rx_pkt_hndler_ddr_m_axi_awprot    (m_axi_rdma_send_write_payload_store_awprot),
+  .rx_pkt_hndler_ddr_m_axi_awvalid   (m_axi_rdma_send_write_payload_store_awvalid),
+  .rx_pkt_hndler_ddr_m_axi_awready   (m_axi_rdma_send_write_payload_store_awready),
+  .rx_pkt_hndler_ddr_m_axi_wdata     (m_axi_rdma_send_write_payload_store_wdata),
+  .rx_pkt_hndler_ddr_m_axi_wstrb     (m_axi_rdma_send_write_payload_store_wstrb),
+  .rx_pkt_hndler_ddr_m_axi_wlast     (m_axi_rdma_send_write_payload_store_wlast),
+  .rx_pkt_hndler_ddr_m_axi_wvalid    (m_axi_rdma_send_write_payload_store_wvalid),
+  .rx_pkt_hndler_ddr_m_axi_wready    (m_axi_rdma_send_write_payload_store_wready),
+  .rx_pkt_hndler_ddr_m_axi_awlock    (m_axi_rdma_send_write_payload_store_awlock),
+  .rx_pkt_hndler_ddr_m_axi_bid       (m_axi_rdma_send_write_payload_store_bid),
+  .rx_pkt_hndler_ddr_m_axi_bresp     (m_axi_rdma_send_write_payload_store_bresp),
+  .rx_pkt_hndler_ddr_m_axi_bvalid    (m_axi_rdma_send_write_payload_store_bvalid),
+  .rx_pkt_hndler_ddr_m_axi_bready    (m_axi_rdma_send_write_payload_store_bready),
+  .rx_pkt_hndler_ddr_m_axi_arid      (m_axi_rdma_send_write_payload_store_arid),
+  .rx_pkt_hndler_ddr_m_axi_araddr    (m_axi_rdma_send_write_payload_store_araddr),
+  .rx_pkt_hndler_ddr_m_axi_arlen     (m_axi_rdma_send_write_payload_store_arlen),
+  .rx_pkt_hndler_ddr_m_axi_arsize    (m_axi_rdma_send_write_payload_store_arsize),
+  .rx_pkt_hndler_ddr_m_axi_arburst   (m_axi_rdma_send_write_payload_store_arburst),
+  .rx_pkt_hndler_ddr_m_axi_arcache   (m_axi_rdma_send_write_payload_store_arcache),
+  .rx_pkt_hndler_ddr_m_axi_arprot    (m_axi_rdma_send_write_payload_store_arprot),
+  .rx_pkt_hndler_ddr_m_axi_arvalid   (m_axi_rdma_send_write_payload_store_arvalid),
+  .rx_pkt_hndler_ddr_m_axi_arready   (m_axi_rdma_send_write_payload_store_arready),
+  .rx_pkt_hndler_ddr_m_axi_rid       (m_axi_rdma_send_write_payload_store_rid),
+  .rx_pkt_hndler_ddr_m_axi_rdata     (m_axi_rdma_send_write_payload_store_rdata),
+  .rx_pkt_hndler_ddr_m_axi_rresp     (m_axi_rdma_send_write_payload_store_rresp),
+  .rx_pkt_hndler_ddr_m_axi_rlast     (m_axi_rdma_send_write_payload_store_rlast),
+  .rx_pkt_hndler_ddr_m_axi_rvalid    (m_axi_rdma_send_write_payload_store_rvalid),
+  .rx_pkt_hndler_ddr_m_axi_rready    (m_axi_rdma_send_write_payload_store_rready),
+  .rx_pkt_hndler_ddr_m_axi_arlock    (m_axi_rdma_send_write_payload_store_arlock),
+
+  // RDMA AXI MM interface used to store payload from RDMA Read response operation
+  .rx_pkt_hndler_rdrsp_m_axi_awid    (m_axi_rdma_rsp_payload_awid),
+  .rx_pkt_hndler_rdrsp_m_axi_awaddr  (m_axi_rdma_rsp_payload_awaddr),
+  .rx_pkt_hndler_rdrsp_m_axi_awlen   (m_axi_rdma_rsp_payload_awlen),
+  .rx_pkt_hndler_rdrsp_m_axi_awsize  (m_axi_rdma_rsp_payload_awsize),
+  .rx_pkt_hndler_rdrsp_m_axi_awburst (m_axi_rdma_rsp_payload_awburst),
+  .rx_pkt_hndler_rdrsp_m_axi_awcache (m_axi_rdma_rsp_payload_awcache),
+  .rx_pkt_hndler_rdrsp_m_axi_awprot  (m_axi_rdma_rsp_payload_awprot),
+  .rx_pkt_hndler_rdrsp_m_axi_awvalid (m_axi_rdma_rsp_payload_awvalid),
+  .rx_pkt_hndler_rdrsp_m_axi_awready (m_axi_rdma_rsp_payload_awready),
+  .rx_pkt_hndler_rdrsp_m_axi_wdata   (m_axi_rdma_rsp_payload_wdata),
+  .rx_pkt_hndler_rdrsp_m_axi_wstrb   (m_axi_rdma_rsp_payload_wstrb),
+  .rx_pkt_hndler_rdrsp_m_axi_wlast   (m_axi_rdma_rsp_payload_wlast),
+  .rx_pkt_hndler_rdrsp_m_axi_wvalid  (m_axi_rdma_rsp_payload_wvalid),
+  .rx_pkt_hndler_rdrsp_m_axi_wready  (m_axi_rdma_rsp_payload_wready),
+  .rx_pkt_hndler_rdrsp_m_axi_awlock  (m_axi_rdma_rsp_payload_awlock),
+  .rx_pkt_hndler_rdrsp_m_axi_bid     (m_axi_rdma_rsp_payload_bid),
+  .rx_pkt_hndler_rdrsp_m_axi_bresp   (m_axi_rdma_rsp_payload_bresp),
+  .rx_pkt_hndler_rdrsp_m_axi_bvalid  (m_axi_rdma_rsp_payload_bvalid),
+  .rx_pkt_hndler_rdrsp_m_axi_bready  (m_axi_rdma_rsp_payload_bready),
+  .rx_pkt_hndler_rdrsp_m_axi_arid    (m_axi_rdma_rsp_payload_arid),
+  .rx_pkt_hndler_rdrsp_m_axi_araddr  (m_axi_rdma_rsp_payload_araddr),
+  .rx_pkt_hndler_rdrsp_m_axi_arlen   (m_axi_rdma_rsp_payload_arlen),
+  .rx_pkt_hndler_rdrsp_m_axi_arsize  (m_axi_rdma_rsp_payload_arsize),
+  .rx_pkt_hndler_rdrsp_m_axi_arburst (m_axi_rdma_rsp_payload_arburst),
+  .rx_pkt_hndler_rdrsp_m_axi_arcache (m_axi_rdma_rsp_payload_arcache),
+  .rx_pkt_hndler_rdrsp_m_axi_arprot  (m_axi_rdma_rsp_payload_arprot),
+  .rx_pkt_hndler_rdrsp_m_axi_arvalid (m_axi_rdma_rsp_payload_arvalid),
+  .rx_pkt_hndler_rdrsp_m_axi_arready (m_axi_rdma_rsp_payload_arready),
+  .rx_pkt_hndler_rdrsp_m_axi_rid     (m_axi_rdma_rsp_payload_rid),
+  .rx_pkt_hndler_rdrsp_m_axi_rdata   (m_axi_rdma_rsp_payload_rdata),
+  .rx_pkt_hndler_rdrsp_m_axi_rresp   (m_axi_rdma_rsp_payload_rresp),
+  .rx_pkt_hndler_rdrsp_m_axi_rlast   (m_axi_rdma_rsp_payload_rlast),
+  .rx_pkt_hndler_rdrsp_m_axi_rvalid  (m_axi_rdma_rsp_payload_rvalid),
+  .rx_pkt_hndler_rdrsp_m_axi_rready  (m_axi_rdma_rsp_payload_rready),
+  .rx_pkt_hndler_rdrsp_m_axi_arlock  (m_axi_rdma_rsp_payload_arlock),
+
+  // RDMA AXI MM interface used to fetch WQE entries in the send queue from DDR by the QP manage
+  .qp_mgr_m_axi_awid                 (m_axi_qp_get_wqe_awid),
+  .qp_mgr_m_axi_awaddr               (m_axi_qp_get_wqe_awaddr),
+  .qp_mgr_m_axi_awlen                (m_axi_qp_get_wqe_awlen),
+  .qp_mgr_m_axi_awsize               (m_axi_qp_get_wqe_awsize),
+  .qp_mgr_m_axi_awburst              (m_axi_qp_get_wqe_awburst),
+  .qp_mgr_m_axi_awcache              (m_axi_qp_get_wqe_awcache),
+  .qp_mgr_m_axi_awprot               (m_axi_qp_get_wqe_awprot),
+  .qp_mgr_m_axi_awvalid              (m_axi_qp_get_wqe_awvalid),
+  .qp_mgr_m_axi_awready              (m_axi_qp_get_wqe_awready),
+  .qp_mgr_m_axi_wdata                (m_axi_qp_get_wqe_wdata),
+  .qp_mgr_m_axi_wstrb                (m_axi_qp_get_wqe_wstrb),
+  .qp_mgr_m_axi_wlast                (m_axi_qp_get_wqe_wlast),
+  .qp_mgr_m_axi_wvalid               (m_axi_qp_get_wqe_wvalid),
+  .qp_mgr_m_axi_wready               (m_axi_qp_get_wqe_wready),
+  .qp_mgr_m_axi_awlock               (m_axi_qp_get_wqe_awlock),
+  .qp_mgr_m_axi_bid                  (m_axi_qp_get_wqe_bid),
+  .qp_mgr_m_axi_bresp                (m_axi_qp_get_wqe_bresp),
+  .qp_mgr_m_axi_bvalid               (m_axi_qp_get_wqe_bvalid),
+  .qp_mgr_m_axi_bready               (m_axi_qp_get_wqe_bready),
+  .qp_mgr_m_axi_arid                 (m_axi_qp_get_wqe_arid),
+  .qp_mgr_m_axi_araddr               (m_axi_qp_get_wqe_araddr),
+  .qp_mgr_m_axi_arlen                (m_axi_qp_get_wqe_arlen),
+  .qp_mgr_m_axi_arsize               (m_axi_qp_get_wqe_arsize),
+  .qp_mgr_m_axi_arburst              (m_axi_qp_get_wqe_arburst),
+  .qp_mgr_m_axi_arcache              (m_axi_qp_get_wqe_arcache),
+  .qp_mgr_m_axi_arprot               (m_axi_qp_get_wqe_arprot),
+  .qp_mgr_m_axi_arvalid              (m_axi_qp_get_wqe_arvalid),
+  .qp_mgr_m_axi_arready              (m_axi_qp_get_wqe_arready),
+  .qp_mgr_m_axi_rid                  (m_axi_qp_get_wqe_rid),
+  .qp_mgr_m_axi_rdata                (m_axi_qp_get_wqe_rdata),
+  .qp_mgr_m_axi_rresp                (m_axi_qp_get_wqe_rresp),
+  .qp_mgr_m_axi_rlast                (m_axi_qp_get_wqe_rlast),
+  .qp_mgr_m_axi_rvalid               (m_axi_qp_get_wqe_rvalid),
+  .qp_mgr_m_axi_rready               (m_axi_qp_get_wqe_rready),
+  .qp_mgr_m_axi_arlock               (m_axi_qp_get_wqe_arlock),
+
+  // RDMA TX interface to CMAC TX path in AXIS format
+  .cmac_m_axis_tdata                 (m_rdma2cmac_axis_tdata),
+  .cmac_m_axis_tkeep                 (m_rdma2cmac_axis_tkeep),
+  .cmac_m_axis_tvalid                (m_rdma2cmac_axis_tvalid),
+  .cmac_m_axis_tlast                 (m_rdma2cmac_axis_tlast),
+  .cmac_m_axis_tready                (m_rdma2cmac_axis_tready),
+
+  // store payload of an outgoing RDMA write packet to a retry buffer
+  .wqe_proc_wr_ddr_m_axi_awid        (m_axi_payload_to_retry_buf_awid),
+  .wqe_proc_wr_ddr_m_axi_awaddr      (m_axi_payload_to_retry_buf_awaddr),
+  .wqe_proc_wr_ddr_m_axi_awlen       (m_axi_payload_to_retry_buf_awlen),
+  .wqe_proc_wr_ddr_m_axi_awsize      (m_axi_payload_to_retry_buf_awsize),
+  .wqe_proc_wr_ddr_m_axi_awburst     (m_axi_payload_to_retry_buf_awburst),
+  .wqe_proc_wr_ddr_m_axi_awcache     (m_axi_payload_to_retry_buf_awcache),
+  .wqe_proc_wr_ddr_m_axi_awprot      (m_axi_payload_to_retry_buf_awprot),
+  .wqe_proc_wr_ddr_m_axi_awvalid     (m_axi_payload_to_retry_buf_awvalid),
+  .wqe_proc_wr_ddr_m_axi_awready     (m_axi_payload_to_retry_buf_awready),
+  .wqe_proc_wr_ddr_m_axi_wdata       (m_axi_payload_to_retry_buf_wdata),
+  .wqe_proc_wr_ddr_m_axi_wstrb       (m_axi_payload_to_retry_buf_wstrb),
+  .wqe_proc_wr_ddr_m_axi_wlast       (m_axi_payload_to_retry_buf_wlast),
+  .wqe_proc_wr_ddr_m_axi_wvalid      (m_axi_payload_to_retry_buf_wvalid),
+  .wqe_proc_wr_ddr_m_axi_wready      (m_axi_payload_to_retry_buf_wready),
+  .wqe_proc_wr_ddr_m_axi_awlock      (m_axi_payload_to_retry_buf_awlock),
+  .wqe_proc_wr_ddr_m_axi_bid         (m_axi_payload_to_retry_buf_bid),
+  .wqe_proc_wr_ddr_m_axi_bresp       (m_axi_payload_to_retry_buf_bresp),
+  .wqe_proc_wr_ddr_m_axi_bvalid      (m_axi_payload_to_retry_buf_bvalid),
+  .wqe_proc_wr_ddr_m_axi_bready      (m_axi_payload_to_retry_buf_bready),
+  .wqe_proc_wr_ddr_m_axi_arid        (m_axi_payload_to_retry_buf_arid),
+  .wqe_proc_wr_ddr_m_axi_araddr      (m_axi_payload_to_retry_buf_araddr),
+  .wqe_proc_wr_ddr_m_axi_arlen       (m_axi_payload_to_retry_buf_arlen),
+  .wqe_proc_wr_ddr_m_axi_arsize      (m_axi_payload_to_retry_buf_arsize),
+  .wqe_proc_wr_ddr_m_axi_arburst     (m_axi_payload_to_retry_buf_arburst),
+  .wqe_proc_wr_ddr_m_axi_arcache     (m_axi_payload_to_retry_buf_arcache),
+  .wqe_proc_wr_ddr_m_axi_arprot      (m_axi_payload_to_retry_buf_arprot),
+  .wqe_proc_wr_ddr_m_axi_arvalid     (m_axi_payload_to_retry_buf_arvalid),
+  .wqe_proc_wr_ddr_m_axi_arready     (m_axi_payload_to_retry_buf_arready),
+  .wqe_proc_wr_ddr_m_axi_rid         (m_axi_payload_to_retry_buf_rid),
+  .wqe_proc_wr_ddr_m_axi_rdata       (m_axi_payload_to_retry_buf_rdata),
+  .wqe_proc_wr_ddr_m_axi_rresp       (m_axi_payload_to_retry_buf_rresp),
+  .wqe_proc_wr_ddr_m_axi_rlast       (m_axi_payload_to_retry_buf_rlast),
+  .wqe_proc_wr_ddr_m_axi_rvalid      (m_axi_payload_to_retry_buf_rvalid),
+  .wqe_proc_wr_ddr_m_axi_rready      (m_axi_payload_to_retry_buf_rready),
+  .wqe_proc_wr_ddr_m_axi_arlock      (m_axi_payload_to_retry_buf_arlock),
+
+  // Acquire payload data for RDMA send/write/read response packet generation
+  .wqe_proc_top_m_axi_awid           (m_axi_pktgen_get_payload_awid),
+  .wqe_proc_top_m_axi_awaddr         (m_axi_pktgen_get_payload_awaddr),
+  .wqe_proc_top_m_axi_awlen          (m_axi_pktgen_get_payload_awlen),
+  .wqe_proc_top_m_axi_awsize         (m_axi_pktgen_get_payload_awsize),
+  .wqe_proc_top_m_axi_awburst        (m_axi_pktgen_get_payload_awburst),
+  .wqe_proc_top_m_axi_awcache        (m_axi_pktgen_get_payload_awcache),
+  .wqe_proc_top_m_axi_awprot         (m_axi_pktgen_get_payload_awprot),
+  .wqe_proc_top_m_axi_awvalid        (m_axi_pktgen_get_payload_awvalid),
+  .wqe_proc_top_m_axi_awready        (m_axi_pktgen_get_payload_awready),
+  .wqe_proc_top_m_axi_wdata          (m_axi_pktgen_get_payload_wdata),
+  .wqe_proc_top_m_axi_wstrb          (m_axi_pktgen_get_payload_wstrb),
+  .wqe_proc_top_m_axi_wlast          (m_axi_pktgen_get_payload_wlast),
+  .wqe_proc_top_m_axi_wvalid         (m_axi_pktgen_get_payload_wvalid),
+  .wqe_proc_top_m_axi_wready         (m_axi_pktgen_get_payload_wready),
+  .wqe_proc_top_m_axi_awlock         (m_axi_pktgen_get_payload_awlock),
+  .wqe_proc_top_m_axi_bid            (m_axi_pktgen_get_payload_bid),
+  .wqe_proc_top_m_axi_bresp          (m_axi_pktgen_get_payload_bresp),
+  .wqe_proc_top_m_axi_bvalid         (m_axi_pktgen_get_payload_bvalid),
+  .wqe_proc_top_m_axi_bready         (m_axi_pktgen_get_payload_bready),
+  .wqe_proc_top_m_axi_arid           (m_axi_pktgen_get_payload_arid),
+  .wqe_proc_top_m_axi_araddr         (m_axi_pktgen_get_payload_araddr),
+  .wqe_proc_top_m_axi_arlen          (m_axi_pktgen_get_payload_arlen),
+  .wqe_proc_top_m_axi_arsize         (m_axi_pktgen_get_payload_arsize),
+  .wqe_proc_top_m_axi_arburst        (m_axi_pktgen_get_payload_arburst),
+  .wqe_proc_top_m_axi_arcache        (m_axi_pktgen_get_payload_arcache),
+  .wqe_proc_top_m_axi_arprot         (m_axi_pktgen_get_payload_arprot),
+  .wqe_proc_top_m_axi_arvalid        (m_axi_pktgen_get_payload_arvalid),
+  .wqe_proc_top_m_axi_arready        (m_axi_pktgen_get_payload_arready),
+  .wqe_proc_top_m_axi_rid            (m_axi_pktgen_get_payload_rid),
+  .wqe_proc_top_m_axi_rdata          (m_axi_pktgen_get_payload_rdata),
+  .wqe_proc_top_m_axi_rresp          (m_axi_pktgen_get_payload_rresp),
+  .wqe_proc_top_m_axi_rlast          (m_axi_pktgen_get_payload_rlast),
+  .wqe_proc_top_m_axi_rvalid         (m_axi_pktgen_get_payload_rvalid),
+  .wqe_proc_top_m_axi_rready         (m_axi_pktgen_get_payload_rready),
+  .wqe_proc_top_m_axi_arlock         (m_axi_pktgen_get_payload_arlock),
+
+  // RDMA AXI MM interface used to write completion entries to a completion queue in the DDR
+  .resp_hndler_m_axi_awid            (m_axi_write_completion_awid),
+  .resp_hndler_m_axi_awaddr          (m_axi_write_completion_awaddr),
+  .resp_hndler_m_axi_awlen           (m_axi_write_completion_awlen),
+  .resp_hndler_m_axi_awsize          (m_axi_write_completion_awsize),
+  .resp_hndler_m_axi_awburst         (m_axi_write_completion_awburst),
+  .resp_hndler_m_axi_awcache         (m_axi_write_completion_awcache),
+  .resp_hndler_m_axi_awprot          (m_axi_write_completion_awprot),
+  .resp_hndler_m_axi_awvalid         (m_axi_write_completion_awvalid),
+  .resp_hndler_m_axi_awready         (m_axi_write_completion_awready),
+  .resp_hndler_m_axi_wdata           (m_axi_write_completion_wdata),
+  .resp_hndler_m_axi_wstrb           (m_axi_write_completion_wstrb),
+  .resp_hndler_m_axi_wlast           (m_axi_write_completion_wlast),
+  .resp_hndler_m_axi_wvalid          (m_axi_write_completion_wvalid),
+  .resp_hndler_m_axi_wready          (m_axi_write_completion_wready),
+  .resp_hndler_m_axi_awlock          (m_axi_write_completion_awlock),
+  .resp_hndler_m_axi_bid             (m_axi_write_completion_bid),
+  .resp_hndler_m_axi_bresp           (m_axi_write_completion_bresp),
+  .resp_hndler_m_axi_bvalid          (m_axi_write_completion_bvalid),
+  .resp_hndler_m_axi_bready          (m_axi_write_completion_bready),
+  .resp_hndler_m_axi_arid            (m_axi_write_completion_arid),
+  .resp_hndler_m_axi_araddr          (m_axi_write_completion_araddr),
+  .resp_hndler_m_axi_arlen           (m_axi_write_completion_arlen),
+  .resp_hndler_m_axi_arsize          (m_axi_write_completion_arsize),
+  .resp_hndler_m_axi_arburst         (m_axi_write_completion_arburst),
+  .resp_hndler_m_axi_arcache         (m_axi_write_completion_arcache),
+  .resp_hndler_m_axi_arprot          (m_axi_write_completion_arprot),
+  .resp_hndler_m_axi_arvalid         (m_axi_write_completion_arvalid),
+  .resp_hndler_m_axi_arready         (m_axi_write_completion_arready),
+  .resp_hndler_m_axi_rid             (m_axi_write_completion_rid),
+  .resp_hndler_m_axi_rdata           (m_axi_write_completion_rdata),
+  .resp_hndler_m_axi_rresp           (m_axi_write_completion_rresp),
+  .resp_hndler_m_axi_rlast           (m_axi_write_completion_rlast),
+  .resp_hndler_m_axi_rvalid          (m_axi_write_completion_rvalid),
+  .resp_hndler_m_axi_rready          (m_axi_write_completion_rready),
+  .resp_hndler_m_axi_arlock          (m_axi_write_completion_arlock),
+
+  // Send WQE completion queue doorbell
+  .resp_hndler_o_send_cq_db_cnt_valid(resp_hndler_o_send_cq_db_cnt_valid),
+  .resp_hndler_o_send_cq_db_addr     (resp_hndler_o_send_cq_db_addr),
+  .resp_hndler_o_send_cq_db_cnt      (resp_hndler_o_send_cq_db_cnt),
+  .resp_hndler_i_send_cq_db_rdy      (resp_hndler_i_send_cq_db_rdy),
+
+  // RDMA-Send consumer index doorbell
+  .i_qp_rq_cidb_hndshk               (i_qp_rq_cidb_hndshk),
+  .i_qp_rq_cidb_wr_addr_hndshk       (i_qp_rq_cidb_wr_addr_hndshk),
+  .i_qp_rq_cidb_wr_valid_hndshk      (i_qp_rq_cidb_wr_valid_hndshk),
+  .o_qp_rq_cidb_wr_rdy               (o_qp_rq_cidb_wr_rdy),
+
+  // Send WQE producer index doorbell
+  .i_qp_sq_pidb_hndshk               (i_qp_sq_pidb_hndshk),
+  .i_qp_sq_pidb_wr_addr_hndshk       (i_qp_sq_pidb_wr_addr_hndshk),
+  .i_qp_sq_pidb_wr_valid_hndshk      (i_qp_sq_pidb_wr_valid_hndshk),
+  .o_qp_sq_pidb_wr_rdy               (o_qp_sq_pidb_wr_rdy),
+
+  // RDMA-Send producer index doorbell
+  .rx_pkt_hndler_o_rq_db_data        (rx_pkt_hndler_o_rq_db_data),
+  .rx_pkt_hndler_o_rq_db_addr        (rx_pkt_hndler_o_rq_db_addr),
+  .rx_pkt_hndler_o_rq_db_data_valid  (rx_pkt_hndler_o_rq_db_data_valid),
+  .rx_pkt_hndler_i_rq_db_rdy         (rx_pkt_hndler_i_rq_db_rdy),
+
+  // RDMA RX interface from CMAC RX path in AXIS format
+  .roce_cmac_s_axis_tvalid           (s_cmac2rdma_roce_axis_tvalid),
+  .roce_cmac_s_axis_tdata            (s_cmac2rdma_roce_axis_tdata),
+  .roce_cmac_s_axis_tkeep            (s_cmac2rdma_roce_axis_tkeep),
+  .roce_cmac_s_axis_tlast            (s_cmac2rdma_roce_axis_tlast),
+  .roce_cmac_s_axis_tuser            (s_cmac2rdma_roce_axis_tuser),
+
+  // Non-RDMA packets from CMAC RX path in AXIS format
+  .non_roce_cmac_s_axis_tvalid       (s_cmac2rdma_non_roce_axis_tvalid),
+  .non_roce_cmac_s_axis_tdata        (s_cmac2rdma_non_roce_axis_tdata),
+  .non_roce_cmac_s_axis_tkeep        (s_cmac2rdma_non_roce_axis_tkeep),
+  .non_roce_cmac_s_axis_tlast        (s_cmac2rdma_non_roce_axis_tlast),
+  .non_roce_cmac_s_axis_tuser        (s_cmac2rdma_non_roce_axis_tuser),
+
+  // Non-RDMA packets from QDMA TX path in AXIS format bypassing RDMA core
+  .non_roce_dma_s_axis_tvalid        (s_qdma2rdma_non_roce_axis_tvalid),
+  .non_roce_dma_s_axis_tdata         (s_qdma2rdma_non_roce_axis_tdata),
+  .non_roce_dma_s_axis_tkeep         (s_qdma2rdma_non_roce_axis_tkeep),
+  .non_roce_dma_s_axis_tlast         (s_qdma2rdma_non_roce_axis_tlast),
+  .non_roce_dma_s_axis_tready        (s_qdma2rdma_non_roce_axis_tready),
+
+  // Non-RDMA packets in AXIS format from CMAC RX path bypassing RDMA core to QDMA RX
+  .non_roce_dma_m_axis_tvalid        (m_rdma2qdma_non_roce_axis_tvalid),
+  .non_roce_dma_m_axis_tdata         (m_rdma2qdma_non_roce_axis_tdata),
+  .non_roce_dma_m_axis_tkeep         (m_rdma2qdma_non_roce_axis_tkeep),
+  .non_roce_dma_m_axis_tlast         (m_rdma2qdma_non_roce_axis_tlast),
+  .non_roce_dma_m_axis_tready        (m_rdma2qdma_non_roce_axis_tready),
+
+  // invalidate or immediate data from roce IETH/IMMDT header
+  .ieth_immdt_axis_tvalid            (m_rdma2user_ieth_immdt_axis_tvalid),
+  .ieth_immdt_axis_tlast             (m_rdma2user_ieth_immdt_axis_tlast),
+  .ieth_immdt_axis_tdata             (m_rdma2user_ieth_immdt_axis_tdata),
+  .ieth_immdt_axis_trdy              (m_rdma2user_ieth_immdt_axis_trdy),
+
+  .rnic_intr                         (rnic_intr),
+  .stat_rx_pause_req                 (stat_rx_pause_req),
+  .ctl_tx_pause_req                  (ctl_tx_pause_req),
+  .ctl_tx_resend_pause               (ctl_tx_resend_pause),
+  .o_global_dbg_cnt_en               (o_global_dbg_cnt_en),
+  .o_global_dbg_cnt_clr              (o_global_dbg_cnt_clr)
+);
+
+endmodule : rdma_subsystem
diff --git a/src/rdma_subsystem/rdma_subsystem_wrapper.sv b/src/rdma_subsystem/rdma_subsystem_wrapper.sv
new file mode 100644
index 0000000..a927ab4
--- /dev/null
+++ b/src/rdma_subsystem/rdma_subsystem_wrapper.sv
@@ -0,0 +1,701 @@
+// *************************************************************************
+//
+// Copyright 2022 Xilinx, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+//
+// *************************************************************************
+//
+// rdma_subsystem_wrapper
+// -- wrapper for the rdma subsystem
+// -- retry buffer and doorbell update from user logic are disabled at the
+//    moment. We will add these features in the future version
+//
+// *************************************************************************
+`timescale 1ns/1ps
+
+module rdma_subsystem_wrapper #(
+  parameter C_AXIS_DATA_WIDTH  = 512,
+  parameter C_AXIS_KEEP_WIDTH  = 64,
+  parameter C_AXIS_IMMDT_WIDTH = 64
+) (
+  // AXIL interface for RDMA control register
+  (* mark_debug = "true" *) input  [31:0] s_axil_awaddr,
+  (* mark_debug = "true" *) input         s_axil_awvalid,
+  (* mark_debug = "true" *) output        s_axil_awready,
+  (* mark_debug = "true" *) input  [31:0] s_axil_wdata,
+  (* mark_debug = "true" *) input   [3:0] s_axil_wstrb,
+  (* mark_debug = "true" *) input         s_axil_wvalid,
+  (* mark_debug = "true" *) output        s_axil_wready,
+  (* mark_debug = "true" *) input  [31:0] s_axil_araddr,
+  (* mark_debug = "true" *) input         s_axil_arvalid,
+  (* mark_debug = "true" *) output        s_axil_arready,
+  (* mark_debug = "true" *) output [31:0] s_axil_rdata,
+  (* mark_debug = "true" *) output        s_axil_rvalid,
+  (* mark_debug = "true" *) output  [1:0] s_axil_rresp,
+  (* mark_debug = "true" *) input         s_axil_rready,
+  (* mark_debug = "true" *) output  [1:0] s_axil_bresp,
+  (* mark_debug = "true" *) output        s_axil_bvalid,
+  (* mark_debug = "true" *) input         s_axil_bready,
+
+  // RDMA TX interface (including roce and non-roce packets) to CMAC TX path
+  output [C_AXIS_DATA_WIDTH-1:0] m_rdma2cmac_axis_tdata,
+  output [C_AXIS_KEEP_WIDTH-1:0] m_rdma2cmac_axis_tkeep,
+  output                         m_rdma2cmac_axis_tvalid,
+  output                         m_rdma2cmac_axis_tlast,
+  input                          m_rdma2cmac_axis_tready,
+
+  // Non-RDMA packets from QDMA TX bypassing RDMA TX
+  input  [C_AXIS_DATA_WIDTH-1:0] s_qdma2rdma_non_roce_axis_tdata,
+  input  [C_AXIS_KEEP_WIDTH-1:0] s_qdma2rdma_non_roce_axis_tkeep,
+  input                          s_qdma2rdma_non_roce_axis_tvalid,
+  input                          s_qdma2rdma_non_roce_axis_tlast,
+  output                         s_qdma2rdma_non_roce_axis_tready,
+
+  // RDMA RX interface from CMAC RX, no rx backpressure
+  input  [C_AXIS_DATA_WIDTH-1:0] s_cmac2rdma_roce_axis_tdata,
+  input  [C_AXIS_KEEP_WIDTH-1:0] s_cmac2rdma_roce_axis_tkeep,
+  input                          s_cmac2rdma_roce_axis_tvalid,
+  input                          s_cmac2rdma_roce_axis_tlast,
+  input                          s_cmac2rdma_roce_axis_tuser,
+
+  // Non-RDMA packets from CMAC RX bypassing RDMA, no rx backpressure
+  input  [C_AXIS_DATA_WIDTH-1:0] s_cmac2rdma_non_roce_axis_tdata,
+  input  [C_AXIS_KEEP_WIDTH-1:0] s_cmac2rdma_non_roce_axis_tkeep,
+  input                          s_cmac2rdma_non_roce_axis_tvalid,
+  input                          s_cmac2rdma_non_roce_axis_tlast,
+  input                          s_cmac2rdma_non_roce_axis_tuser,
+
+  // Non-RDMA packets bypassing RDMA to QDMA RX
+  output [C_AXIS_DATA_WIDTH-1:0] m_rdma2qdma_non_roce_axis_tdata,
+  output [C_AXIS_KEEP_WIDTH-1:0] m_rdma2qdma_non_roce_axis_tkeep,
+  output                         m_rdma2qdma_non_roce_axis_tvalid,
+  output                         m_rdma2qdma_non_roce_axis_tlast,
+  input                          m_rdma2qdma_non_roce_axis_tready,
+
+  // invalidate or immediate data from roce IETH/IMMDT header
+  output [C_AXIS_IMMDT_WIDTH-1:0] m_rdma2user_ieth_immdt_axis_tdata,
+  output                          m_rdma2user_ieth_immdt_axis_tlast,
+  output                          m_rdma2user_ieth_immdt_axis_tvalid,
+  input                           m_rdma2user_ieth_immdt_axis_trdy,
+
+  // RDMA AXI MM interface used to store payload from RDMA MAD, Send or Write operation
+  output           m_axi_rdma_send_write_payload_store_awid,
+  output  [63 : 0] m_axi_rdma_send_write_payload_store_awaddr,
+  output  [31 : 0] m_axi_rdma_send_write_payload_store_awuser,
+  output   [7 : 0] m_axi_rdma_send_write_payload_store_awlen,
+  output   [2 : 0] m_axi_rdma_send_write_payload_store_awsize,
+  output   [1 : 0] m_axi_rdma_send_write_payload_store_awburst,
+  output   [3 : 0] m_axi_rdma_send_write_payload_store_awcache,
+  output   [2 : 0] m_axi_rdma_send_write_payload_store_awprot,
+  output           m_axi_rdma_send_write_payload_store_awvalid,
+  input            m_axi_rdma_send_write_payload_store_awready,
+  output [511 : 0] m_axi_rdma_send_write_payload_store_wdata,
+  output  [63 : 0] m_axi_rdma_send_write_payload_store_wstrb,
+  output           m_axi_rdma_send_write_payload_store_wlast,
+  output           m_axi_rdma_send_write_payload_store_wvalid,
+  input            m_axi_rdma_send_write_payload_store_wready,
+  output           m_axi_rdma_send_write_payload_store_awlock,
+  input            m_axi_rdma_send_write_payload_store_bid,
+  input    [1 : 0] m_axi_rdma_send_write_payload_store_bresp,
+  input            m_axi_rdma_send_write_payload_store_bvalid,
+  output           m_axi_rdma_send_write_payload_store_bready,
+  output           m_axi_rdma_send_write_payload_store_arid,
+  output  [63 : 0] m_axi_rdma_send_write_payload_store_araddr,
+  output   [7 : 0] m_axi_rdma_send_write_payload_store_arlen,
+  output   [2 : 0] m_axi_rdma_send_write_payload_store_arsize,
+  output   [1 : 0] m_axi_rdma_send_write_payload_store_arburst,
+  output   [3 : 0] m_axi_rdma_send_write_payload_store_arcache,
+  output   [2 : 0] m_axi_rdma_send_write_payload_store_arprot,
+  output           m_axi_rdma_send_write_payload_store_arvalid,
+  input            m_axi_rdma_send_write_payload_store_arready,
+  input            m_axi_rdma_send_write_payload_store_rid,
+  input  [511 : 0] m_axi_rdma_send_write_payload_store_rdata,
+  input    [1 : 0] m_axi_rdma_send_write_payload_store_rresp,
+  input            m_axi_rdma_send_write_payload_store_rlast,
+  input            m_axi_rdma_send_write_payload_store_rvalid,
+  output           m_axi_rdma_send_write_payload_store_rready,
+  output           m_axi_rdma_send_write_payload_store_arlock,
+
+  // RDMA AXI MM interface used to store payload from RDMA Read response operation
+  output           m_axi_rdma_rsp_payload_awid,
+  output  [63 : 0] m_axi_rdma_rsp_payload_awaddr,
+  output   [7 : 0] m_axi_rdma_rsp_payload_awlen,
+  output   [2 : 0] m_axi_rdma_rsp_payload_awsize,
+  output   [1 : 0] m_axi_rdma_rsp_payload_awburst,
+  output   [3 : 0] m_axi_rdma_rsp_payload_awcache,
+  output   [2 : 0] m_axi_rdma_rsp_payload_awprot,
+  output           m_axi_rdma_rsp_payload_awvalid,
+  input            m_axi_rdma_rsp_payload_awready,
+  output [511 : 0] m_axi_rdma_rsp_payload_wdata,
+  output  [63 : 0] m_axi_rdma_rsp_payload_wstrb,
+  output           m_axi_rdma_rsp_payload_wlast,
+  output           m_axi_rdma_rsp_payload_wvalid,
+  input            m_axi_rdma_rsp_payload_wready,
+  output           m_axi_rdma_rsp_payload_awlock,
+  input            m_axi_rdma_rsp_payload_bid,
+  input    [1 : 0] m_axi_rdma_rsp_payload_bresp,
+  input            m_axi_rdma_rsp_payload_bvalid,
+  output           m_axi_rdma_rsp_payload_bready,
+  output           m_axi_rdma_rsp_payload_arid,
+  output  [63 : 0] m_axi_rdma_rsp_payload_araddr,
+  output   [7 : 0] m_axi_rdma_rsp_payload_arlen,
+  output   [2 : 0] m_axi_rdma_rsp_payload_arsize,
+  output   [1 : 0] m_axi_rdma_rsp_payload_arburst,
+  output   [3 : 0] m_axi_rdma_rsp_payload_arcache,
+  output   [2 : 0] m_axi_rdma_rsp_payload_arprot,
+  output           m_axi_rdma_rsp_payload_arvalid,
+  input            m_axi_rdma_rsp_payload_arready,
+  input            m_axi_rdma_rsp_payload_rid,
+  input  [511 : 0] m_axi_rdma_rsp_payload_rdata,
+  input    [1 : 0] m_axi_rdma_rsp_payload_rresp,
+  input            m_axi_rdma_rsp_payload_rlast,
+  input            m_axi_rdma_rsp_payload_rvalid,
+  output           m_axi_rdma_rsp_payload_rready,
+  output           m_axi_rdma_rsp_payload_arlock,
+
+  // RDMA AXI MM interface used to fetch WQE entries in the senq queue from DDR by the QP manager
+  output           m_axi_qp_get_wqe_awid,
+  output  [63 : 0] m_axi_qp_get_wqe_awaddr,
+  output   [7 : 0] m_axi_qp_get_wqe_awlen,
+  output   [2 : 0] m_axi_qp_get_wqe_awsize,
+  output   [1 : 0] m_axi_qp_get_wqe_awburst,
+  output   [3 : 0] m_axi_qp_get_wqe_awcache,
+  output   [2 : 0] m_axi_qp_get_wqe_awprot,
+  output           m_axi_qp_get_wqe_awvalid,
+  input            m_axi_qp_get_wqe_awready,
+  output [511 : 0] m_axi_qp_get_wqe_wdata,
+  output  [63 : 0] m_axi_qp_get_wqe_wstrb,
+  output           m_axi_qp_get_wqe_wlast,
+  output           m_axi_qp_get_wqe_wvalid,
+  input            m_axi_qp_get_wqe_wready,
+  output           m_axi_qp_get_wqe_awlock,
+  input            m_axi_qp_get_wqe_bid,
+  input    [1 : 0] m_axi_qp_get_wqe_bresp,
+  input            m_axi_qp_get_wqe_bvalid,
+  output           m_axi_qp_get_wqe_bready,
+  output           m_axi_qp_get_wqe_arid,
+  output  [63 : 0] m_axi_qp_get_wqe_araddr,
+  output   [7 : 0] m_axi_qp_get_wqe_arlen,
+  output   [2 : 0] m_axi_qp_get_wqe_arsize,
+  output   [1 : 0] m_axi_qp_get_wqe_arburst,
+  output   [3 : 0] m_axi_qp_get_wqe_arcache,
+  output   [2 : 0] m_axi_qp_get_wqe_arprot,
+  output           m_axi_qp_get_wqe_arvalid,
+  input            m_axi_qp_get_wqe_arready,
+  input            m_axi_qp_get_wqe_rid,
+  input  [511 : 0] m_axi_qp_get_wqe_rdata,
+  input    [1 : 0] m_axi_qp_get_wqe_rresp,
+  input            m_axi_qp_get_wqe_rlast,
+  input            m_axi_qp_get_wqe_rvalid,
+  output           m_axi_qp_get_wqe_rready,
+  output           m_axi_qp_get_wqe_arlock,
+
+  // TODO: In the current implementation, we do not consider retry buffer
+  // RDMA AXI MM interface used to store payload of an outgoing RDMA write packet to a retry buffer
+  output           m_axi_payload_to_retry_buf_awid,
+  output  [63 : 0] m_axi_payload_to_retry_buf_awaddr,
+  output   [7 : 0] m_axi_payload_to_retry_buf_awlen,
+  output   [2 : 0] m_axi_payload_to_retry_buf_awsize,
+  output   [1 : 0] m_axi_payload_to_retry_buf_awburst,
+  output   [3 : 0] m_axi_payload_to_retry_buf_awcache,
+  output   [2 : 0] m_axi_payload_to_retry_buf_awprot,
+  output           m_axi_payload_to_retry_buf_awvalid,
+  input            m_axi_payload_to_retry_buf_awready,
+  output [511 : 0] m_axi_payload_to_retry_buf_wdata,
+  output  [63 : 0] m_axi_payload_to_retry_buf_wstrb,
+  output           m_axi_payload_to_retry_buf_wlast,
+  output           m_axi_payload_to_retry_buf_wvalid,
+  input            m_axi_payload_to_retry_buf_wready,
+  output           m_axi_payload_to_retry_buf_awlock,
+  input            m_axi_payload_to_retry_buf_bid,
+  input    [1 : 0] m_axi_payload_to_retry_buf_bresp,
+  input            m_axi_payload_to_retry_buf_bvalid,
+  output           m_axi_payload_to_retry_buf_bready,
+  output           m_axi_payload_to_retry_buf_arid,
+  output  [63 : 0] m_axi_payload_to_retry_buf_araddr,
+  output   [7 : 0] m_axi_payload_to_retry_buf_arlen,
+  output   [2 : 0] m_axi_payload_to_retry_buf_arsize,
+  output   [1 : 0] m_axi_payload_to_retry_buf_arburst,
+  output   [3 : 0] m_axi_payload_to_retry_buf_arcache,
+  output   [2 : 0] m_axi_payload_to_retry_buf_arprot,
+  output           m_axi_payload_to_retry_buf_arvalid,
+  input            m_axi_payload_to_retry_buf_arready,
+  input            m_axi_payload_to_retry_buf_rid,
+  input  [511 : 0] m_axi_payload_to_retry_buf_rdata,
+  input    [1 : 0] m_axi_payload_to_retry_buf_rresp,
+  input            m_axi_payload_to_retry_buf_rlast,
+  input            m_axi_payload_to_retry_buf_rvalid,
+  output           m_axi_payload_to_retry_buf_rready,
+  output           m_axi_payload_to_retry_buf_arlock,
+
+  // RDMA AXI MM interface used to get payload of an outgoing RDMA send/write and read response packets
+  output           m_axi_pktgen_get_payload_awid,
+  output  [63 : 0] m_axi_pktgen_get_payload_awaddr,
+  output   [7 : 0] m_axi_pktgen_get_payload_awlen,
+  output   [2 : 0] m_axi_pktgen_get_payload_awsize,
+  output   [1 : 0] m_axi_pktgen_get_payload_awburst,
+  output   [3 : 0] m_axi_pktgen_get_payload_awcache,
+  output   [2 : 0] m_axi_pktgen_get_payload_awprot,
+  output           m_axi_pktgen_get_payload_awvalid,
+  input            m_axi_pktgen_get_payload_awready,
+  output [511 : 0] m_axi_pktgen_get_payload_wdata,
+  output  [63 : 0] m_axi_pktgen_get_payload_wstrb,
+  output           m_axi_pktgen_get_payload_wlast,
+  output           m_axi_pktgen_get_payload_wvalid,
+  input            m_axi_pktgen_get_payload_wready,
+  output           m_axi_pktgen_get_payload_awlock,
+  input            m_axi_pktgen_get_payload_bid,
+  input    [1 : 0] m_axi_pktgen_get_payload_bresp,
+  input            m_axi_pktgen_get_payload_bvalid,
+  output           m_axi_pktgen_get_payload_bready,
+  output           m_axi_pktgen_get_payload_arid,
+  output  [63 : 0] m_axi_pktgen_get_payload_araddr,
+  output   [7 : 0] m_axi_pktgen_get_payload_arlen,
+  output   [2 : 0] m_axi_pktgen_get_payload_arsize,
+  output   [1 : 0] m_axi_pktgen_get_payload_arburst,
+  output   [3 : 0] m_axi_pktgen_get_payload_arcache,
+  output   [2 : 0] m_axi_pktgen_get_payload_arprot,
+  output           m_axi_pktgen_get_payload_arvalid,
+  input            m_axi_pktgen_get_payload_arready,
+  input            m_axi_pktgen_get_payload_rid,
+  input  [511 : 0] m_axi_pktgen_get_payload_rdata,
+  input    [1 : 0] m_axi_pktgen_get_payload_rresp,
+  input            m_axi_pktgen_get_payload_rlast,
+  input            m_axi_pktgen_get_payload_rvalid,
+  output           m_axi_pktgen_get_payload_rready,
+  output           m_axi_pktgen_get_payload_arlock,
+
+  // RDMA AXI MM interface used to write completion entries to a completion queue in the DDR
+  output           m_axi_write_completion_awid,
+  output  [63 : 0] m_axi_write_completion_awaddr,
+  output   [7 : 0] m_axi_write_completion_awlen,
+  output   [2 : 0] m_axi_write_completion_awsize,
+  output   [1 : 0] m_axi_write_completion_awburst,
+  output   [3 : 0] m_axi_write_completion_awcache,
+  output   [2 : 0] m_axi_write_completion_awprot,
+  output           m_axi_write_completion_awvalid,
+  input            m_axi_write_completion_awready,
+  output [511 : 0] m_axi_write_completion_wdata,
+  output  [63 : 0] m_axi_write_completion_wstrb,
+  output           m_axi_write_completion_wlast,
+  output           m_axi_write_completion_wvalid,
+  input            m_axi_write_completion_wready,
+  output           m_axi_write_completion_awlock,
+  input            m_axi_write_completion_bid,
+  input    [1 : 0] m_axi_write_completion_bresp,
+  input            m_axi_write_completion_bvalid,
+  output           m_axi_write_completion_bready,
+  output           m_axi_write_completion_arid,
+  output  [63 : 0] m_axi_write_completion_araddr,
+  output   [7 : 0] m_axi_write_completion_arlen,
+  output   [2 : 0] m_axi_write_completion_arsize,
+  output   [1 : 0] m_axi_write_completion_arburst,
+  output   [3 : 0] m_axi_write_completion_arcache,
+  output   [2 : 0] m_axi_write_completion_arprot,
+  output           m_axi_write_completion_arvalid,
+  input            m_axi_write_completion_arready,
+  input            m_axi_write_completion_rid,
+  input  [511 : 0] m_axi_write_completion_rdata,
+  input    [1 : 0] m_axi_write_completion_rresp,
+  input            m_axi_write_completion_rlast,
+  input            m_axi_write_completion_rvalid,
+  output           m_axi_write_completion_rready,
+  output           m_axi_write_completion_arlock,
+
+  // TODO: In the current implementation, we do not consider hardware handshaking from user logic
+  // Send WQE completion queue doorbell
+  output           resp_hndler_o_send_cq_db_cnt_valid,
+  output     [9:0] resp_hndler_o_send_cq_db_addr,
+  output    [31:0] resp_hndler_o_send_cq_db_cnt,
+  input            resp_hndler_i_send_cq_db_rdy,
+
+  // Send WQE producer index doorbell
+  input     [15:0] i_qp_sq_pidb_hndshk,
+  input     [31:0] i_qp_sq_pidb_wr_addr_hndshk,
+  input            i_qp_sq_pidb_wr_valid_hndshk,
+  output           o_qp_sq_pidb_wr_rdy,
+
+  // RDMA-Send consumer index doorbell
+  input     [15:0] i_qp_rq_cidb_hndshk,
+  input     [31:0] i_qp_rq_cidb_wr_addr_hndshk,
+  input            i_qp_rq_cidb_wr_valid_hndshk,
+  output           o_qp_rq_cidb_wr_rdy,
+
+  // RDMA-Send producer index doorbell
+  output    [31:0] rx_pkt_hndler_o_rq_db_data,
+  output     [9:0] rx_pkt_hndler_o_rq_db_addr,
+  output           rx_pkt_hndler_o_rq_db_data_valid,
+  input            rx_pkt_hndler_i_rq_db_rdy,
+
+  output           rnic_intr,
+
+  input  mod_rstn,
+  output mod_rst_done,
+  output rdma_resetn_done,
+  input  axil_clk,
+  input  axis_clk
+);
+
+logic axil_rstn;
+logic axis_rstn;
+
+logic [8:0] stat_rx_pause_req;
+logic [8:0] ctl_tx_pause_req;
+logic       ctl_tx_resend_pause;
+
+logic o_global_dbg_cnt_en;
+logic o_global_dbg_cnt_clr;
+
+generic_reset #(
+  .NUM_INPUT_CLK  (2),
+  .RESET_DURATION (100)
+) reset_inst (
+  .mod_rstn     (mod_rstn),
+  .mod_rst_done (mod_rst_done),
+  .clk          ({axis_clk, axil_clk}),
+  .rstn         ({axis_rstn, axil_rstn})
+);
+
+rdma_subsystem #(
+  .C_AXIS_DATA_WIDTH (C_AXIS_DATA_WIDTH),
+  .C_AXIS_KEEP_WIDTH (C_AXIS_KEEP_WIDTH),
+  .C_AXIS_IMMDT_WIDTH(C_AXIS_IMMDT_WIDTH)
+) rdma_subsystem_inst (
+  // AXIL interface for RDMA control register
+  .s_axil_awaddr     (s_axil_awaddr),
+  .s_axil_awvalid    (s_axil_awvalid),
+  .s_axil_awready    (s_axil_awready),
+  .s_axil_wdata      (s_axil_wdata),
+  .s_axil_wstrb      (s_axil_wstrb),
+  .s_axil_wvalid     (s_axil_wvalid),
+  .s_axil_wready     (s_axil_wready),
+  .s_axil_araddr     (s_axil_araddr),
+  .s_axil_arvalid    (s_axil_arvalid),
+  .s_axil_arready    (s_axil_arready),
+  .s_axil_rdata      (s_axil_rdata),
+  .s_axil_rvalid     (s_axil_rvalid),
+  .s_axil_rresp      (s_axil_rresp),
+  .s_axil_rready     (s_axil_rready),
+  .s_axil_bresp      (s_axil_bresp),
+  .s_axil_bvalid     (s_axil_bvalid),
+  .s_axil_bready     (s_axil_bready),
+
+  // RDMA TX interface (including roce and non-roce packets) to CMAC TX path
+  .m_rdma2cmac_axis_tdata  (m_rdma2cmac_axis_tdata),
+  .m_rdma2cmac_axis_tkeep  (m_rdma2cmac_axis_tkeep),
+  .m_rdma2cmac_axis_tvalid (m_rdma2cmac_axis_tvalid),
+  .m_rdma2cmac_axis_tlast  (m_rdma2cmac_axis_tlast),
+  .m_rdma2cmac_axis_tready (m_rdma2cmac_axis_tready),
+
+  // Non-RDMA packets from QDMA TX bypassing RDMA TX
+  .s_qdma2rdma_non_roce_axis_tdata  (s_qdma2rdma_non_roce_axis_tdata),
+  .s_qdma2rdma_non_roce_axis_tkeep  (s_qdma2rdma_non_roce_axis_tkeep),
+  .s_qdma2rdma_non_roce_axis_tvalid (s_qdma2rdma_non_roce_axis_tvalid),
+  .s_qdma2rdma_non_roce_axis_tlast  (s_qdma2rdma_non_roce_axis_tlast),
+  .s_qdma2rdma_non_roce_axis_tready (s_qdma2rdma_non_roce_axis_tready),
+
+  // RDMA RX interface from CMAC RX, no rx backpressure
+  .s_cmac2rdma_roce_axis_tdata   (s_cmac2rdma_roce_axis_tdata),
+  .s_cmac2rdma_roce_axis_tkeep   (s_cmac2rdma_roce_axis_tkeep),
+  .s_cmac2rdma_roce_axis_tvalid  (s_cmac2rdma_roce_axis_tvalid),
+  .s_cmac2rdma_roce_axis_tlast   (s_cmac2rdma_roce_axis_tlast),
+  .s_cmac2rdma_roce_axis_tuser   (s_cmac2rdma_roce_axis_tuser),
+
+  // Non-RDMA packets from CMAC RX bypassing RDMA, no rx backpressure
+  .s_cmac2rdma_non_roce_axis_tdata  (s_cmac2rdma_non_roce_axis_tdata),
+  .s_cmac2rdma_non_roce_axis_tkeep  (s_cmac2rdma_non_roce_axis_tkeep),
+  .s_cmac2rdma_non_roce_axis_tvalid (s_cmac2rdma_non_roce_axis_tvalid),
+  .s_cmac2rdma_non_roce_axis_tlast  (s_cmac2rdma_non_roce_axis_tlast),
+  .s_cmac2rdma_non_roce_axis_tuser  (s_cmac2rdma_non_roce_axis_tuser),
+
+  // Non-RDMA packets bypassing RDMA to QDMA RX
+  .m_rdma2qdma_non_roce_axis_tdata   (m_rdma2qdma_non_roce_axis_tdata),
+  .m_rdma2qdma_non_roce_axis_tkeep   (m_rdma2qdma_non_roce_axis_tkeep),
+  .m_rdma2qdma_non_roce_axis_tvalid  (m_rdma2qdma_non_roce_axis_tvalid),
+  .m_rdma2qdma_non_roce_axis_tlast   (m_rdma2qdma_non_roce_axis_tlast),
+  .m_rdma2qdma_non_roce_axis_tready  (m_rdma2qdma_non_roce_axis_tready),
+
+  // invalidate or immediate data from roce IETH/IMMDT header
+  .m_rdma2user_ieth_immdt_axis_tdata   (m_rdma2user_ieth_immdt_axis_tdata),
+  .m_rdma2user_ieth_immdt_axis_tlast   (m_rdma2user_ieth_immdt_axis_tlast),
+  .m_rdma2user_ieth_immdt_axis_tvalid  (m_rdma2user_ieth_immdt_axis_tvalid),
+  .m_rdma2user_ieth_immdt_axis_trdy    (m_rdma2user_ieth_immdt_axis_trdy),
+
+  // RDMA AXI MM interface used to store payload from RDMA MAD, Send or Write operation
+  .m_axi_rdma_send_write_payload_store_awid        (m_axi_rdma_send_write_payload_store_awid),
+  .m_axi_rdma_send_write_payload_store_awaddr      (m_axi_rdma_send_write_payload_store_awaddr),
+  .m_axi_rdma_send_write_payload_store_awuser      (m_axi_rdma_send_write_payload_store_awuser),
+  .m_axi_rdma_send_write_payload_store_awlen       (m_axi_rdma_send_write_payload_store_awlen),
+  .m_axi_rdma_send_write_payload_store_awsize      (m_axi_rdma_send_write_payload_store_awsize),
+  .m_axi_rdma_send_write_payload_store_awburst     (m_axi_rdma_send_write_payload_store_awburst),
+  .m_axi_rdma_send_write_payload_store_awcache     (m_axi_rdma_send_write_payload_store_awcache),
+  .m_axi_rdma_send_write_payload_store_awprot      (m_axi_rdma_send_write_payload_store_awprot),
+  .m_axi_rdma_send_write_payload_store_awvalid     (m_axi_rdma_send_write_payload_store_awvalid),
+  .m_axi_rdma_send_write_payload_store_awready     (m_axi_rdma_send_write_payload_store_awready),
+  .m_axi_rdma_send_write_payload_store_wdata       (m_axi_rdma_send_write_payload_store_wdata),
+  .m_axi_rdma_send_write_payload_store_wstrb       (m_axi_rdma_send_write_payload_store_wstrb),
+  .m_axi_rdma_send_write_payload_store_wlast       (m_axi_rdma_send_write_payload_store_wlast),
+  .m_axi_rdma_send_write_payload_store_wvalid      (m_axi_rdma_send_write_payload_store_wvalid),
+  .m_axi_rdma_send_write_payload_store_wready      (m_axi_rdma_send_write_payload_store_wready),
+  .m_axi_rdma_send_write_payload_store_awlock      (m_axi_rdma_send_write_payload_store_awlock),
+  .m_axi_rdma_send_write_payload_store_bid         (m_axi_rdma_send_write_payload_store_bid),
+  .m_axi_rdma_send_write_payload_store_bresp       (m_axi_rdma_send_write_payload_store_bresp),
+  .m_axi_rdma_send_write_payload_store_bvalid      (m_axi_rdma_send_write_payload_store_bvalid),
+  .m_axi_rdma_send_write_payload_store_bready      (m_axi_rdma_send_write_payload_store_bready),
+  .m_axi_rdma_send_write_payload_store_arid        (m_axi_rdma_send_write_payload_store_arid),
+  .m_axi_rdma_send_write_payload_store_araddr      (m_axi_rdma_send_write_payload_store_araddr),
+  .m_axi_rdma_send_write_payload_store_arlen       (m_axi_rdma_send_write_payload_store_arlen),
+  .m_axi_rdma_send_write_payload_store_arsize      (m_axi_rdma_send_write_payload_store_arsize),
+  .m_axi_rdma_send_write_payload_store_arburst     (m_axi_rdma_send_write_payload_store_arburst),
+  .m_axi_rdma_send_write_payload_store_arcache     (m_axi_rdma_send_write_payload_store_arcache),
+  .m_axi_rdma_send_write_payload_store_arprot      (m_axi_rdma_send_write_payload_store_arprot),
+  .m_axi_rdma_send_write_payload_store_arvalid     (m_axi_rdma_send_write_payload_store_arvalid),
+  .m_axi_rdma_send_write_payload_store_arready     (m_axi_rdma_send_write_payload_store_arready),
+  .m_axi_rdma_send_write_payload_store_rid         (m_axi_rdma_send_write_payload_store_rid),
+  .m_axi_rdma_send_write_payload_store_rdata       (m_axi_rdma_send_write_payload_store_rdata),
+  .m_axi_rdma_send_write_payload_store_rresp       (m_axi_rdma_send_write_payload_store_rresp),
+  .m_axi_rdma_send_write_payload_store_rlast       (m_axi_rdma_send_write_payload_store_rlast),
+  .m_axi_rdma_send_write_payload_store_rvalid      (m_axi_rdma_send_write_payload_store_rvalid),
+  .m_axi_rdma_send_write_payload_store_rready      (m_axi_rdma_send_write_payload_store_rready),
+  .m_axi_rdma_send_write_payload_store_arlock      (m_axi_rdma_send_write_payload_store_arlock),
+
+  // RDMA AXI MM interface used to store payload from RDMA Read response operation
+  .m_axi_rdma_rsp_payload_awid                (m_axi_rdma_rsp_payload_awid),
+  .m_axi_rdma_rsp_payload_awaddr              (m_axi_rdma_rsp_payload_awaddr),
+  .m_axi_rdma_rsp_payload_awlen               (m_axi_rdma_rsp_payload_awlen),
+  .m_axi_rdma_rsp_payload_awsize              (m_axi_rdma_rsp_payload_awsize),
+  .m_axi_rdma_rsp_payload_awburst             (m_axi_rdma_rsp_payload_awburst),
+  .m_axi_rdma_rsp_payload_awcache             (m_axi_rdma_rsp_payload_awcache),
+  .m_axi_rdma_rsp_payload_awprot              (m_axi_rdma_rsp_payload_awprot),
+  .m_axi_rdma_rsp_payload_awvalid             (m_axi_rdma_rsp_payload_awvalid),
+  .m_axi_rdma_rsp_payload_awready             (m_axi_rdma_rsp_payload_awready),
+  .m_axi_rdma_rsp_payload_wdata               (m_axi_rdma_rsp_payload_wdata),
+  .m_axi_rdma_rsp_payload_wstrb               (m_axi_rdma_rsp_payload_wstrb),
+  .m_axi_rdma_rsp_payload_wlast               (m_axi_rdma_rsp_payload_wlast),
+  .m_axi_rdma_rsp_payload_wvalid              (m_axi_rdma_rsp_payload_wvalid),
+  .m_axi_rdma_rsp_payload_wready              (m_axi_rdma_rsp_payload_wready),
+  .m_axi_rdma_rsp_payload_awlock              (m_axi_rdma_rsp_payload_awlock),
+  .m_axi_rdma_rsp_payload_bid                 (m_axi_rdma_rsp_payload_bid),
+  .m_axi_rdma_rsp_payload_bresp               (m_axi_rdma_rsp_payload_bresp),
+  .m_axi_rdma_rsp_payload_bvalid              (m_axi_rdma_rsp_payload_bvalid),
+  .m_axi_rdma_rsp_payload_bready              (m_axi_rdma_rsp_payload_bready),
+  .m_axi_rdma_rsp_payload_arid                (m_axi_rdma_rsp_payload_arid),
+  .m_axi_rdma_rsp_payload_araddr              (m_axi_rdma_rsp_payload_araddr),
+  .m_axi_rdma_rsp_payload_arlen               (m_axi_rdma_rsp_payload_arlen),
+  .m_axi_rdma_rsp_payload_arsize              (m_axi_rdma_rsp_payload_arsize),
+  .m_axi_rdma_rsp_payload_arburst             (m_axi_rdma_rsp_payload_arburst),
+  .m_axi_rdma_rsp_payload_arcache             (m_axi_rdma_rsp_payload_arcache),
+  .m_axi_rdma_rsp_payload_arprot              (m_axi_rdma_rsp_payload_arprot),
+  .m_axi_rdma_rsp_payload_arvalid             (m_axi_rdma_rsp_payload_arvalid),
+  .m_axi_rdma_rsp_payload_arready             (m_axi_rdma_rsp_payload_arready),
+  .m_axi_rdma_rsp_payload_rid                 (m_axi_rdma_rsp_payload_rid),
+  .m_axi_rdma_rsp_payload_rdata               (m_axi_rdma_rsp_payload_rdata),
+  .m_axi_rdma_rsp_payload_rresp               (m_axi_rdma_rsp_payload_rresp),
+  .m_axi_rdma_rsp_payload_rlast               (m_axi_rdma_rsp_payload_rlast),
+  .m_axi_rdma_rsp_payload_rvalid              (m_axi_rdma_rsp_payload_rvalid),
+  .m_axi_rdma_rsp_payload_rready              (m_axi_rdma_rsp_payload_rready),
+  .m_axi_rdma_rsp_payload_arlock              (m_axi_rdma_rsp_payload_arlock),
+
+  // RDMA AXI MM interface used to fetch WQE entries in the senq queue from DDR by the QP manager
+  .m_axi_qp_get_wqe_awid                (m_axi_qp_get_wqe_awid),
+  .m_axi_qp_get_wqe_awaddr              (m_axi_qp_get_wqe_awaddr),
+  .m_axi_qp_get_wqe_awlen               (m_axi_qp_get_wqe_awlen),
+  .m_axi_qp_get_wqe_awsize              (m_axi_qp_get_wqe_awsize),
+  .m_axi_qp_get_wqe_awburst             (m_axi_qp_get_wqe_awburst),
+  .m_axi_qp_get_wqe_awcache             (m_axi_qp_get_wqe_awcache),
+  .m_axi_qp_get_wqe_awprot              (m_axi_qp_get_wqe_awprot),
+  .m_axi_qp_get_wqe_awvalid             (m_axi_qp_get_wqe_awvalid),
+  .m_axi_qp_get_wqe_awready             (m_axi_qp_get_wqe_awready),
+  .m_axi_qp_get_wqe_wdata               (m_axi_qp_get_wqe_wdata),
+  .m_axi_qp_get_wqe_wstrb               (m_axi_qp_get_wqe_wstrb),
+  .m_axi_qp_get_wqe_wlast               (m_axi_qp_get_wqe_wlast),
+  .m_axi_qp_get_wqe_wvalid              (m_axi_qp_get_wqe_wvalid),
+  .m_axi_qp_get_wqe_wready              (m_axi_qp_get_wqe_wready),
+  .m_axi_qp_get_wqe_awlock              (m_axi_qp_get_wqe_awlock),
+  .m_axi_qp_get_wqe_bid                 (m_axi_qp_get_wqe_bid),
+  .m_axi_qp_get_wqe_bresp               (m_axi_qp_get_wqe_bresp),
+  .m_axi_qp_get_wqe_bvalid              (m_axi_qp_get_wqe_bvalid),
+  .m_axi_qp_get_wqe_bready              (m_axi_qp_get_wqe_bready),
+  .m_axi_qp_get_wqe_arid                (m_axi_qp_get_wqe_arid),
+  .m_axi_qp_get_wqe_araddr              (m_axi_qp_get_wqe_araddr),
+  .m_axi_qp_get_wqe_arlen               (m_axi_qp_get_wqe_arlen),
+  .m_axi_qp_get_wqe_arsize              (m_axi_qp_get_wqe_arsize),
+  .m_axi_qp_get_wqe_arburst             (m_axi_qp_get_wqe_arburst),
+  .m_axi_qp_get_wqe_arcache             (m_axi_qp_get_wqe_arcache),
+  .m_axi_qp_get_wqe_arprot              (m_axi_qp_get_wqe_arprot),
+  .m_axi_qp_get_wqe_arvalid             (m_axi_qp_get_wqe_arvalid),
+  .m_axi_qp_get_wqe_arready             (m_axi_qp_get_wqe_arready),
+  .m_axi_qp_get_wqe_rid                 (m_axi_qp_get_wqe_rid),
+  .m_axi_qp_get_wqe_rdata               (m_axi_qp_get_wqe_rdata),
+  .m_axi_qp_get_wqe_rresp               (m_axi_qp_get_wqe_rresp),
+  .m_axi_qp_get_wqe_rlast               (m_axi_qp_get_wqe_rlast),
+  .m_axi_qp_get_wqe_rvalid              (m_axi_qp_get_wqe_rvalid),
+  .m_axi_qp_get_wqe_rready              (m_axi_qp_get_wqe_rready),
+  .m_axi_qp_get_wqe_arlock              (m_axi_qp_get_wqe_arlock),
+
+  // TODO: In the current implementation, we do not consider retry buffer
+  // RDMA AXI MM interface used to store payload of an outgoing RDMA write packet to a retry buffer
+  .m_axi_payload_to_retry_buf_awid       (m_axi_payload_to_retry_buf_awid),
+  .m_axi_payload_to_retry_buf_awaddr     (m_axi_payload_to_retry_buf_awaddr),
+  .m_axi_payload_to_retry_buf_awlen      (m_axi_payload_to_retry_buf_awlen),
+  .m_axi_payload_to_retry_buf_awsize     (m_axi_payload_to_retry_buf_awsize),
+  .m_axi_payload_to_retry_buf_awburst    (m_axi_payload_to_retry_buf_awburst),
+  .m_axi_payload_to_retry_buf_awcache    (m_axi_payload_to_retry_buf_awcache),
+  .m_axi_payload_to_retry_buf_awprot     (m_axi_payload_to_retry_buf_awprot),
+  .m_axi_payload_to_retry_buf_awvalid    (m_axi_payload_to_retry_buf_awvalid),
+  .m_axi_payload_to_retry_buf_awready    (m_axi_payload_to_retry_buf_awready),
+  .m_axi_payload_to_retry_buf_wdata      (m_axi_payload_to_retry_buf_wdata),
+  .m_axi_payload_to_retry_buf_wstrb      (m_axi_payload_to_retry_buf_wstrb),
+  .m_axi_payload_to_retry_buf_wlast      (m_axi_payload_to_retry_buf_wlast),
+  .m_axi_payload_to_retry_buf_wvalid     (m_axi_payload_to_retry_buf_wvalid),
+  .m_axi_payload_to_retry_buf_wready     (m_axi_payload_to_retry_buf_wready),
+  .m_axi_payload_to_retry_buf_awlock     (m_axi_payload_to_retry_buf_awlock),
+  .m_axi_payload_to_retry_buf_bid        (m_axi_payload_to_retry_buf_bid),
+  .m_axi_payload_to_retry_buf_bresp      (m_axi_payload_to_retry_buf_bresp),
+  .m_axi_payload_to_retry_buf_bvalid     (m_axi_payload_to_retry_buf_bvalid),
+  .m_axi_payload_to_retry_buf_bready     (m_axi_payload_to_retry_buf_bready),
+  .m_axi_payload_to_retry_buf_arid       (m_axi_payload_to_retry_buf_arid),
+  .m_axi_payload_to_retry_buf_araddr     (m_axi_payload_to_retry_buf_araddr),
+  .m_axi_payload_to_retry_buf_arlen      (m_axi_payload_to_retry_buf_arlen),
+  .m_axi_payload_to_retry_buf_arsize     (m_axi_payload_to_retry_buf_arsize),
+  .m_axi_payload_to_retry_buf_arburst    (m_axi_payload_to_retry_buf_arburst),
+  .m_axi_payload_to_retry_buf_arcache    (m_axi_payload_to_retry_buf_arcache),
+  .m_axi_payload_to_retry_buf_arprot     (m_axi_payload_to_retry_buf_arprot),
+  .m_axi_payload_to_retry_buf_arvalid    (m_axi_payload_to_retry_buf_arvalid),
+  .m_axi_payload_to_retry_buf_arready    (m_axi_payload_to_retry_buf_arready),
+  .m_axi_payload_to_retry_buf_rid        (m_axi_payload_to_retry_buf_rid),
+  .m_axi_payload_to_retry_buf_rdata      (m_axi_payload_to_retry_buf_rdata),
+  .m_axi_payload_to_retry_buf_rresp      (m_axi_payload_to_retry_buf_rresp),
+  .m_axi_payload_to_retry_buf_rlast      (m_axi_payload_to_retry_buf_rlast),
+  .m_axi_payload_to_retry_buf_rvalid     (m_axi_payload_to_retry_buf_rvalid),
+  .m_axi_payload_to_retry_buf_rready     (m_axi_payload_to_retry_buf_rready),
+  .m_axi_payload_to_retry_buf_arlock     (m_axi_payload_to_retry_buf_arlock),
+
+  // RDMA AXI MM interface used to get payload of an outgoing RDMA send/write and read response packets
+  .m_axi_pktgen_get_payload_awid          (m_axi_pktgen_get_payload_awid),
+  .m_axi_pktgen_get_payload_awaddr        (m_axi_pktgen_get_payload_awaddr),
+  .m_axi_pktgen_get_payload_awlen         (m_axi_pktgen_get_payload_awlen),
+  .m_axi_pktgen_get_payload_awsize        (m_axi_pktgen_get_payload_awsize),
+  .m_axi_pktgen_get_payload_awburst       (m_axi_pktgen_get_payload_awburst),
+  .m_axi_pktgen_get_payload_awcache       (m_axi_pktgen_get_payload_awcache),
+  .m_axi_pktgen_get_payload_awprot        (m_axi_pktgen_get_payload_awprot),
+  .m_axi_pktgen_get_payload_awvalid       (m_axi_pktgen_get_payload_awvalid),
+  .m_axi_pktgen_get_payload_awready       (m_axi_pktgen_get_payload_awready),
+  .m_axi_pktgen_get_payload_wdata         (m_axi_pktgen_get_payload_wdata),
+  .m_axi_pktgen_get_payload_wstrb         (m_axi_pktgen_get_payload_wstrb),
+  .m_axi_pktgen_get_payload_wlast         (m_axi_pktgen_get_payload_wlast),
+  .m_axi_pktgen_get_payload_wvalid        (m_axi_pktgen_get_payload_wvalid),
+  .m_axi_pktgen_get_payload_wready        (m_axi_pktgen_get_payload_wready),
+  .m_axi_pktgen_get_payload_awlock        (m_axi_pktgen_get_payload_awlock),
+  .m_axi_pktgen_get_payload_bid           (m_axi_pktgen_get_payload_bid),
+  .m_axi_pktgen_get_payload_bresp         (m_axi_pktgen_get_payload_bresp),
+  .m_axi_pktgen_get_payload_bvalid        (m_axi_pktgen_get_payload_bvalid),
+  .m_axi_pktgen_get_payload_bready        (m_axi_pktgen_get_payload_bready),
+  .m_axi_pktgen_get_payload_arid          (m_axi_pktgen_get_payload_arid),
+  .m_axi_pktgen_get_payload_araddr        (m_axi_pktgen_get_payload_araddr),
+  .m_axi_pktgen_get_payload_arlen         (m_axi_pktgen_get_payload_arlen),
+  .m_axi_pktgen_get_payload_arsize        (m_axi_pktgen_get_payload_arsize),
+  .m_axi_pktgen_get_payload_arburst       (m_axi_pktgen_get_payload_arburst),
+  .m_axi_pktgen_get_payload_arcache       (m_axi_pktgen_get_payload_arcache),
+  .m_axi_pktgen_get_payload_arprot        (m_axi_pktgen_get_payload_arprot),
+  .m_axi_pktgen_get_payload_arvalid       (m_axi_pktgen_get_payload_arvalid),
+  .m_axi_pktgen_get_payload_arready       (m_axi_pktgen_get_payload_arready),
+  .m_axi_pktgen_get_payload_rid           (m_axi_pktgen_get_payload_rid),
+  .m_axi_pktgen_get_payload_rdata         (m_axi_pktgen_get_payload_rdata),
+  .m_axi_pktgen_get_payload_rresp         (m_axi_pktgen_get_payload_rresp),
+  .m_axi_pktgen_get_payload_rlast         (m_axi_pktgen_get_payload_rlast),
+  .m_axi_pktgen_get_payload_rvalid        (m_axi_pktgen_get_payload_rvalid),
+  .m_axi_pktgen_get_payload_rready        (m_axi_pktgen_get_payload_rready),
+  .m_axi_pktgen_get_payload_arlock        (m_axi_pktgen_get_payload_arlock),
+
+  // RDMA AXI MM interface used to write completion entries to a completion queue in the DDR
+  .m_axi_write_completion_awid       (m_axi_write_completion_awid),
+  .m_axi_write_completion_awaddr     (m_axi_write_completion_awaddr),
+  .m_axi_write_completion_awlen      (m_axi_write_completion_awlen),
+  .m_axi_write_completion_awsize     (m_axi_write_completion_awsize),
+  .m_axi_write_completion_awburst    (m_axi_write_completion_awburst),
+  .m_axi_write_completion_awcache    (m_axi_write_completion_awcache),
+  .m_axi_write_completion_awprot     (m_axi_write_completion_awprot),
+  .m_axi_write_completion_awvalid    (m_axi_write_completion_awvalid),
+  .m_axi_write_completion_awready    (m_axi_write_completion_awready),
+  .m_axi_write_completion_wdata      (m_axi_write_completion_wdata),
+  .m_axi_write_completion_wstrb      (m_axi_write_completion_wstrb),
+  .m_axi_write_completion_wlast      (m_axi_write_completion_wlast),
+  .m_axi_write_completion_wvalid     (m_axi_write_completion_wvalid),
+  .m_axi_write_completion_wready     (m_axi_write_completion_wready),
+  .m_axi_write_completion_awlock     (m_axi_write_completion_awlock),
+  .m_axi_write_completion_bid        (m_axi_write_completion_bid),
+  .m_axi_write_completion_bresp      (m_axi_write_completion_bresp),
+  .m_axi_write_completion_bvalid     (m_axi_write_completion_bvalid),
+  .m_axi_write_completion_bready     (m_axi_write_completion_bready),
+  .m_axi_write_completion_arid       (m_axi_write_completion_arid),
+  .m_axi_write_completion_araddr     (m_axi_write_completion_araddr),
+  .m_axi_write_completion_arlen      (m_axi_write_completion_arlen),
+  .m_axi_write_completion_arsize     (m_axi_write_completion_arsize),
+  .m_axi_write_completion_arburst    (m_axi_write_completion_arburst),
+  .m_axi_write_completion_arcache    (m_axi_write_completion_arcache),
+  .m_axi_write_completion_arprot     (m_axi_write_completion_arprot),
+  .m_axi_write_completion_arvalid    (m_axi_write_completion_arvalid),
+  .m_axi_write_completion_arready    (m_axi_write_completion_arready),
+  .m_axi_write_completion_rid        (m_axi_write_completion_rid),
+  .m_axi_write_completion_rdata      (m_axi_write_completion_rdata),
+  .m_axi_write_completion_rresp      (m_axi_write_completion_rresp),
+  .m_axi_write_completion_rlast      (m_axi_write_completion_rlast),
+  .m_axi_write_completion_rvalid     (m_axi_write_completion_rvalid),
+  .m_axi_write_completion_rready     (m_axi_write_completion_rready),
+  .m_axi_write_completion_arlock     (m_axi_write_completion_arlock),
+
+  // TODO: In the current implementation, we do not consider hardware handshaking from user logic
+  // HW handshaking from user logic: Send WQE completion queue doorbell
+  .resp_hndler_o_send_cq_db_cnt_valid (resp_hndler_o_send_cq_db_cnt_valid),
+  .resp_hndler_o_send_cq_db_addr      (resp_hndler_o_send_cq_db_addr),
+  .resp_hndler_o_send_cq_db_cnt       (resp_hndler_o_send_cq_db_cnt),
+  .resp_hndler_i_send_cq_db_rdy       (resp_hndler_i_send_cq_db_rdy),
+
+  // HW handshaking from user logic: Send WQE producer index doorbell
+  .i_qp_sq_pidb_hndshk           (i_qp_sq_pidb_hndshk),
+  .i_qp_sq_pidb_wr_addr_hndshk   (i_qp_sq_pidb_wr_addr_hndshk),
+  .i_qp_sq_pidb_wr_valid_hndshk  (i_qp_sq_pidb_wr_valid_hndshk),
+  .o_qp_sq_pidb_wr_rdy           (o_qp_sq_pidb_wr_rdy),
+
+  // HW handshaking from user logic: RDMA-Send consumer index doorbell
+  .i_qp_rq_cidb_hndshk           (i_qp_rq_cidb_hndshk),
+  .i_qp_rq_cidb_wr_addr_hndshk   (i_qp_rq_cidb_wr_addr_hndshk),
+  .i_qp_rq_cidb_wr_valid_hndshk  (i_qp_rq_cidb_wr_valid_hndshk),
+  .o_qp_rq_cidb_wr_rdy           (o_qp_rq_cidb_wr_rdy),
+
+  // HW handshaking from user logic: RDMA-Send producer index doorbell
+  .rx_pkt_hndler_o_rq_db_data        (rx_pkt_hndler_o_rq_db_data),
+  .rx_pkt_hndler_o_rq_db_addr        (rx_pkt_hndler_o_rq_db_addr),
+  .rx_pkt_hndler_o_rq_db_data_valid  (rx_pkt_hndler_o_rq_db_data_valid),
+  .rx_pkt_hndler_i_rq_db_rdy         (rx_pkt_hndler_i_rq_db_rdy),
+
+  .rnic_intr             (rnic_intr),
+  .stat_rx_pause_req     (stat_rx_pause_req),
+  .ctl_tx_pause_req      (ctl_tx_pause_req),
+  .ctl_tx_resend_pause   (ctl_tx_resend_pause),
+
+  .o_global_dbg_cnt_en   (o_global_dbg_cnt_en),
+  .o_global_dbg_cnt_clr  (o_global_dbg_cnt_clr),
+
+  .axil_rstn (axil_rstn),
+  .axis_rstn (axis_rstn),
+  .axil_clk (axil_clk),
+  .axis_clk (axis_clk),
+  .rdma_resetn_done (rdma_resetn_done)
+);
+
+assign stat_rx_pause_req = 9'd0;
+
+endmodule : rdma_subsystem_wrapper
diff --git a/src/rdma_subsystem/vivado_ip/rdma_core.tcl b/src/rdma_subsystem/vivado_ip/rdma_core.tcl
new file mode 100644
index 0000000..4475179
--- /dev/null
+++ b/src/rdma_subsystem/vivado_ip/rdma_core.tcl
@@ -0,0 +1,16 @@
+#==============================================================================
+# Copyright (C) 2023, Advanced Micro Devices, Inc. All rights reserved.
+# SPDX-License-Identifier: MIT
+#
+#==============================================================================
+set rdma rdma_core
+create_ip -name ernic -vendor xilinx.com -library ip -version 3.1 -module_name $rdma -dir ${ip_build_dir}
+
+set_property -dict {
+    CONFIG.C_NUM_QP {32}
+    CONFIG.C_S_AXI_LITE_ADDR_WIDTH {32}
+    CONFIG.C_M_AXI_ADDR_WIDTH {64}
+    CONFIG.C_EN_DEBUG_PORTS {1}
+    CONFIG.C_MAX_WR_RETRY_DATA_BUF_DEPTH {2048}
+    CONFIG.C_EN_INITIATOR_LITE {1}
+} [get_ips $rdma]
diff --git a/src/rdma_subsystem/vivado_ip/vivado_ip.tcl b/src/rdma_subsystem/vivado_ip/vivado_ip.tcl
new file mode 100644
index 0000000..513995f
--- /dev/null
+++ b/src/rdma_subsystem/vivado_ip/vivado_ip.tcl
@@ -0,0 +1,8 @@
+#==============================================================================
+# Copyright (C) 2023, Advanced Micro Devices, Inc. All rights reserved.
+# SPDX-License-Identifier: MIT
+#
+#==============================================================================
+set ips {
+  rdma_core
+}
\ No newline at end of file
diff --git a/src/system_config/system_config.sv b/src/system_config/system_config.sv
index d4a14e9..da833f0 100644
--- a/src/system_config/system_config.sv
+++ b/src/system_config/system_config.sv
@@ -54,6 +54,23 @@ module system_config #(
   input                   [1:0] m_axil_qdma_rresp,
   output                        m_axil_qdma_rready,
 
+  output                        m_axil_qdma_csr_awvalid,
+  output                 [31:0] m_axil_qdma_csr_awaddr,
+  input                         m_axil_qdma_csr_awready,
+  output                        m_axil_qdma_csr_wvalid,
+  output                 [31:0] m_axil_qdma_csr_wdata,
+  input                         m_axil_qdma_csr_wready,
+  input                         m_axil_qdma_csr_bvalid,
+  input                   [1:0] m_axil_qdma_csr_bresp,
+  output                        m_axil_qdma_csr_bready,
+  output                        m_axil_qdma_csr_arvalid,
+  output                 [31:0] m_axil_qdma_csr_araddr,
+  input                         m_axil_qdma_csr_arready,
+  input                         m_axil_qdma_csr_rvalid,
+  input                  [31:0] m_axil_qdma_csr_rdata,
+  input                   [1:0] m_axil_qdma_csr_rresp,
+  output                        m_axil_qdma_csr_rready,
+
   output    [NUM_CMAC_PORT-1:0] m_axil_adap_awvalid,
   output [32*NUM_CMAC_PORT-1:0] m_axil_adap_awaddr,
   input     [NUM_CMAC_PORT-1:0] m_axil_adap_awready,
@@ -88,6 +105,23 @@ module system_config #(
   input   [2*NUM_CMAC_PORT-1:0] m_axil_cmac_rresp,
   output    [NUM_CMAC_PORT-1:0] m_axil_cmac_rready,
 
+  output                        m_axil_rdma_awvalid,
+  output                 [31:0] m_axil_rdma_awaddr,
+  input                         m_axil_rdma_awready,
+  output                        m_axil_rdma_wvalid,
+  output                 [31:0] m_axil_rdma_wdata,
+  input                         m_axil_rdma_wready,
+  input                         m_axil_rdma_bvalid,
+  input                   [1:0] m_axil_rdma_bresp,
+  output                        m_axil_rdma_bready,
+  output                        m_axil_rdma_arvalid,
+  output                 [31:0] m_axil_rdma_araddr,
+  input                         m_axil_rdma_arready,
+  input                         m_axil_rdma_rvalid,
+  input                  [31:0] m_axil_rdma_rdata,
+  input                   [1:0] m_axil_rdma_rresp,
+  output                        m_axil_rdma_rready,
+
   output                        m_axil_box0_awvalid,
   output                 [31:0] m_axil_box0_awaddr,
   input                         m_axil_box0_awready,
@@ -226,6 +260,23 @@ module system_config #(
     .m_axil_qdma_rresp   (m_axil_qdma_rresp),
     .m_axil_qdma_rready  (m_axil_qdma_rready),
 
+    .m_axil_qdma_csr_awvalid (m_axil_qdma_csr_awvalid),
+    .m_axil_qdma_csr_awaddr  (m_axil_qdma_csr_awaddr),
+    .m_axil_qdma_csr_awready (m_axil_qdma_csr_awready),
+    .m_axil_qdma_csr_wvalid  (m_axil_qdma_csr_wvalid),
+    .m_axil_qdma_csr_wdata   (m_axil_qdma_csr_wdata),
+    .m_axil_qdma_csr_wready  (m_axil_qdma_csr_wready),
+    .m_axil_qdma_csr_bvalid  (m_axil_qdma_csr_bvalid),
+    .m_axil_qdma_csr_bresp   (m_axil_qdma_csr_bresp),
+    .m_axil_qdma_csr_bready  (m_axil_qdma_csr_bready),
+    .m_axil_qdma_csr_arvalid (m_axil_qdma_csr_arvalid),
+    .m_axil_qdma_csr_araddr  (m_axil_qdma_csr_araddr),
+    .m_axil_qdma_csr_arready (m_axil_qdma_csr_arready),
+    .m_axil_qdma_csr_rvalid  (m_axil_qdma_csr_rvalid),
+    .m_axil_qdma_csr_rdata   (m_axil_qdma_csr_rdata),
+    .m_axil_qdma_csr_rresp   (m_axil_qdma_csr_rresp),
+    .m_axil_qdma_csr_rready  (m_axil_qdma_csr_rready),
+
     .m_axil_adap_awvalid (m_axil_adap_awvalid),
     .m_axil_adap_awaddr  (m_axil_adap_awaddr),
     .m_axil_adap_awready (m_axil_adap_awready),
@@ -276,7 +327,24 @@ module system_config #(
     .m_axil_smon_rdata   (axil_smon_rdata),
     .m_axil_smon_rresp   (axil_smon_rresp),
     .m_axil_smon_rready  (axil_smon_rready),
-			   
+
+    .m_axil_rdma_awvalid (m_axil_rdma_awvalid),
+    .m_axil_rdma_awaddr  (m_axil_rdma_awaddr),
+    .m_axil_rdma_awready (m_axil_rdma_awready),
+    .m_axil_rdma_wvalid  (m_axil_rdma_wvalid),
+    .m_axil_rdma_wdata   (m_axil_rdma_wdata),
+    .m_axil_rdma_wready  (m_axil_rdma_wready),
+    .m_axil_rdma_bvalid  (m_axil_rdma_bvalid),
+    .m_axil_rdma_bresp   (m_axil_rdma_bresp),
+    .m_axil_rdma_bready  (m_axil_rdma_bready),
+    .m_axil_rdma_arvalid (m_axil_rdma_arvalid),
+    .m_axil_rdma_araddr  (m_axil_rdma_araddr),
+    .m_axil_rdma_arready (m_axil_rdma_arready),
+    .m_axil_rdma_rvalid  (m_axil_rdma_rvalid),
+    .m_axil_rdma_rdata   (m_axil_rdma_rdata),
+    .m_axil_rdma_rresp   (m_axil_rdma_rresp),
+    .m_axil_rdma_rready  (m_axil_rdma_rready),
+
     .m_axil_box0_awvalid (m_axil_box0_awvalid),
     .m_axil_box0_awaddr  (m_axil_box0_awaddr),
     .m_axil_box0_awready (m_axil_box0_awready),
@@ -346,26 +414,29 @@ module system_config #(
 
    system_management_wiz
    system_management_wiz_inst (
-     .s_axi_aclk      (aclk),                    
-     .s_axi_aresetn   (aresetn),                    
- 
-     .s_axi_awaddr    (axil_smon_awaddr),                    
-     .s_axi_awvalid   (axil_smon_awvalid),                    
-     .s_axi_awready   (axil_smon_awready),                    
-     .s_axi_wdata     (axil_smon_wdata),                    
-     .s_axi_wstrb     (4'hF),                    
-     .s_axi_wvalid    (axil_smon_wvalid),                    
-     .s_axi_wready    (axil_smon_wready),                    
-     .s_axi_bresp     (axil_smon_bresp),                    
-     .s_axi_bvalid    (axil_smon_bvalid),                    
-     .s_axi_bready    (axil_smon_bready),                    
-     .s_axi_araddr    (axil_smon_araddr),                    
-     .s_axi_arvalid   (axil_smon_arvalid),                    
-     .s_axi_arready   (axil_smon_arready),                    
-     .s_axi_rdata     (axil_smon_rdata),                    
-     .s_axi_rresp     (axil_smon_rresp),                    
-     .s_axi_rvalid    (axil_smon_rvalid),                    
-     .s_axi_rready    (axil_smon_rready)
+     .s_axi_aclk      (aclk),
+     .s_axi_aresetn   (aresetn),
+
+     .s_axi_awaddr    (axil_smon_awaddr),
+     .s_axi_awvalid   (axil_smon_awvalid),
+     .s_axi_awready   (axil_smon_awready),
+     .s_axi_wdata     (axil_smon_wdata),
+     .s_axi_wstrb     (4'hF),
+     .s_axi_wvalid    (axil_smon_wvalid),
+     .s_axi_wready    (axil_smon_wready),
+     .s_axi_bresp     (axil_smon_bresp),
+     .s_axi_bvalid    (axil_smon_bvalid),
+     .s_axi_bready    (axil_smon_bready),
+     .s_axi_araddr    (axil_smon_araddr),
+     .s_axi_arvalid   (axil_smon_arvalid),
+     .s_axi_arready   (axil_smon_arready),
+     .s_axi_rdata     (axil_smon_rdata),
+     .s_axi_rresp     (axil_smon_rresp),
+     .s_axi_rvalid    (axil_smon_rvalid),
+     .s_axi_rready    (axil_smon_rready),
+
+     .vp              (1'b0),
+     .vn              (1'b0)
   );
 
 endmodule: system_config
diff --git a/src/system_config/system_config_address_map.sv b/src/system_config/system_config_address_map.sv
index 11ae7a5..171712d 100644
--- a/src/system_config/system_config_address_map.sv
+++ b/src/system_config/system_config_address_map.sv
@@ -34,6 +34,10 @@
 // --------------------------------------------------
 //    0x10000  |  0x11FFF  |  Sysmon block
 // --------------------------------------------------
+//    0x14000  |  0x16FFF  |  QDMA AXI Bridge CSR
+// --------------------------------------------------
+//    0x40000  |  0x6FFFF  |  RDMA subsystem
+// --------------------------------------------------
 //   0x100000  |  0x1FFFFF |  Box0 @ 250MHz
 // --------------------------------------------------
 //   0x200000  |  0x2FFFFF |  Box1 @ 322MHz
@@ -95,6 +99,23 @@ module system_config_address_map #(
   input                   [1:0] m_axil_qdma_rresp,
   output                        m_axil_qdma_rready,
 
+  output                        m_axil_qdma_csr_awvalid,
+  output                 [31:0] m_axil_qdma_csr_awaddr,
+  input                         m_axil_qdma_csr_awready,
+  output                        m_axil_qdma_csr_wvalid,
+  output                 [31:0] m_axil_qdma_csr_wdata,
+  input                         m_axil_qdma_csr_wready,
+  input                         m_axil_qdma_csr_bvalid,
+  input                   [1:0] m_axil_qdma_csr_bresp,
+  output                        m_axil_qdma_csr_bready,
+  output                        m_axil_qdma_csr_arvalid,
+  output                 [31:0] m_axil_qdma_csr_araddr,
+  input                         m_axil_qdma_csr_arready,
+  input                         m_axil_qdma_csr_rvalid,
+  input                  [31:0] m_axil_qdma_csr_rdata,
+  input                   [1:0] m_axil_qdma_csr_rresp,
+  output                        m_axil_qdma_csr_rready,
+
   output    [NUM_CMAC_PORT-1:0] m_axil_adap_awvalid,
   output [32*NUM_CMAC_PORT-1:0] m_axil_adap_awaddr,
   input     [NUM_CMAC_PORT-1:0] m_axil_adap_awready,
@@ -129,6 +150,23 @@ module system_config_address_map #(
   input   [2*NUM_CMAC_PORT-1:0] m_axil_cmac_rresp,
   output    [NUM_CMAC_PORT-1:0] m_axil_cmac_rready,
 
+  output                        m_axil_rdma_awvalid,
+  output                 [31:0] m_axil_rdma_awaddr,
+  input                         m_axil_rdma_awready,
+  output                        m_axil_rdma_wvalid,
+  output                 [31:0] m_axil_rdma_wdata,
+  input                         m_axil_rdma_wready,
+  input                         m_axil_rdma_bvalid,
+  input                   [1:0] m_axil_rdma_bresp,
+  output                        m_axil_rdma_bready,
+  output                        m_axil_rdma_arvalid,
+  output                 [31:0] m_axil_rdma_araddr,
+  input                         m_axil_rdma_arready,
+  input                         m_axil_rdma_rvalid,
+  input                  [31:0] m_axil_rdma_rdata,
+  input                   [1:0] m_axil_rdma_rresp,
+  output                        m_axil_rdma_rready,
+
   output                        m_axil_box0_awvalid,
   output                 [31:0] m_axil_box0_awaddr,
   input                         m_axil_box0_awready,
@@ -184,7 +222,7 @@ module system_config_address_map #(
   input                         aresetn
 );
 
-  localparam C_NUM_SLAVES  = 9;
+  localparam C_NUM_SLAVES  = 11;
 
   localparam C_SCFG_INDEX  = 0;
   localparam C_QDMA_INDEX  = 1;
@@ -193,8 +231,10 @@ module system_config_address_map #(
   localparam C_CMAC1_INDEX = 4;
   localparam C_ADAP1_INDEX = 5;
   localparam C_SMON_INDEX  = 6;
-  localparam C_BOX1_INDEX  = 7;
-  localparam C_BOX0_INDEX  = 8;
+  localparam C_QCSR_INDEX  = 7;
+  localparam C_RDMA_INDEX  = 8;
+  localparam C_BOX1_INDEX  = 9;
+  localparam C_BOX0_INDEX  = 10;
 
   localparam C_SCFG_BASE_ADDR  = 32'h0;
   localparam C_QDMA_BASE_ADDR  = 32'h01000;
@@ -203,6 +243,8 @@ module system_config_address_map #(
   localparam C_CMAC1_BASE_ADDR = 32'h0C000;
   localparam C_ADAP1_BASE_ADDR = 32'h0F000;
   localparam C_SMON_BASE_ADDR  = 32'h10000;  // 14 bits
+  localparam C_QCSR_BASE_ADDR  = 32'h14000;  // 14 bits
+  localparam C_RDMA_BASE_ADDR  = 32'h40000;  // 18 bits
   localparam C_BOX1_BASE_ADDR  = 32'h200000; // 20 bits
   localparam C_BOX0_BASE_ADDR  = 32'h100000; // 20 bits
 
@@ -224,6 +266,10 @@ module system_config_address_map #(
   wire                [31:0] axil_box0_araddr;
   wire                [31:0] axil_smon_awaddr;
   wire                [31:0] axil_smon_araddr;
+  wire                [31:0] axil_qcsr_awaddr;
+  wire                [31:0] axil_qcsr_araddr;
+  wire                [31:0] axil_rdma_awaddr;
+  wire                [31:0] axil_rdma_araddr;
 
   wire  [1*C_NUM_SLAVES-1:0] axil_awvalid;
   wire [32*C_NUM_SLAVES-1:0] axil_awaddr;
@@ -247,6 +293,8 @@ module system_config_address_map #(
   assign axil_scfg_araddr                      = axil_araddr[`getvec(32, C_SCFG_INDEX)] - C_SCFG_BASE_ADDR;
   assign axil_qdma_awaddr                      = axil_awaddr[`getvec(32, C_QDMA_INDEX)] - C_QDMA_BASE_ADDR;
   assign axil_qdma_araddr                      = axil_araddr[`getvec(32, C_QDMA_INDEX)] - C_QDMA_BASE_ADDR;
+  assign axil_qcsr_awaddr                      = axil_awaddr[`getvec(32, C_QCSR_INDEX)] - C_QCSR_BASE_ADDR;
+  assign axil_qcsr_araddr                      = axil_araddr[`getvec(32, C_QCSR_INDEX)] - C_QCSR_BASE_ADDR;
   assign axil_cmac0_awaddr                     = axil_awaddr[`getvec(32, C_CMAC0_INDEX)] - C_CMAC0_BASE_ADDR;
   assign axil_cmac0_araddr                     = axil_araddr[`getvec(32, C_CMAC0_INDEX)] - C_CMAC0_BASE_ADDR;
   assign axil_adap0_awaddr                     = axil_awaddr[`getvec(32, C_ADAP0_INDEX)] - C_ADAP0_BASE_ADDR;
@@ -255,8 +303,10 @@ module system_config_address_map #(
   assign axil_cmac1_araddr                     = axil_araddr[`getvec(32, C_CMAC1_INDEX)] - C_CMAC1_BASE_ADDR;
   assign axil_adap1_awaddr                     = axil_awaddr[`getvec(32, C_ADAP1_INDEX)] - C_ADAP1_BASE_ADDR;
   assign axil_adap1_araddr                     = axil_araddr[`getvec(32, C_ADAP1_INDEX)] - C_ADAP1_BASE_ADDR;
-  assign axil_smon_awddr                       = axil_awaddr[`getvec(32, C_SMON_INDEX)]  - C_SMON_BASE_ADDR;
+  assign axil_smon_awaddr                      = axil_awaddr[`getvec(32, C_SMON_INDEX)]  - C_SMON_BASE_ADDR;
   assign axil_smon_araddr                      = axil_araddr[`getvec(32, C_SMON_INDEX)] - C_SMON_BASE_ADDR;
+  assign axil_rdma_awaddr                      = axil_awaddr[`getvec(32, C_RDMA_INDEX)] - C_RDMA_BASE_ADDR;
+  assign axil_rdma_araddr                      = axil_araddr[`getvec(32, C_RDMA_INDEX)] - C_RDMA_BASE_ADDR;
   assign axil_box1_awaddr                      = axil_awaddr[`getvec(32, C_BOX1_INDEX)] - C_BOX1_BASE_ADDR;
   assign axil_box1_araddr                      = axil_araddr[`getvec(32, C_BOX1_INDEX)] - C_BOX1_BASE_ADDR;
   assign axil_box0_awaddr                      = axil_awaddr[`getvec(32, C_BOX0_INDEX)] - C_BOX0_BASE_ADDR;
@@ -296,6 +346,23 @@ module system_config_address_map #(
   assign axil_rresp[`getvec(2, C_QDMA_INDEX)]  = m_axil_qdma_rresp;
   assign m_axil_qdma_rready                    = axil_rready[C_QDMA_INDEX];
 
+  assign m_axil_qdma_csr_awvalid               = axil_awvalid[C_QCSR_INDEX];
+  assign m_axil_qdma_csr_awaddr                = axil_qcsr_awaddr;
+  assign axil_awready[C_QCSR_INDEX]            = m_axil_qdma_csr_awready;
+  assign m_axil_qdma_csr_wvalid                = axil_wvalid[C_QCSR_INDEX];
+  assign m_axil_qdma_csr_wdata                 = axil_wdata[`getvec(32, C_QCSR_INDEX)];
+  assign axil_wready[C_QCSR_INDEX]             = m_axil_qdma_csr_wready;
+  assign axil_bvalid[C_QCSR_INDEX]             = m_axil_qdma_csr_bvalid;
+  assign axil_bresp[`getvec(2, C_QCSR_INDEX)]  = m_axil_qdma_csr_bresp;
+  assign m_axil_qdma_csr_bready                = axil_bready[C_QCSR_INDEX];
+  assign m_axil_qdma_csr_arvalid               = axil_arvalid[C_QCSR_INDEX];
+  assign m_axil_qdma_csr_araddr                = axil_qcsr_araddr;
+  assign axil_arready[C_QCSR_INDEX]            = m_axil_qdma_csr_arready;
+  assign axil_rvalid[C_QCSR_INDEX]             = m_axil_qdma_csr_rvalid;
+  assign axil_rdata[`getvec(32, C_QCSR_INDEX)] = m_axil_qdma_csr_rdata;
+  assign axil_rresp[`getvec(2, C_QCSR_INDEX)]  = m_axil_qdma_csr_rresp;
+  assign m_axil_qdma_csr_rready                = axil_rready[C_QCSR_INDEX];
+
   if (NUM_CMAC_PORT == 1) begin
     assign m_axil_cmac_awvalid                    = axil_awvalid[C_CMAC0_INDEX];
     assign m_axil_cmac_awaddr                     = axil_cmac0_awaddr;
@@ -504,6 +571,23 @@ module system_config_address_map #(
   assign axil_rresp[`getvec(2, C_SMON_INDEX)]  = m_axil_smon_rresp;
   assign m_axil_smon_rready                    = axil_rready[C_SMON_INDEX];
 
+  assign m_axil_rdma_awvalid                   = axil_awvalid[C_RDMA_INDEX];
+  assign m_axil_rdma_awaddr                    = axil_rdma_awaddr;
+  assign axil_awready[C_RDMA_INDEX]            = m_axil_rdma_awready;
+  assign m_axil_rdma_wvalid                    = axil_wvalid[C_RDMA_INDEX];
+  assign m_axil_rdma_wdata                     = axil_wdata[`getvec(32, C_RDMA_INDEX)];
+  assign axil_wready[C_RDMA_INDEX]             = m_axil_rdma_wready;
+  assign axil_bvalid[C_RDMA_INDEX]             = m_axil_rdma_bvalid;
+  assign axil_bresp[`getvec(2, C_RDMA_INDEX)]  = m_axil_rdma_bresp;
+  assign m_axil_rdma_bready                    = axil_bready[C_RDMA_INDEX];
+  assign m_axil_rdma_arvalid                   = axil_arvalid[C_RDMA_INDEX];
+  assign m_axil_rdma_araddr                    = axil_rdma_araddr;
+  assign axil_arready[C_RDMA_INDEX]            = m_axil_rdma_arready;
+  assign axil_rvalid[C_RDMA_INDEX]             = m_axil_rdma_rvalid;
+  assign axil_rdata[`getvec(32, C_RDMA_INDEX)] = m_axil_rdma_rdata;
+  assign axil_rresp[`getvec(2, C_RDMA_INDEX)]  = m_axil_rdma_rresp;
+  assign m_axil_rdma_rready                    = axil_rready[C_RDMA_INDEX];
+
   system_config_axi_crossbar xbar_inst (
     .s_axi_awaddr  (s_axil_awaddr),
     .s_axi_awprot  (0),
diff --git a/src/system_config/system_config_register.v b/src/system_config/system_config_register.v
index 36e7774..d41510f 100644
--- a/src/system_config/system_config_register.v
+++ b/src/system_config/system_config_register.v
@@ -104,7 +104,7 @@ module system_config_register #(
     .DATA_W        (32)
   ) axil_reg_inst (
     .s_axil_awvalid (s_axil_awvalid),
-    .s_axil_awaddr  (s_axil_awaddr),
+    .s_axil_awaddr  (s_axil_awaddr[C_ADDR_W-1:0]),
     .s_axil_awready (s_axil_awready),
     .s_axil_wvalid  (s_axil_wvalid),
     .s_axil_wdata   (s_axil_wdata),
@@ -113,7 +113,7 @@ module system_config_register #(
     .s_axil_bresp   (s_axil_bresp),
     .s_axil_bready  (s_axil_bready),
     .s_axil_arvalid (s_axil_arvalid),
-    .s_axil_araddr  (s_axil_araddr),
+    .s_axil_araddr  (s_axil_araddr[C_ADDR_W-1:0]),
     .s_axil_arready (s_axil_arready),
     .s_axil_rvalid  (s_axil_rvalid),
     .s_axil_rdata   (s_axil_rdata),
@@ -201,11 +201,15 @@ module system_config_register #(
 
   // Shell reset register (write-only)
   //
-  // 31:3  - reserved
-  // 2     - reset for the CMAC subsystem CMAC1
-  // 1     - reset for the CMAC subsystem CMAC0
+  // 31:10 - reserved
+  // 9     - reset for the adapter of CMAC1
+  // 8     - reset for the CMAC subsystem CMAC1
+  // 7:6   - reserved
+  // 5     - reset for the adapter of CMAC0
+  // 4     - reset for the CMAC subsystem CMAC0
+  // 3:2   - reserved
+  // 1     - reset for the RDMA subsystem
   // 0     - reset for the QDMA subsystem
-  // 
   // Writing 1 to a bit of this register initiates a submodule-level reset in
   // the shell logic, which lasts until the corresponding submodule is out of
   // reset.  Mapping between bits and submodules are as follows.
diff --git a/src/system_config/vivado_ip/system_config_axi_crossbar.tcl b/src/system_config/vivado_ip/system_config_axi_crossbar.tcl
index 603d9c9..152d1c6 100644
--- a/src/system_config/vivado_ip/system_config_axi_crossbar.tcl
+++ b/src/system_config/vivado_ip/system_config_axi_crossbar.tcl
@@ -1,25 +1,13 @@
-# *************************************************************************
+#==============================================================================
+# Copyright (C) 2023, Advanced Micro Devices, Inc. All rights reserved.
+# SPDX-License-Identifier: MIT
 #
-# Copyright 2020 Xilinx, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-# *************************************************************************
+#==============================================================================
 set axi_crossbar system_config_axi_crossbar
 create_ip -name axi_crossbar -vendor xilinx.com -library ip -module_name $axi_crossbar -dir ${ip_build_dir}
-set_property -dict { 
+set_property -dict {
     CONFIG.ADDR_RANGES {3}
-    CONFIG.NUM_MI {9}
+    CONFIG.NUM_MI {11}
     CONFIG.PROTOCOL {AXI4LITE}
     CONFIG.CONNECTIVITY_MODE {SASD}
     CONFIG.R_REGISTER {1}
@@ -98,8 +86,10 @@ set_property -dict {
     CONFIG.M04_A01_BASE_ADDR {0x000000000000E000}
     CONFIG.M05_A00_BASE_ADDR {0x000000000000F000}
     CONFIG.M06_A00_BASE_ADDR {0x0000000000010000}
-    CONFIG.M07_A00_BASE_ADDR {0x0000000000200000}
-    CONFIG.M08_A00_BASE_ADDR {0x0000000000100000}
+    CONFIG.M07_A00_BASE_ADDR {0x0000000000014000}
+    CONFIG.M08_A00_BASE_ADDR {0x0000000000040000}
+    CONFIG.M09_A00_BASE_ADDR {0x0000000000200000}
+    CONFIG.M10_A00_BASE_ADDR {0x0000000000100000}
     CONFIG.M01_A00_ADDR_WIDTH {12}
     CONFIG.M01_A01_ADDR_WIDTH {13}
     CONFIG.M01_A02_ADDR_WIDTH {13}
@@ -110,6 +100,8 @@ set_property -dict {
     CONFIG.M04_A01_ADDR_WIDTH {12}
     CONFIG.M05_A00_ADDR_WIDTH {12}
     CONFIG.M06_A00_ADDR_WIDTH {13}
-    CONFIG.M07_A00_ADDR_WIDTH {20}
-    CONFIG.M08_A00_ADDR_WIDTH {20}
+    CONFIG.M07_A00_ADDR_WIDTH {14}
+    CONFIG.M08_A00_ADDR_WIDTH {18}
+    CONFIG.M09_A00_ADDR_WIDTH {20}
+    CONFIG.M10_A00_ADDR_WIDTH {20}
 } [get_ips $axi_crossbar]
diff --git a/src/system_config/vivado_ip/system_management_wiz.tcl b/src/system_config/vivado_ip/system_management_wiz.tcl
index 8e92afe..4f25e33 100644
--- a/src/system_config/vivado_ip/system_management_wiz.tcl
+++ b/src/system_config/vivado_ip/system_management_wiz.tcl
@@ -1,41 +1,29 @@
-# *************************************************************************
+#==============================================================================
+# Copyright (C) 2023, Advanced Micro Devices, Inc. All rights reserved.
+# SPDX-License-Identifier: MIT
 #
-# Copyright 2020 Xilinx, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-# *************************************************************************
+#==============================================================================
 set system_management_wiz system_management_wiz
 create_ip -name system_management_wiz -vendor xilinx.com -library ip -module_name $system_management_wiz -dir ${ip_build_dir}
 set_property -dict {
     CONFIG.INTERFACE_SELECTION {Enable_AXI}
     CONFIG.ENABLE_RESET {false}
-    CONFIG.OT_ALARM {false} 
-    CONFIG.USER_TEMP_ALARM {false} 
-    CONFIG.VCCINT_ALARM {false} 
-    CONFIG.VCCAUX_ALARM {false} 
-    CONFIG.ENABLE_VBRAM_ALARM {false} 
-    CONFIG.CHANNEL_ENABLE_VP_VN {true} 
-    CONFIG.AVERAGE_ENABLE_VBRAM {true} 
-    CONFIG.AVERAGE_ENABLE_TEMPERATURE {true} 
-    CONFIG.AVERAGE_ENABLE_VCCINT {true} 
-    CONFIG.AVERAGE_ENABLE_VCCAUX {true} 
-    CONFIG.AVERAGE_ENABLE_TEMPERATURE_SLAVE0_SSIT {true} 
-    CONFIG.AVERAGE_ENABLE_TEMPERATURE_SLAVE1_SSIT {true} 
-    CONFIG.CHANNEL_ENABLE_VUSER0_SLAVE0_SSIT {true} 
-    CONFIG.AVERAGE_ENABLE_VUSER0_SLAVE0_SSIT {true} 
-    CONFIG.CHANNEL_ENABLE_VUSER0_SLAVE1_SSIT {true} 
-    CONFIG.AVERAGE_ENABLE_VUSER0_SLAVE1_SSIT {true} 
-    CONFIG.Enable_Slave0 {true} 
+    CONFIG.OT_ALARM {false}
+    CONFIG.USER_TEMP_ALARM {false}
+    CONFIG.VCCINT_ALARM {false}
+    CONFIG.VCCAUX_ALARM {false}
+    CONFIG.ENABLE_VBRAM_ALARM {false}
+    CONFIG.CHANNEL_ENABLE_VP_VN {true}
+    CONFIG.AVERAGE_ENABLE_VBRAM {true}
+    CONFIG.AVERAGE_ENABLE_TEMPERATURE {true}
+    CONFIG.AVERAGE_ENABLE_VCCINT {true}
+    CONFIG.AVERAGE_ENABLE_VCCAUX {true}
+    CONFIG.AVERAGE_ENABLE_TEMPERATURE_SLAVE0_SSIT {true}
+    CONFIG.AVERAGE_ENABLE_TEMPERATURE_SLAVE1_SSIT {true}
+    CONFIG.CHANNEL_ENABLE_VUSER0_SLAVE0_SSIT {true}
+    CONFIG.AVERAGE_ENABLE_VUSER0_SLAVE0_SSIT {true}
+    CONFIG.CHANNEL_ENABLE_VUSER0_SLAVE1_SSIT {true}
+    CONFIG.AVERAGE_ENABLE_VUSER0_SLAVE1_SSIT {true}
+    CONFIG.Enable_Slave0 {true}
     CONFIG.Enable_Slave1 {true}
 } [get_ips $system_management_wiz]
diff --git a/src/system_config/vivado_ip/vivado_ip.tcl b/src/system_config/vivado_ip/vivado_ip.tcl
index 340fb1e..2ed0a52 100644
--- a/src/system_config/vivado_ip/vivado_ip.tcl
+++ b/src/system_config/vivado_ip/vivado_ip.tcl
@@ -1,20 +1,8 @@
-# *************************************************************************
+#==============================================================================
+# Copyright (C) 2023, Advanced Micro Devices, Inc. All rights reserved.
+# SPDX-License-Identifier: MIT
 #
-# Copyright 2020 Xilinx, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-# *************************************************************************
+#==============================================================================
 set ips {
     system_config_axi_crossbar
     system_management_wiz
diff --git a/src/utility/axi_2to1_interconnect_to_dev_mem.sv b/src/utility/axi_2to1_interconnect_to_dev_mem.sv
new file mode 100755
index 0000000..bb22654
--- /dev/null
+++ b/src/utility/axi_2to1_interconnect_to_dev_mem.sv
@@ -0,0 +1,352 @@
+// *************************************************************************
+//
+// Copyright 2022 Xilinx, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+//
+// *************************************************************************
+`timescale 1ns/1ps
+
+module axi_2to1_interconnect_to_dev_mem #(
+  parameter C_AXI_DATA_WIDTH = 512,
+  parameter C_AXI_ADDR_WIDTH = 64
+) (
+
+  input     [3 : 0] s_axi_qdma_mm_awid,
+  input    [63 : 0] s_axi_qdma_mm_awaddr,
+  input     [3 : 0] s_axi_qdma_mm_awqos,
+  input     [7 : 0] s_axi_qdma_mm_awlen,
+  input     [2 : 0] s_axi_qdma_mm_awsize,
+  input     [1 : 0] s_axi_qdma_mm_awburst,
+  input     [3 : 0] s_axi_qdma_mm_awcache,
+  input     [2 : 0] s_axi_qdma_mm_awprot,
+  input             s_axi_qdma_mm_awvalid,
+  output            s_axi_qdma_mm_awready,
+  input   [511 : 0] s_axi_qdma_mm_wdata,
+  input    [63 : 0] s_axi_qdma_mm_wstrb,
+  input             s_axi_qdma_mm_wlast,
+  input             s_axi_qdma_mm_wvalid,
+  output            s_axi_qdma_mm_wready,
+  input             s_axi_qdma_mm_awlock,
+  output    [3 : 0] s_axi_qdma_mm_bid,
+  output    [1 : 0] s_axi_qdma_mm_bresp,
+  output            s_axi_qdma_mm_bvalid,
+  input             s_axi_qdma_mm_bready,
+  input     [3 : 0] s_axi_qdma_mm_arid,
+  input    [63 : 0] s_axi_qdma_mm_araddr,
+  input     [7 : 0] s_axi_qdma_mm_arlen,
+  input     [2 : 0] s_axi_qdma_mm_arsize,
+  input     [1 : 0] s_axi_qdma_mm_arburst,
+  input     [3 : 0] s_axi_qdma_mm_arcache,
+  input     [2 : 0] s_axi_qdma_mm_arprot,
+  input             s_axi_qdma_mm_arvalid,
+  output            s_axi_qdma_mm_arready,
+  output    [3 : 0] s_axi_qdma_mm_rid,
+  output  [511 : 0] s_axi_qdma_mm_rdata,
+  output    [1 : 0] s_axi_qdma_mm_rresp,
+  output            s_axi_qdma_mm_rlast,
+  output            s_axi_qdma_mm_rvalid,
+  input             s_axi_qdma_mm_rready,
+  input             s_axi_qdma_mm_arlock,
+  input     [3 : 0] s_axi_qdma_mm_arqos,
+
+  input     [3 : 0] s_axi_from_sys_crossbar_awid,
+  input    [63 : 0] s_axi_from_sys_crossbar_awaddr,
+  input     [3 : 0] s_axi_from_sys_crossbar_awqos,
+  input     [7 : 0] s_axi_from_sys_crossbar_awlen,
+  input     [2 : 0] s_axi_from_sys_crossbar_awsize,
+  input     [1 : 0] s_axi_from_sys_crossbar_awburst,
+  input     [3 : 0] s_axi_from_sys_crossbar_awcache,
+  input     [2 : 0] s_axi_from_sys_crossbar_awprot,
+  input             s_axi_from_sys_crossbar_awvalid,
+  output            s_axi_from_sys_crossbar_awready,
+  input   [511 : 0] s_axi_from_sys_crossbar_wdata,
+  input    [63 : 0] s_axi_from_sys_crossbar_wstrb,
+  input             s_axi_from_sys_crossbar_wlast,
+  input             s_axi_from_sys_crossbar_wvalid,
+  output            s_axi_from_sys_crossbar_wready,
+  input             s_axi_from_sys_crossbar_awlock,
+  output    [3 : 0] s_axi_from_sys_crossbar_bid,
+  output    [1 : 0] s_axi_from_sys_crossbar_bresp,
+  output            s_axi_from_sys_crossbar_bvalid,
+  input             s_axi_from_sys_crossbar_bready,
+  input     [3 : 0] s_axi_from_sys_crossbar_arid,
+  input    [63 : 0] s_axi_from_sys_crossbar_araddr,
+  input     [7 : 0] s_axi_from_sys_crossbar_arlen,
+  input     [2 : 0] s_axi_from_sys_crossbar_arsize,
+  input     [1 : 0] s_axi_from_sys_crossbar_arburst,
+  input     [3 : 0] s_axi_from_sys_crossbar_arcache,
+  input     [2 : 0] s_axi_from_sys_crossbar_arprot,
+  input             s_axi_from_sys_crossbar_arvalid,
+  output            s_axi_from_sys_crossbar_arready,
+  output    [3 : 0] s_axi_from_sys_crossbar_rid,
+  output  [511 : 0] s_axi_from_sys_crossbar_rdata,
+  output    [1 : 0] s_axi_from_sys_crossbar_rresp,
+  output            s_axi_from_sys_crossbar_rlast,
+  output            s_axi_from_sys_crossbar_rvalid,
+  input             s_axi_from_sys_crossbar_rready,
+  input             s_axi_from_sys_crossbar_arlock,
+  input     [3 : 0] s_axi_from_sys_crossbar_arqos,
+
+  output    [3 : 0] m_axi_dev_mem_awid,
+  output   [63 : 0] m_axi_dev_mem_awaddr,
+  output    [7 : 0] m_axi_dev_mem_awlen,
+  output    [2 : 0] m_axi_dev_mem_awsize,
+  output    [1 : 0] m_axi_dev_mem_awburst,
+  output            m_axi_dev_mem_awlock,
+  output    [3 : 0] m_axi_dev_mem_awqos,
+  output    [3 : 0] m_axi_dev_mem_awregion,
+  output    [3 : 0] m_axi_dev_mem_awcache,
+  output    [2 : 0] m_axi_dev_mem_awprot,
+  output            m_axi_dev_mem_awvalid,
+  input             m_axi_dev_mem_awready,
+  output  [511 : 0] m_axi_dev_mem_wdata,
+  output   [63 : 0] m_axi_dev_mem_wstrb,
+  output            m_axi_dev_mem_wlast,
+  output            m_axi_dev_mem_wvalid,
+  input             m_axi_dev_mem_wready,
+  input     [3 : 0] m_axi_dev_mem_bid,
+  input     [1 : 0] m_axi_dev_mem_bresp,
+  input             m_axi_dev_mem_bvalid,
+  output            m_axi_dev_mem_bready,
+  output    [3 : 0] m_axi_dev_mem_arid,
+  output   [63 : 0] m_axi_dev_mem_araddr,
+  output    [7 : 0] m_axi_dev_mem_arlen,
+  output    [2 : 0] m_axi_dev_mem_arsize,
+  output    [1 : 0] m_axi_dev_mem_arburst,
+  output            m_axi_dev_mem_arlock,
+  output    [3 : 0] m_axi_dev_mem_arqos,
+  output    [3 : 0] m_axi_dev_mem_arregion,
+  output    [3 : 0] m_axi_dev_mem_arcache,
+  output    [2 : 0] m_axi_dev_mem_arprot,
+  output            m_axi_dev_mem_arvalid,
+  input             m_axi_dev_mem_arready,
+  input     [3 : 0] m_axi_dev_mem_rid,
+  input   [511 : 0] m_axi_dev_mem_rdata,
+  input     [1 : 0] m_axi_dev_mem_rresp,
+  input             m_axi_dev_mem_rlast,
+  input             m_axi_dev_mem_rvalid,
+  output            m_axi_dev_mem_rready,
+
+  input             axis_aclk,
+  input             axis_arestn
+);
+
+localparam C_NUM_MASTERS = 2;
+
+localparam C_QDMA_MM_IDX          = 0;
+localparam C_FROM_SYS_CROSSBAR_IDX  = 1;
+
+logic   [C_NUM_MASTERS*4-1 : 0] axi_awid;
+logic  [C_NUM_MASTERS*64-1 : 0] axi_awaddr;
+logic   [C_NUM_MASTERS*8-1 : 0] axi_awlen;
+logic   [C_NUM_MASTERS*3-1 : 0] axi_awsize;
+logic   [C_NUM_MASTERS*2-1 : 0] axi_awburst;
+logic     [C_NUM_MASTERS-1 : 0] axi_awlock;
+logic   [C_NUM_MASTERS*4-1 : 0] axi_awcache;
+logic   [C_NUM_MASTERS*3-1 : 0] axi_awprot;
+logic   [C_NUM_MASTERS*4-1 : 0] axi_awqos;
+logic     [C_NUM_MASTERS-1 : 0] axi_awvalid;
+logic     [C_NUM_MASTERS-1 : 0] axi_awready;
+logic [C_NUM_MASTERS*512-1 : 0] axi_wdata;
+logic  [C_NUM_MASTERS*64-1 : 0] axi_wstrb;
+logic     [C_NUM_MASTERS-1 : 0] axi_wlast;
+logic     [C_NUM_MASTERS-1 : 0] axi_wvalid;
+logic     [C_NUM_MASTERS-1 : 0] axi_wready;
+logic   [C_NUM_MASTERS*4-1 : 0] axi_bid;
+logic   [C_NUM_MASTERS*2-1 : 0] axi_bresp;
+logic     [C_NUM_MASTERS-1 : 0] axi_bvalid;
+logic     [C_NUM_MASTERS-1 : 0] axi_bready;
+logic   [C_NUM_MASTERS*4-1 : 0] axi_arid;
+logic  [C_NUM_MASTERS*64-1 : 0] axi_araddr;
+logic   [C_NUM_MASTERS*8-1 : 0] axi_arlen;
+logic   [C_NUM_MASTERS*3-1 : 0] axi_arsize;
+logic   [C_NUM_MASTERS*2-1 : 0] axi_arburst;
+logic     [C_NUM_MASTERS-1 : 0] axi_arlock;
+logic   [C_NUM_MASTERS*4-1 : 0] axi_arcache;
+logic   [C_NUM_MASTERS*3-1 : 0] axi_arprot;
+logic   [C_NUM_MASTERS*4-1 : 0] axi_arqos;
+logic     [C_NUM_MASTERS-1 : 0] axi_arvalid;
+logic     [C_NUM_MASTERS-1 : 0] axi_arready;
+logic   [C_NUM_MASTERS*4-1 : 0] axi_rid;
+logic [C_NUM_MASTERS*512-1 : 0] axi_rdata;
+logic   [C_NUM_MASTERS*2-1 : 0] axi_rresp;
+logic     [C_NUM_MASTERS-1 : 0] axi_rlast;
+logic     [C_NUM_MASTERS-1 : 0] axi_rvalid;
+logic     [C_NUM_MASTERS-1 : 0] axi_rready;
+
+
+// AXI slave signals for data access from qdma mm channel
+assign axi_awid   [C_QDMA_MM_IDX*4 +: 4]                = s_axi_qdma_mm_awvalid ? s_axi_qdma_mm_awid : 4'd0;
+assign axi_awaddr [C_QDMA_MM_IDX *64 +: 64]             = s_axi_qdma_mm_awaddr;
+assign axi_awqos  [C_QDMA_MM_IDX *4 +: 4]               = s_axi_qdma_mm_awqos;
+assign axi_awlen  [C_QDMA_MM_IDX *8 +: 8]               = s_axi_qdma_mm_awlen;
+assign axi_awsize [C_QDMA_MM_IDX *3 +: 3]               = s_axi_qdma_mm_awsize;
+assign axi_awburst[C_QDMA_MM_IDX *2 +: 2]               = s_axi_qdma_mm_awburst;
+assign axi_awcache[C_QDMA_MM_IDX *4 +: 4]               = s_axi_qdma_mm_awcache;
+assign axi_awprot [C_QDMA_MM_IDX *3 +: 3]               = s_axi_qdma_mm_awprot;
+assign axi_awvalid[C_QDMA_MM_IDX *1 +: 1]               = s_axi_qdma_mm_awvalid;
+assign s_axi_qdma_mm_awready                            = axi_awready[C_QDMA_MM_IDX *1 +: 1];
+assign axi_wdata  [C_QDMA_MM_IDX *512 +: 512]           = s_axi_qdma_mm_wdata;
+assign axi_wstrb  [C_QDMA_MM_IDX *64 +: 64]             = s_axi_qdma_mm_wstrb;
+assign axi_wlast  [C_QDMA_MM_IDX *1 +: 1]               = s_axi_qdma_mm_wlast;
+assign axi_wvalid [C_QDMA_MM_IDX *1 +: 1]               = s_axi_qdma_mm_wvalid;
+assign s_axi_qdma_mm_wready                             = axi_wready[C_QDMA_MM_IDX *1 +: 1];
+assign axi_awlock [C_QDMA_MM_IDX *1 +: 1]               = s_axi_qdma_mm_awlock;
+assign s_axi_qdma_mm_bid                                = axi_bid[C_QDMA_MM_IDX *4 +: 4];
+assign s_axi_qdma_mm_bresp                              = axi_bresp[C_QDMA_MM_IDX *2 +: 2];
+assign s_axi_qdma_mm_bvalid                             = axi_bvalid[C_QDMA_MM_IDX *1 +: 1];
+assign axi_bready [C_QDMA_MM_IDX *1 +: 1]               = s_axi_qdma_mm_bready;
+assign axi_arid   [C_QDMA_MM_IDX *4 +: 4]               = s_axi_qdma_mm_arvalid ? s_axi_qdma_mm_arid : 4'd0;
+assign axi_araddr [C_QDMA_MM_IDX *64 +: 64]             = s_axi_qdma_mm_araddr;
+assign axi_arlen  [C_QDMA_MM_IDX *8  +: 8]              = s_axi_qdma_mm_arlen;
+assign axi_arsize [C_QDMA_MM_IDX *3  +: 3]              = s_axi_qdma_mm_arsize;
+assign axi_arburst[C_QDMA_MM_IDX *2  +: 2]              = s_axi_qdma_mm_arburst;
+assign axi_arcache[C_QDMA_MM_IDX *4  +: 4]              = s_axi_qdma_mm_arcache;
+assign axi_arprot [C_QDMA_MM_IDX *3  +: 3]              = s_axi_qdma_mm_arprot;
+assign axi_arvalid[C_QDMA_MM_IDX *1  +: 1]              = s_axi_qdma_mm_arvalid;
+assign s_axi_qdma_mm_arready                            = axi_arready[C_QDMA_MM_IDX *1 +: 1];
+assign s_axi_qdma_mm_rid                                = axi_rid[C_QDMA_MM_IDX *4 +: 4];
+assign s_axi_qdma_mm_rdata                              = axi_rdata[C_QDMA_MM_IDX *512 +: 512];
+assign s_axi_qdma_mm_rresp                              = axi_rresp[C_QDMA_MM_IDX *2 +: 2];
+assign s_axi_qdma_mm_rlast                              = axi_rlast[C_QDMA_MM_IDX *1 +: 1];
+assign s_axi_qdma_mm_rvalid                             = axi_rvalid[C_QDMA_MM_IDX *1 +: 1];
+assign axi_rready [C_QDMA_MM_IDX *1 +: 1]               = s_axi_qdma_mm_rready;
+assign axi_arlock [C_QDMA_MM_IDX *1 +: 1]               = s_axi_qdma_mm_arlock;
+assign axi_arqos  [C_QDMA_MM_IDX *4 +: 4]               = s_axi_qdma_mm_arqos;
+
+//s_axi_from_sys_crossbar_awid
+assign axi_awid   [C_FROM_SYS_CROSSBAR_IDX *4 +: 4]      = s_axi_from_sys_crossbar_awvalid ? s_axi_from_sys_crossbar_awid : 4'd0;
+assign axi_awaddr [C_FROM_SYS_CROSSBAR_IDX *64 +: 64]    = s_axi_from_sys_crossbar_awaddr;
+assign axi_awqos  [C_FROM_SYS_CROSSBAR_IDX *4 +: 4]      = s_axi_from_sys_crossbar_awqos;
+assign axi_awlen  [C_FROM_SYS_CROSSBAR_IDX *8 +: 8]      = s_axi_from_sys_crossbar_awlen;
+assign axi_awsize [C_FROM_SYS_CROSSBAR_IDX *3 +: 3]      = s_axi_from_sys_crossbar_awsize;
+assign axi_awburst[C_FROM_SYS_CROSSBAR_IDX *2 +: 2]      = s_axi_from_sys_crossbar_awburst;
+assign axi_awcache[C_FROM_SYS_CROSSBAR_IDX *4 +: 4]      = s_axi_from_sys_crossbar_awcache;
+assign axi_awprot [C_FROM_SYS_CROSSBAR_IDX *3 +: 3]      = s_axi_from_sys_crossbar_awprot;
+assign axi_awvalid[C_FROM_SYS_CROSSBAR_IDX *1 +: 1]      = s_axi_from_sys_crossbar_awvalid;
+assign s_axi_from_sys_crossbar_awready                   = axi_awready[C_FROM_SYS_CROSSBAR_IDX *1 +: 1];
+assign axi_wdata  [C_FROM_SYS_CROSSBAR_IDX *512 +: 512]  = s_axi_from_sys_crossbar_wdata;
+assign axi_wstrb  [C_FROM_SYS_CROSSBAR_IDX *64 +: 64]    = s_axi_from_sys_crossbar_wstrb;
+assign axi_wlast  [C_FROM_SYS_CROSSBAR_IDX *1 +: 1]      = s_axi_from_sys_crossbar_wlast;
+assign axi_wvalid [C_FROM_SYS_CROSSBAR_IDX *1 +: 1]      = s_axi_from_sys_crossbar_wvalid;
+assign s_axi_from_sys_crossbar_wready                    = axi_wready[C_FROM_SYS_CROSSBAR_IDX *1 +: 1];
+assign axi_awlock [C_FROM_SYS_CROSSBAR_IDX *1 +: 1]      = s_axi_from_sys_crossbar_awlock;
+assign s_axi_from_sys_crossbar_bid                       = axi_bid[C_FROM_SYS_CROSSBAR_IDX *4 +: 4];
+assign s_axi_from_sys_crossbar_bresp                     = axi_bresp[C_FROM_SYS_CROSSBAR_IDX *2 +: 2];
+assign s_axi_from_sys_crossbar_bvalid                    = axi_bvalid[C_FROM_SYS_CROSSBAR_IDX *1 +: 1];
+assign axi_bready [C_FROM_SYS_CROSSBAR_IDX *1 +: 1]      = s_axi_from_sys_crossbar_bready;
+assign axi_arid   [C_FROM_SYS_CROSSBAR_IDX *4 +: 4]      = s_axi_from_sys_crossbar_arvalid ? s_axi_from_sys_crossbar_arid : 4'd0;
+assign axi_araddr [C_FROM_SYS_CROSSBAR_IDX *64 +: 64]    = s_axi_from_sys_crossbar_araddr;
+assign axi_arlen  [C_FROM_SYS_CROSSBAR_IDX *8  +: 8]     = s_axi_from_sys_crossbar_arlen;
+assign axi_arsize [C_FROM_SYS_CROSSBAR_IDX *3  +: 3]     = s_axi_from_sys_crossbar_arsize;
+assign axi_arburst[C_FROM_SYS_CROSSBAR_IDX *2  +: 2]     = s_axi_from_sys_crossbar_arburst;
+assign axi_arcache[C_FROM_SYS_CROSSBAR_IDX *4  +: 4]     = s_axi_from_sys_crossbar_arcache;
+assign axi_arprot [C_FROM_SYS_CROSSBAR_IDX *3  +: 3]     = s_axi_from_sys_crossbar_arprot;
+assign axi_arvalid[C_FROM_SYS_CROSSBAR_IDX *1  +: 1]     = s_axi_from_sys_crossbar_arvalid;
+assign s_axi_from_sys_crossbar_arready                   = axi_arready[C_FROM_SYS_CROSSBAR_IDX *1 +: 1];
+assign s_axi_from_sys_crossbar_rid                       = axi_rid[C_FROM_SYS_CROSSBAR_IDX *4 +: 4];
+assign s_axi_from_sys_crossbar_rdata                     = axi_rdata[C_FROM_SYS_CROSSBAR_IDX *512 +: 512];
+assign s_axi_from_sys_crossbar_rresp                     = axi_rresp[C_FROM_SYS_CROSSBAR_IDX *2 +: 2];
+assign s_axi_from_sys_crossbar_rlast                     = axi_rlast[C_FROM_SYS_CROSSBAR_IDX *1 +: 1];
+assign s_axi_from_sys_crossbar_rvalid                    = axi_rvalid[C_FROM_SYS_CROSSBAR_IDX *1 +: 1];
+assign axi_rready [C_FROM_SYS_CROSSBAR_IDX *1 +: 1]      = s_axi_from_sys_crossbar_rready;
+assign axi_arlock [C_FROM_SYS_CROSSBAR_IDX *1 +: 1]      = s_axi_from_sys_crossbar_arlock;
+assign axi_arqos  [C_FROM_SYS_CROSSBAR_IDX *4 +: 4]      = s_axi_from_sys_crossbar_arqos;
+
+dev_mem_2to1_axi_crossbar dev_mem_2to1_axi_crossbar_inst (
+  // Master interface only has 4-bit ID width
+  .m_axi_awaddr    (m_axi_dev_mem_awaddr),
+  .m_axi_awprot    (m_axi_dev_mem_awprot),
+  .m_axi_awvalid   (m_axi_dev_mem_awvalid),
+  .m_axi_awready   (m_axi_dev_mem_awready),
+  .m_axi_awsize    (m_axi_dev_mem_awsize),
+  .m_axi_awburst   (m_axi_dev_mem_awburst),
+  .m_axi_awcache   (m_axi_dev_mem_awcache),
+  .m_axi_awlen     (m_axi_dev_mem_awlen),
+  .m_axi_awlock    (m_axi_dev_mem_awlock),
+  .m_axi_awqos     (m_axi_dev_mem_awqos),
+  .m_axi_awregion  (m_axi_dev_mem_awregion),
+  .m_axi_awid      (m_axi_dev_mem_awid),
+  .m_axi_wdata     (m_axi_dev_mem_wdata),
+  .m_axi_wstrb     (m_axi_dev_mem_wstrb),
+  .m_axi_wvalid    (m_axi_dev_mem_wvalid),
+  .m_axi_wready    (m_axi_dev_mem_wready),
+  .m_axi_wlast     (m_axi_dev_mem_wlast),
+  .m_axi_bresp     (m_axi_dev_mem_bresp),
+  .m_axi_bvalid    (m_axi_dev_mem_bvalid),
+  .m_axi_bready    (m_axi_dev_mem_bready),
+  .m_axi_bid       (m_axi_dev_mem_bid),
+  .m_axi_araddr    (m_axi_dev_mem_araddr),
+  .m_axi_arprot    (m_axi_dev_mem_arprot),
+  .m_axi_arvalid   (m_axi_dev_mem_arvalid),
+  .m_axi_arready   (m_axi_dev_mem_arready),
+  .m_axi_arsize    (m_axi_dev_mem_arsize),
+  .m_axi_arburst   (m_axi_dev_mem_arburst),
+  .m_axi_arcache   (m_axi_dev_mem_arcache),
+  .m_axi_arlock    (m_axi_dev_mem_arlock),
+  .m_axi_arlen     (m_axi_dev_mem_arlen),
+  .m_axi_arqos     (m_axi_dev_mem_arqos),
+  .m_axi_arregion  (m_axi_dev_mem_arregion),
+  .m_axi_arid      (m_axi_dev_mem_arid),
+  .m_axi_rdata     (m_axi_dev_mem_rdata),
+  .m_axi_rresp     (m_axi_dev_mem_rresp),
+  .m_axi_rvalid    (m_axi_dev_mem_rvalid),
+  .m_axi_rready    (m_axi_dev_mem_rready),
+  .m_axi_rlast     (m_axi_dev_mem_rlast),
+  .m_axi_rid       (m_axi_dev_mem_rid),
+
+  // Slave interface has 12-bit ID width
+  .s_axi_awid      (axi_awid),
+  .s_axi_awaddr    (axi_awaddr),
+  .s_axi_awqos     (axi_awqos),
+  .s_axi_awlen     (axi_awlen),
+  .s_axi_awsize    (axi_awsize),
+  .s_axi_awburst   (axi_awburst),
+  .s_axi_awcache   (axi_awcache),
+  .s_axi_awprot    (axi_awprot),
+  .s_axi_awvalid   (axi_awvalid),
+  .s_axi_awready   (axi_awready),
+  .s_axi_wdata     (axi_wdata),
+  .s_axi_wstrb     (axi_wstrb),
+  .s_axi_wlast     (axi_wlast),
+  .s_axi_wvalid    (axi_wvalid),
+  .s_axi_wready    (axi_wready),
+  .s_axi_awlock    (axi_awlock),
+  .s_axi_bid       (axi_bid),
+  .s_axi_bresp     (axi_bresp),
+  .s_axi_bvalid    (axi_bvalid),
+  .s_axi_bready    (axi_bready),
+  .s_axi_arid      (axi_arid),
+  .s_axi_araddr    (axi_araddr),
+  .s_axi_arlen     (axi_arlen),
+  .s_axi_arsize    (axi_arsize),
+  .s_axi_arburst   (axi_arburst),
+  .s_axi_arcache   (axi_arcache),
+  .s_axi_arprot    (axi_arprot),
+  .s_axi_arvalid   (axi_arvalid),
+  .s_axi_arready   (axi_arready),
+  .s_axi_rid       (axi_rid),
+  .s_axi_rdata     (axi_rdata),
+  .s_axi_rresp     (axi_rresp),
+  .s_axi_rlast     (axi_rlast),
+  .s_axi_rvalid    (axi_rvalid),
+  .s_axi_rready    (axi_rready),
+  .s_axi_arlock    (axi_arlock),
+  .s_axi_arqos     (axi_arqos),
+
+  .aclk   (axis_aclk),
+  .aresetn(axis_arestn)
+);
+
+endmodule: axi_2to1_interconnect_to_dev_mem
\ No newline at end of file
diff --git a/src/utility/axi_7to2_interconnect_to_sys_mem.sv b/src/utility/axi_7to2_interconnect_to_sys_mem.sv
new file mode 100755
index 0000000..eb5bf20
--- /dev/null
+++ b/src/utility/axi_7to2_interconnect_to_sys_mem.sv
@@ -0,0 +1,914 @@
+// *************************************************************************
+//
+// Copyright 2022 Xilinx, Inc.
+//
+// Licensed under the Apache License, Version 2.0 (the "License");
+// you may not use this file except in compliance with the License.
+// You may obtain a copy of the License at
+//
+//     http://www.apache.org/licenses/LICENSE-2.0
+//
+// Unless required by applicable law or agreed to in writing, software
+// distributed under the License is distributed on an "AS IS" BASIS,
+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+// See the License for the specific language governing permissions and
+// limitations under the License.
+//
+// *************************************************************************
+`timescale 1ns/1ps
+
+module axi_7to2_interconnect_to_sys_mem #(
+  parameter C_AXI_DATA_WIDTH = 512,
+  parameter C_AXI_ADDR_WIDTH = 64
+) (
+  input             s_axi_rdma_get_wqe_awid,
+  input    [63 : 0] s_axi_rdma_get_wqe_awaddr,
+  input     [3 : 0] s_axi_rdma_get_wqe_awqos,
+  input     [7 : 0] s_axi_rdma_get_wqe_awlen,
+  input     [2 : 0] s_axi_rdma_get_wqe_awsize,
+  input     [1 : 0] s_axi_rdma_get_wqe_awburst,
+  input     [3 : 0] s_axi_rdma_get_wqe_awcache,
+  input     [2 : 0] s_axi_rdma_get_wqe_awprot,
+  input             s_axi_rdma_get_wqe_awvalid,
+  output            s_axi_rdma_get_wqe_awready,
+  input   [511 : 0] s_axi_rdma_get_wqe_wdata,
+  input    [63 : 0] s_axi_rdma_get_wqe_wstrb,
+  input             s_axi_rdma_get_wqe_wlast,
+  input             s_axi_rdma_get_wqe_wvalid,
+  output            s_axi_rdma_get_wqe_wready,
+  input             s_axi_rdma_get_wqe_awlock,
+  output            s_axi_rdma_get_wqe_bid,
+  output    [1 : 0] s_axi_rdma_get_wqe_bresp,
+  output            s_axi_rdma_get_wqe_bvalid,
+  input             s_axi_rdma_get_wqe_bready,
+  input             s_axi_rdma_get_wqe_arid,
+  input    [63 : 0] s_axi_rdma_get_wqe_araddr,
+  input     [7 : 0] s_axi_rdma_get_wqe_arlen,
+  input     [2 : 0] s_axi_rdma_get_wqe_arsize,
+  input     [1 : 0] s_axi_rdma_get_wqe_arburst,
+  input     [3 : 0] s_axi_rdma_get_wqe_arcache,
+  input     [2 : 0] s_axi_rdma_get_wqe_arprot,
+  input             s_axi_rdma_get_wqe_arvalid,
+  output            s_axi_rdma_get_wqe_arready,
+  output            s_axi_rdma_get_wqe_rid,
+  output  [511 : 0] s_axi_rdma_get_wqe_rdata,
+  output    [1 : 0] s_axi_rdma_get_wqe_rresp,
+  output            s_axi_rdma_get_wqe_rlast,
+  output            s_axi_rdma_get_wqe_rvalid,
+  input             s_axi_rdma_get_wqe_rready,
+  input             s_axi_rdma_get_wqe_arlock,
+  input     [3 : 0] s_axi_rdma_get_wqe_arqos,
+
+  input             s_axi_rdma_get_payload_awid,
+  input    [63 : 0] s_axi_rdma_get_payload_awaddr,
+  input     [3 : 0] s_axi_rdma_get_payload_awqos,
+  input     [7 : 0] s_axi_rdma_get_payload_awlen,
+  input     [2 : 0] s_axi_rdma_get_payload_awsize,
+  input     [1 : 0] s_axi_rdma_get_payload_awburst,
+  input     [3 : 0] s_axi_rdma_get_payload_awcache,
+  input     [2 : 0] s_axi_rdma_get_payload_awprot,
+  input             s_axi_rdma_get_payload_awvalid,
+  output            s_axi_rdma_get_payload_awready,
+  input   [511 : 0] s_axi_rdma_get_payload_wdata,
+  input    [63 : 0] s_axi_rdma_get_payload_wstrb,
+  input             s_axi_rdma_get_payload_wlast,
+  input             s_axi_rdma_get_payload_wvalid,
+  output            s_axi_rdma_get_payload_wready,
+  input             s_axi_rdma_get_payload_awlock,
+  output            s_axi_rdma_get_payload_bid,
+  output    [1 : 0] s_axi_rdma_get_payload_bresp,
+  output            s_axi_rdma_get_payload_bvalid,
+  input             s_axi_rdma_get_payload_bready,
+  input             s_axi_rdma_get_payload_arid,
+  input    [63 : 0] s_axi_rdma_get_payload_araddr,
+  input     [7 : 0] s_axi_rdma_get_payload_arlen,
+  input     [2 : 0] s_axi_rdma_get_payload_arsize,
+  input     [1 : 0] s_axi_rdma_get_payload_arburst,
+  input     [3 : 0] s_axi_rdma_get_payload_arcache,
+  input     [2 : 0] s_axi_rdma_get_payload_arprot,
+  input             s_axi_rdma_get_payload_arvalid,
+  output            s_axi_rdma_get_payload_arready,
+  output            s_axi_rdma_get_payload_rid,
+  output  [511 : 0] s_axi_rdma_get_payload_rdata,
+  output    [1 : 0] s_axi_rdma_get_payload_rresp,
+  output            s_axi_rdma_get_payload_rlast,
+  output            s_axi_rdma_get_payload_rvalid,
+  input             s_axi_rdma_get_payload_rready,
+  input             s_axi_rdma_get_payload_arlock,
+  input     [3 : 0] s_axi_rdma_get_payload_arqos,
+
+  input             s_axi_rdma_completion_awid,
+  input    [63 : 0] s_axi_rdma_completion_awaddr,
+  input     [3 : 0] s_axi_rdma_completion_awqos,
+  input     [7 : 0] s_axi_rdma_completion_awlen,
+  input     [2 : 0] s_axi_rdma_completion_awsize,
+  input     [1 : 0] s_axi_rdma_completion_awburst,
+  input     [3 : 0] s_axi_rdma_completion_awcache,
+  input     [2 : 0] s_axi_rdma_completion_awprot,
+  input             s_axi_rdma_completion_awvalid,
+  output            s_axi_rdma_completion_awready,
+  input   [511 : 0] s_axi_rdma_completion_wdata,
+  input    [63 : 0] s_axi_rdma_completion_wstrb,
+  input             s_axi_rdma_completion_wlast,
+  input             s_axi_rdma_completion_wvalid,
+  output            s_axi_rdma_completion_wready,
+  input             s_axi_rdma_completion_awlock,
+  output            s_axi_rdma_completion_bid,
+  output    [1 : 0] s_axi_rdma_completion_bresp,
+  output            s_axi_rdma_completion_bvalid,
+  input             s_axi_rdma_completion_bready,
+  input             s_axi_rdma_completion_arid,
+  input    [63 : 0] s_axi_rdma_completion_araddr,
+  input     [7 : 0] s_axi_rdma_completion_arlen,
+  input     [2 : 0] s_axi_rdma_completion_arsize,
+  input     [1 : 0] s_axi_rdma_completion_arburst,
+  input     [3 : 0] s_axi_rdma_completion_arcache,
+  input     [2 : 0] s_axi_rdma_completion_arprot,
+  input             s_axi_rdma_completion_arvalid,
+  output            s_axi_rdma_completion_arready,
+  output            s_axi_rdma_completion_rid,
+  output  [511 : 0] s_axi_rdma_completion_rdata,
+  output    [1 : 0] s_axi_rdma_completion_rresp,
+  output            s_axi_rdma_completion_rlast,
+  output            s_axi_rdma_completion_rvalid,
+  input             s_axi_rdma_completion_rready,
+  input             s_axi_rdma_completion_arlock,
+  input     [3 : 0] s_axi_rdma_completion_arqos,
+
+  input             s_axi_rdma_send_write_payload_awid,
+  input    [63 : 0] s_axi_rdma_send_write_payload_awaddr,
+  input     [3 : 0] s_axi_rdma_send_write_payload_awqos,
+  input     [7 : 0] s_axi_rdma_send_write_payload_awlen,
+  input     [2 : 0] s_axi_rdma_send_write_payload_awsize,
+  input     [1 : 0] s_axi_rdma_send_write_payload_awburst,
+  input     [3 : 0] s_axi_rdma_send_write_payload_awcache,
+  input     [2 : 0] s_axi_rdma_send_write_payload_awprot,
+  input             s_axi_rdma_send_write_payload_awvalid,
+  output            s_axi_rdma_send_write_payload_awready,
+  input   [511 : 0] s_axi_rdma_send_write_payload_wdata,
+  input    [63 : 0] s_axi_rdma_send_write_payload_wstrb,
+  input             s_axi_rdma_send_write_payload_wlast,
+  input             s_axi_rdma_send_write_payload_wvalid,
+  output            s_axi_rdma_send_write_payload_wready,
+  input             s_axi_rdma_send_write_payload_awlock,
+  output            s_axi_rdma_send_write_payload_bid,
+  output    [1 : 0] s_axi_rdma_send_write_payload_bresp,
+  output            s_axi_rdma_send_write_payload_bvalid,
+  input             s_axi_rdma_send_write_payload_bready,
+  input             s_axi_rdma_send_write_payload_arid,
+  input    [63 : 0] s_axi_rdma_send_write_payload_araddr,
+  input     [7 : 0] s_axi_rdma_send_write_payload_arlen,
+  input     [2 : 0] s_axi_rdma_send_write_payload_arsize,
+  input     [1 : 0] s_axi_rdma_send_write_payload_arburst,
+  input     [3 : 0] s_axi_rdma_send_write_payload_arcache,
+  input     [2 : 0] s_axi_rdma_send_write_payload_arprot,
+  input             s_axi_rdma_send_write_payload_arvalid,
+  output            s_axi_rdma_send_write_payload_arready,
+  output            s_axi_rdma_send_write_payload_rid,
+  output  [511 : 0] s_axi_rdma_send_write_payload_rdata,
+  output    [1 : 0] s_axi_rdma_send_write_payload_rresp,
+  output            s_axi_rdma_send_write_payload_rlast,
+  output            s_axi_rdma_send_write_payload_rvalid,
+  input             s_axi_rdma_send_write_payload_rready,
+  input             s_axi_rdma_send_write_payload_arlock,
+  input     [3 : 0] s_axi_rdma_send_write_payload_arqos,
+
+  input             s_axi_rdma_rsp_payload_awid,
+  input    [63 : 0] s_axi_rdma_rsp_payload_awaddr,
+  input     [3 : 0] s_axi_rdma_rsp_payload_awqos,
+  input     [7 : 0] s_axi_rdma_rsp_payload_awlen,
+  input     [2 : 0] s_axi_rdma_rsp_payload_awsize,
+  input     [1 : 0] s_axi_rdma_rsp_payload_awburst,
+  input     [3 : 0] s_axi_rdma_rsp_payload_awcache,
+  input     [2 : 0] s_axi_rdma_rsp_payload_awprot,
+  input             s_axi_rdma_rsp_payload_awvalid,
+  output            s_axi_rdma_rsp_payload_awready,
+  input   [511 : 0] s_axi_rdma_rsp_payload_wdata,
+  input    [63 : 0] s_axi_rdma_rsp_payload_wstrb,
+  input             s_axi_rdma_rsp_payload_wlast,
+  input             s_axi_rdma_rsp_payload_wvalid,
+  output            s_axi_rdma_rsp_payload_wready,
+  input             s_axi_rdma_rsp_payload_awlock,
+  output            s_axi_rdma_rsp_payload_bid,
+  output    [1 : 0] s_axi_rdma_rsp_payload_bresp,
+  output            s_axi_rdma_rsp_payload_bvalid,
+  input             s_axi_rdma_rsp_payload_bready,
+  input             s_axi_rdma_rsp_payload_arid,
+  input    [63 : 0] s_axi_rdma_rsp_payload_araddr,
+  input     [7 : 0] s_axi_rdma_rsp_payload_arlen,
+  input     [2 : 0] s_axi_rdma_rsp_payload_arsize,
+  input     [1 : 0] s_axi_rdma_rsp_payload_arburst,
+  input     [3 : 0] s_axi_rdma_rsp_payload_arcache,
+  input     [2 : 0] s_axi_rdma_rsp_payload_arprot,
+  input             s_axi_rdma_rsp_payload_arvalid,
+  output            s_axi_rdma_rsp_payload_arready,
+  output            s_axi_rdma_rsp_payload_rid,
+  output  [511 : 0] s_axi_rdma_rsp_payload_rdata,
+  output    [1 : 0] s_axi_rdma_rsp_payload_rresp,
+  output            s_axi_rdma_rsp_payload_rlast,
+  output            s_axi_rdma_rsp_payload_rvalid,
+  input             s_axi_rdma_rsp_payload_rready,
+  input             s_axi_rdma_rsp_payload_arlock,
+  input     [3 : 0] s_axi_rdma_rsp_payload_arqos,
+
+  input             s_axi_hw_hndshk_awid,
+  input    [63 : 0] s_axi_hw_hndshk_awaddr,
+  input     [3 : 0] s_axi_hw_hndshk_awqos,
+  input     [7 : 0] s_axi_hw_hndshk_awlen,
+  input     [2 : 0] s_axi_hw_hndshk_awsize,
+  input     [1 : 0] s_axi_hw_hndshk_awburst,
+  input     [3 : 0] s_axi_hw_hndshk_awcache,
+  input     [2 : 0] s_axi_hw_hndshk_awprot,
+  input             s_axi_hw_hndshk_awvalid,
+  output            s_axi_hw_hndshk_awready,
+  input   [511 : 0] s_axi_hw_hndshk_wdata,
+  input    [63 : 0] s_axi_hw_hndshk_wstrb,
+  input             s_axi_hw_hndshk_wlast,
+  input             s_axi_hw_hndshk_wvalid,
+  output            s_axi_hw_hndshk_wready,
+  input             s_axi_hw_hndshk_awlock,
+  output            s_axi_hw_hndshk_bid,
+  output    [1 : 0] s_axi_hw_hndshk_bresp,
+  output            s_axi_hw_hndshk_bvalid,
+  input             s_axi_hw_hndshk_bready,
+  input             s_axi_hw_hndshk_arid,
+  input    [63 : 0] s_axi_hw_hndshk_araddr,
+  input     [7 : 0] s_axi_hw_hndshk_arlen,
+  input     [2 : 0] s_axi_hw_hndshk_arsize,
+  input     [1 : 0] s_axi_hw_hndshk_arburst,
+  input     [3 : 0] s_axi_hw_hndshk_arcache,
+  input     [2 : 0] s_axi_hw_hndshk_arprot,
+  input             s_axi_hw_hndshk_arvalid,
+  output            s_axi_hw_hndshk_arready,
+  output            s_axi_hw_hndshk_rid,
+  output  [511 : 0] s_axi_hw_hndshk_rdata,
+  output    [1 : 0] s_axi_hw_hndshk_rresp,
+  output            s_axi_hw_hndshk_rlast,
+  output            s_axi_hw_hndshk_rvalid,
+  input             s_axi_hw_hndshk_rready,
+  input             s_axi_hw_hndshk_arlock,
+  input     [3 : 0] s_axi_hw_hndshk_arqos,
+
+  input             s_axi_payload_to_retry_buf_awid,
+  input    [63 : 0] s_axi_payload_to_retry_buf_awaddr,
+  input     [3 : 0] s_axi_payload_to_retry_buf_awqos,
+  input     [7 : 0] s_axi_payload_to_retry_buf_awlen,
+  input     [2 : 0] s_axi_payload_to_retry_buf_awsize,
+  input     [1 : 0] s_axi_payload_to_retry_buf_awburst,
+  input     [3 : 0] s_axi_payload_to_retry_buf_awcache,
+  input     [2 : 0] s_axi_payload_to_retry_buf_awprot,
+  input             s_axi_payload_to_retry_buf_awvalid,
+  output            s_axi_payload_to_retry_buf_awready,
+  input   [511 : 0] s_axi_payload_to_retry_buf_wdata,
+  input    [63 : 0] s_axi_payload_to_retry_buf_wstrb,
+  input             s_axi_payload_to_retry_buf_wlast,
+  input             s_axi_payload_to_retry_buf_wvalid,
+  output            s_axi_payload_to_retry_buf_wready,
+  input             s_axi_payload_to_retry_buf_awlock,
+  output            s_axi_payload_to_retry_buf_bid,
+  output    [1 : 0] s_axi_payload_to_retry_buf_bresp,
+  output            s_axi_payload_to_retry_buf_bvalid,
+  input             s_axi_payload_to_retry_buf_bready,
+  input             s_axi_payload_to_retry_buf_arid,
+  input    [63 : 0] s_axi_payload_to_retry_buf_araddr,
+  input     [7 : 0] s_axi_payload_to_retry_buf_arlen,
+  input     [2 : 0] s_axi_payload_to_retry_buf_arsize,
+  input     [1 : 0] s_axi_payload_to_retry_buf_arburst,
+  input     [3 : 0] s_axi_payload_to_retry_buf_arcache,
+  input     [2 : 0] s_axi_payload_to_retry_buf_arprot,
+  input             s_axi_payload_to_retry_buf_arvalid,
+  output            s_axi_payload_to_retry_buf_arready,
+  output            s_axi_payload_to_retry_buf_rid,
+  output  [511 : 0] s_axi_payload_to_retry_buf_rdata,
+  output    [1 : 0] s_axi_payload_to_retry_buf_rresp,
+  output            s_axi_payload_to_retry_buf_rlast,
+  output            s_axi_payload_to_retry_buf_rvalid,
+  input             s_axi_payload_to_retry_buf_rready,
+  input             s_axi_payload_to_retry_buf_arlock,
+  input     [3 : 0] s_axi_payload_to_retry_buf_arqos,
+
+
+  output      [2:0] m_axi_sys_mem_awid,
+  output     [63:0] m_axi_sys_mem_awaddr,
+  output      [7:0] m_axi_sys_mem_awlen,
+  output      [2:0] m_axi_sys_mem_awsize,
+  output      [1:0] m_axi_sys_mem_awburst,
+  output            m_axi_sys_mem_awlock,
+  output      [3:0] m_axi_sys_mem_awqos,
+  output      [3:0] m_axi_sys_mem_awregion,
+  output      [3:0] m_axi_sys_mem_awcache,
+  output      [2:0] m_axi_sys_mem_awprot,
+  output            m_axi_sys_mem_awvalid,
+  input             m_axi_sys_mem_awready,
+  output    [511:0] m_axi_sys_mem_wdata,
+  output     [63:0] m_axi_sys_mem_wstrb,
+  output            m_axi_sys_mem_wlast,
+  output            m_axi_sys_mem_wvalid,
+  input             m_axi_sys_mem_wready,
+  input       [2:0] m_axi_sys_mem_bid,
+  input       [1:0] m_axi_sys_mem_bresp,
+  input             m_axi_sys_mem_bvalid,
+  output            m_axi_sys_mem_bready,
+  output      [2:0] m_axi_sys_mem_arid,
+  output     [63:0] m_axi_sys_mem_araddr,
+  output      [7:0] m_axi_sys_mem_arlen,
+  output      [2:0] m_axi_sys_mem_arsize,
+  output      [1:0] m_axi_sys_mem_arburst,
+  output            m_axi_sys_mem_arlock,
+  output      [3:0] m_axi_sys_mem_arqos,
+  output      [3:0] m_axi_sys_mem_arregion,
+  output      [3:0] m_axi_sys_mem_arcache,
+  output      [2:0] m_axi_sys_mem_arprot,
+  output            m_axi_sys_mem_arvalid,
+  input             m_axi_sys_mem_arready,
+  input       [2:0] m_axi_sys_mem_rid,
+  input     [511:0] m_axi_sys_mem_rdata,
+  input       [1:0] m_axi_sys_mem_rresp,
+  input             m_axi_sys_mem_rlast,
+  input             m_axi_sys_mem_rvalid,
+  output            m_axi_sys_mem_rready,
+
+  output      [2:0] m_axi_sys_to_dev_crossbar_awid,
+  output     [63:0] m_axi_sys_to_dev_crossbar_awaddr,
+  output      [7:0] m_axi_sys_to_dev_crossbar_awlen,
+  output      [2:0] m_axi_sys_to_dev_crossbar_awsize,
+  output      [1:0] m_axi_sys_to_dev_crossbar_awburst,
+  output            m_axi_sys_to_dev_crossbar_awlock,
+  output      [3:0] m_axi_sys_to_dev_crossbar_awqos,
+  output      [3:0] m_axi_sys_to_dev_crossbar_awregion,
+  output      [3:0] m_axi_sys_to_dev_crossbar_awcache,
+  output      [2:0] m_axi_sys_to_dev_crossbar_awprot,
+  output            m_axi_sys_to_dev_crossbar_awvalid,
+  input             m_axi_sys_to_dev_crossbar_awready,
+  output    [511:0] m_axi_sys_to_dev_crossbar_wdata,
+  output     [63:0] m_axi_sys_to_dev_crossbar_wstrb,
+  output            m_axi_sys_to_dev_crossbar_wlast,
+  output            m_axi_sys_to_dev_crossbar_wvalid,
+  input             m_axi_sys_to_dev_crossbar_wready,
+  input       [2:0] m_axi_sys_to_dev_crossbar_bid,
+  input       [1:0] m_axi_sys_to_dev_crossbar_bresp,
+  input             m_axi_sys_to_dev_crossbar_bvalid,
+  output            m_axi_sys_to_dev_crossbar_bready,
+  output      [2:0] m_axi_sys_to_dev_crossbar_arid,
+  output     [63:0] m_axi_sys_to_dev_crossbar_araddr,
+  output      [7:0] m_axi_sys_to_dev_crossbar_arlen,
+  output      [2:0] m_axi_sys_to_dev_crossbar_arsize,
+  output      [1:0] m_axi_sys_to_dev_crossbar_arburst,
+  output            m_axi_sys_to_dev_crossbar_arlock,
+  output      [3:0] m_axi_sys_to_dev_crossbar_arqos,
+  output      [3:0] m_axi_sys_to_dev_crossbar_arregion,
+  output      [3:0] m_axi_sys_to_dev_crossbar_arcache,
+  output      [2:0] m_axi_sys_to_dev_crossbar_arprot,
+  output            m_axi_sys_to_dev_crossbar_arvalid,
+  input             m_axi_sys_to_dev_crossbar_arready,
+  input       [2:0] m_axi_sys_to_dev_crossbar_rid,
+  input     [511:0] m_axi_sys_to_dev_crossbar_rdata,
+  input       [1:0] m_axi_sys_to_dev_crossbar_rresp,
+  input             m_axi_sys_to_dev_crossbar_rlast,
+  input             m_axi_sys_to_dev_crossbar_rvalid,
+  output            m_axi_sys_to_dev_crossbar_rready,
+
+  input axis_aclk,
+  input axis_arestn
+);
+
+localparam C_NUM_MASTERS = 7;
+localparam C_NUM_SLAVES = 2;
+
+
+localparam C_RDMA_GET_WQE_IDX     = 0;
+localparam C_RDMA_GET_PAYLOAD_IDX = 1;
+localparam C_RDMA_COMPLETION_IDX  = 2;
+localparam C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX = 3;
+localparam C_RDMA_RSP_PAYLOAD_IDX = 4;
+localparam C_HW_HNDSHK_IDX    = 5;
+localparam C_RDMA_RETRY_BUF_IDX = 6;
+
+localparam C_SYS_MEM_IDX     = 0;
+localparam C_SYS_TO_DEV_CROSSBAR_IDX = 1;
+
+logic   [C_NUM_MASTERS*3-1 : 0] s_axi_awid;
+logic  [C_NUM_MASTERS*64-1 : 0] s_axi_awaddr;
+logic   [C_NUM_MASTERS*8-1 : 0] s_axi_awlen;
+logic   [C_NUM_MASTERS*3-1 : 0] s_axi_awsize;
+logic   [C_NUM_MASTERS*2-1 : 0] s_axi_awburst;
+logic     [C_NUM_MASTERS-1 : 0] s_axi_awlock;
+logic   [C_NUM_MASTERS*4-1 : 0] s_axi_awcache;
+logic   [C_NUM_MASTERS*3-1 : 0] s_axi_awprot;
+logic   [C_NUM_MASTERS*4-1 : 0] s_axi_awqos;
+logic     [C_NUM_MASTERS-1 : 0] s_axi_awvalid;
+logic     [C_NUM_MASTERS-1 : 0] s_axi_awready;
+logic [C_NUM_MASTERS*512-1 : 0] s_axi_wdata;
+logic  [C_NUM_MASTERS*64-1 : 0] s_axi_wstrb;
+logic     [C_NUM_MASTERS-1 : 0] s_axi_wlast;
+logic     [C_NUM_MASTERS-1 : 0] s_axi_wvalid;
+logic     [C_NUM_MASTERS-1 : 0] s_axi_wready;
+logic   [C_NUM_MASTERS*3-1 : 0] s_axi_bid;
+logic   [C_NUM_MASTERS*2-1 : 0] s_axi_bresp;
+logic     [C_NUM_MASTERS-1 : 0] s_axi_bvalid;
+logic     [C_NUM_MASTERS-1 : 0] s_axi_bready;
+logic   [C_NUM_MASTERS*3-1 : 0] s_axi_arid;
+logic  [C_NUM_MASTERS*64-1 : 0] s_axi_araddr;
+logic   [C_NUM_MASTERS*8-1 : 0] s_axi_arlen;
+logic   [C_NUM_MASTERS*3-1 : 0] s_axi_arsize;
+logic   [C_NUM_MASTERS*2-1 : 0] s_axi_arburst;
+logic     [C_NUM_MASTERS-1 : 0] s_axi_arlock;
+logic   [C_NUM_MASTERS*4-1 : 0] s_axi_arcache;
+logic   [C_NUM_MASTERS*3-1 : 0] s_axi_arprot;
+logic   [C_NUM_MASTERS*4-1 : 0] s_axi_arqos;
+logic     [C_NUM_MASTERS-1 : 0] s_axi_arvalid;
+logic     [C_NUM_MASTERS-1 : 0] s_axi_arready;
+logic   [C_NUM_MASTERS*3-1 : 0] s_axi_rid;
+logic [C_NUM_MASTERS*512-1 : 0] s_axi_rdata;
+logic   [C_NUM_MASTERS*2-1 : 0] s_axi_rresp;
+logic     [C_NUM_MASTERS-1 : 0] s_axi_rlast;
+logic     [C_NUM_MASTERS-1 : 0] s_axi_rvalid;
+logic     [C_NUM_MASTERS-1 : 0] s_axi_rready;
+
+logic   [C_NUM_SLAVES*3-1 : 0] m_axi_awid;
+logic  [C_NUM_SLAVES*64-1 : 0] m_axi_awaddr;
+logic   [C_NUM_SLAVES*8-1 : 0] m_axi_awlen;
+logic   [C_NUM_SLAVES*3-1 : 0] m_axi_awsize;
+logic   [C_NUM_SLAVES*2-1 : 0] m_axi_awburst;
+logic     [C_NUM_SLAVES-1 : 0] m_axi_awlock;
+logic   [C_NUM_SLAVES*4-1 : 0] m_axi_awcache;
+logic   [C_NUM_SLAVES*3-1 : 0] m_axi_awprot;
+logic   [C_NUM_SLAVES*4-1 : 0] m_axi_awqos;
+logic     [C_NUM_SLAVES-1 : 0] m_axi_awvalid;
+logic     [C_NUM_SLAVES-1 : 0] m_axi_awready;
+logic [C_NUM_SLAVES*512-1 : 0] m_axi_wdata;
+logic  [C_NUM_SLAVES*64-1 : 0] m_axi_wstrb;
+logic     [C_NUM_SLAVES-1 : 0] m_axi_wlast;
+logic     [C_NUM_SLAVES-1 : 0] m_axi_wvalid;
+logic     [C_NUM_SLAVES-1 : 0] m_axi_wready;
+logic   [C_NUM_SLAVES*3-1 : 0] m_axi_bid;
+logic   [C_NUM_SLAVES*2-1 : 0] m_axi_bresp;
+logic     [C_NUM_SLAVES-1 : 0] m_axi_bvalid;
+logic     [C_NUM_SLAVES-1 : 0] m_axi_bready;
+logic   [C_NUM_SLAVES*3-1 : 0] m_axi_arid;
+logic  [C_NUM_SLAVES*64-1 : 0] m_axi_araddr;
+logic   [C_NUM_SLAVES*8-1 : 0] m_axi_arlen;
+logic   [C_NUM_SLAVES*3-1 : 0] m_axi_arsize;
+logic   [C_NUM_SLAVES*2-1 : 0] m_axi_arburst;
+logic     [C_NUM_SLAVES-1 : 0] m_axi_arlock;
+logic   [C_NUM_SLAVES*4-1 : 0] m_axi_arcache;
+logic   [C_NUM_SLAVES*3-1 : 0] m_axi_arprot;
+logic   [C_NUM_SLAVES*4-1 : 0] m_axi_arqos;
+logic     [C_NUM_SLAVES-1 : 0] m_axi_arvalid;
+logic     [C_NUM_SLAVES-1 : 0] m_axi_arready;
+logic   [C_NUM_SLAVES*3-1 : 0] m_axi_rid;
+logic [C_NUM_SLAVES*512-1 : 0] m_axi_rdata;
+logic   [C_NUM_SLAVES*2-1 : 0] m_axi_rresp;
+logic     [C_NUM_SLAVES-1 : 0] m_axi_rlast;
+logic     [C_NUM_SLAVES-1 : 0] m_axi_rvalid;
+logic     [C_NUM_SLAVES-1 : 0] m_axi_rready;
+
+// AXI slave signals for getting wqe from system memory
+//assign s_axi_awid   [C_RDMA_GET_WQE_IDX *2 +: 2]         = {1'b0, s_axi_rdma_get_wqe_awid};
+assign s_axi_awid   [C_RDMA_GET_WQE_IDX *3 +: 3]         = s_axi_rdma_get_wqe_awvalid ? 3'd0 : 3'd0;
+assign s_axi_awaddr [C_RDMA_GET_WQE_IDX *64 +: 64]       = s_axi_rdma_get_wqe_awaddr;
+assign s_axi_awqos  [C_RDMA_GET_WQE_IDX *4 +: 4]         = s_axi_rdma_get_wqe_awqos;
+assign s_axi_awlen  [C_RDMA_GET_WQE_IDX *8 +: 8]         = s_axi_rdma_get_wqe_awlen;
+assign s_axi_awsize [C_RDMA_GET_WQE_IDX *3 +: 3]         = s_axi_rdma_get_wqe_awsize;
+assign s_axi_awburst[C_RDMA_GET_WQE_IDX *2 +: 2]         = s_axi_rdma_get_wqe_awburst;
+assign s_axi_awcache[C_RDMA_GET_WQE_IDX *4 +: 4]         = s_axi_rdma_get_wqe_awcache;
+assign s_axi_awprot [C_RDMA_GET_WQE_IDX *3 +: 3]         = s_axi_rdma_get_wqe_awprot;
+assign s_axi_awvalid[C_RDMA_GET_WQE_IDX *1 +: 1]         = s_axi_rdma_get_wqe_awvalid;
+assign s_axi_rdma_get_wqe_awready                        = s_axi_awready[C_RDMA_GET_WQE_IDX *1 +: 1];
+assign s_axi_wdata  [C_RDMA_GET_WQE_IDX *512 +: 512]     = s_axi_rdma_get_wqe_wdata;
+assign s_axi_wstrb  [C_RDMA_GET_WQE_IDX *64 +: 64]       = s_axi_rdma_get_wqe_wstrb;
+assign s_axi_wlast  [C_RDMA_GET_WQE_IDX *1 +: 1]         = s_axi_rdma_get_wqe_wlast;
+assign s_axi_wvalid [C_RDMA_GET_WQE_IDX *1 +: 1]         = s_axi_rdma_get_wqe_wvalid;
+assign s_axi_rdma_get_wqe_wready                         = s_axi_wready[C_RDMA_GET_WQE_IDX *1 +: 1];
+assign s_axi_awlock [C_RDMA_GET_WQE_IDX *1 +: 1]         = s_axi_rdma_get_wqe_awlock;
+assign s_axi_rdma_get_wqe_bid                            = s_axi_bid[C_RDMA_GET_WQE_IDX *3 +: 1];
+assign s_axi_rdma_get_wqe_bresp                          = s_axi_bresp[C_RDMA_GET_WQE_IDX *2 +: 2];
+assign s_axi_rdma_get_wqe_bvalid                         = s_axi_bvalid[C_RDMA_GET_WQE_IDX *1 +: 1];
+assign s_axi_bready [C_RDMA_GET_WQE_IDX *1 +: 1]         = s_axi_rdma_get_wqe_bready;
+//assign s_axi_arid   [C_RDMA_GET_WQE_IDX *2 +: 2]         = {1'b0, s_axi_rdma_get_wqe_arid};
+assign s_axi_arid   [C_RDMA_GET_WQE_IDX *3 +: 3]         = s_axi_rdma_get_wqe_arvalid ? 3'd0 : 3'd0;
+assign s_axi_araddr [C_RDMA_GET_WQE_IDX *64 +: 64]       = s_axi_rdma_get_wqe_araddr;
+assign s_axi_arlen  [C_RDMA_GET_WQE_IDX *8  +: 8]        = s_axi_rdma_get_wqe_arlen;
+assign s_axi_arsize [C_RDMA_GET_WQE_IDX *3  +: 3]        = s_axi_rdma_get_wqe_arsize;
+assign s_axi_arburst[C_RDMA_GET_WQE_IDX *2  +: 2]        = s_axi_rdma_get_wqe_arburst;
+assign s_axi_arcache[C_RDMA_GET_WQE_IDX *4  +: 4]        = s_axi_rdma_get_wqe_arcache;
+assign s_axi_arprot [C_RDMA_GET_WQE_IDX *3  +: 3]        = s_axi_rdma_get_wqe_arprot;
+assign s_axi_arvalid[C_RDMA_GET_WQE_IDX *1  +: 1]        = s_axi_rdma_get_wqe_arvalid;
+assign s_axi_rdma_get_wqe_arready                        = s_axi_arready[C_RDMA_GET_WQE_IDX *1 +: 1];
+assign s_axi_rdma_get_wqe_rid                            = s_axi_rid[C_RDMA_GET_WQE_IDX *3 +: 1];
+assign s_axi_rdma_get_wqe_rdata                          = s_axi_rdata[C_RDMA_GET_WQE_IDX *512 +: 512];
+assign s_axi_rdma_get_wqe_rresp                          = s_axi_rresp[C_RDMA_GET_WQE_IDX *2 +: 2];
+assign s_axi_rdma_get_wqe_rlast                          = s_axi_rlast[C_RDMA_GET_WQE_IDX *1 +: 1];
+assign s_axi_rdma_get_wqe_rvalid                         = s_axi_rvalid[C_RDMA_GET_WQE_IDX *1 +: 1];
+assign s_axi_rready [C_RDMA_GET_WQE_IDX *1 +: 1]         = s_axi_rdma_get_wqe_rready;
+assign s_axi_arlock [C_RDMA_GET_WQE_IDX *1 +: 1]         = s_axi_rdma_get_wqe_arlock;
+assign s_axi_arqos  [C_RDMA_GET_WQE_IDX *4 +: 4]         = s_axi_rdma_get_wqe_arqos;
+
+// AXI slave signals for getting payload from system memory
+//assign axi_awid   [C_RDMA_GET_PAYLOAD_IDX*2 +: 2]      = {1'b0, s_axi_rdma_get_payload_awid};
+assign s_axi_awid   [C_RDMA_GET_PAYLOAD_IDX*3 +: 3]      = s_axi_rdma_get_payload_awvalid ? 3'd1 : 3'd0;
+assign s_axi_awaddr [C_RDMA_GET_PAYLOAD_IDX *64 +: 64]   = s_axi_rdma_get_payload_awaddr;
+assign s_axi_awqos  [C_RDMA_GET_PAYLOAD_IDX *4 +: 4]     = s_axi_rdma_get_payload_awqos;
+assign s_axi_awlen  [C_RDMA_GET_PAYLOAD_IDX *8 +: 8]     = s_axi_rdma_get_payload_awlen;
+assign s_axi_awsize [C_RDMA_GET_PAYLOAD_IDX *3 +: 3]     = s_axi_rdma_get_payload_awsize;
+assign s_axi_awburst[C_RDMA_GET_PAYLOAD_IDX *2 +: 2]     = s_axi_rdma_get_payload_awburst;
+assign s_axi_awcache[C_RDMA_GET_PAYLOAD_IDX *4 +: 4]     = s_axi_rdma_get_payload_awcache;
+assign s_axi_awprot [C_RDMA_GET_PAYLOAD_IDX *3 +: 3]     = s_axi_rdma_get_payload_awprot;
+assign s_axi_awvalid[C_RDMA_GET_PAYLOAD_IDX *1 +: 1]     = s_axi_rdma_get_payload_awvalid;
+assign s_axi_rdma_get_payload_awready                    = s_axi_awready[C_RDMA_GET_PAYLOAD_IDX *1 +: 1];
+assign s_axi_wdata  [C_RDMA_GET_PAYLOAD_IDX *512 +: 512] = s_axi_rdma_get_payload_wdata;
+assign s_axi_wstrb  [C_RDMA_GET_PAYLOAD_IDX *64 +: 64]   = s_axi_rdma_get_payload_wstrb;
+assign s_axi_wlast  [C_RDMA_GET_PAYLOAD_IDX *1 +: 1]     = s_axi_rdma_get_payload_wlast;
+assign s_axi_wvalid [C_RDMA_GET_PAYLOAD_IDX *1 +: 1]     = s_axi_rdma_get_payload_wvalid;
+assign s_axi_rdma_get_payload_wready                     = s_axi_wready[C_RDMA_GET_PAYLOAD_IDX *1 +: 1];
+assign s_axi_awlock [C_RDMA_GET_PAYLOAD_IDX *1 +: 1]     = s_axi_rdma_get_payload_awlock;
+assign s_axi_rdma_get_payload_bid                        = s_axi_bid[C_RDMA_GET_PAYLOAD_IDX *3 +: 1];
+assign s_axi_rdma_get_payload_bresp                      = s_axi_bresp[C_RDMA_GET_PAYLOAD_IDX *2 +: 2];
+assign s_axi_rdma_get_payload_bvalid                     = s_axi_bvalid[C_RDMA_GET_PAYLOAD_IDX *1 +: 1];
+assign s_axi_bready [C_RDMA_GET_PAYLOAD_IDX *1 +: 1]     = s_axi_rdma_get_payload_bready;
+//assign s_axi_arid   [C_RDMA_GET_PAYLOAD_IDX *2 +: 2]     = {1'b0, s_axi_rdma_get_payload_arid};
+assign s_axi_arid   [C_RDMA_GET_PAYLOAD_IDX *3 +: 3]     = s_axi_rdma_get_payload_arvalid ? 3'd1: 3'd0;
+assign s_axi_araddr [C_RDMA_GET_PAYLOAD_IDX *64 +: 64]   = s_axi_rdma_get_payload_araddr;
+assign s_axi_arlen  [C_RDMA_GET_PAYLOAD_IDX *8  +: 8]    = s_axi_rdma_get_payload_arlen;
+assign s_axi_arsize [C_RDMA_GET_PAYLOAD_IDX *3  +: 3]    = s_axi_rdma_get_payload_arsize;
+assign s_axi_arburst[C_RDMA_GET_PAYLOAD_IDX *2  +: 2]    = s_axi_rdma_get_payload_arburst;
+assign s_axi_arcache[C_RDMA_GET_PAYLOAD_IDX *4  +: 4]    = s_axi_rdma_get_payload_arcache;
+assign s_axi_arprot [C_RDMA_GET_PAYLOAD_IDX *3  +: 3]    = s_axi_rdma_get_payload_arprot;
+assign s_axi_arvalid[C_RDMA_GET_PAYLOAD_IDX *1  +: 1]    = s_axi_rdma_get_payload_arvalid;
+assign s_axi_rdma_get_payload_arready                    = s_axi_arready[C_RDMA_GET_PAYLOAD_IDX *1 +: 1];
+assign s_axi_rdma_get_payload_rid                        = s_axi_rid[C_RDMA_GET_PAYLOAD_IDX *3 +: 1];
+assign s_axi_rdma_get_payload_rdata                      = s_axi_rdata[C_RDMA_GET_PAYLOAD_IDX *512 +: 512];
+assign s_axi_rdma_get_payload_rresp                      = s_axi_rresp[C_RDMA_GET_PAYLOAD_IDX *2 +: 2];
+assign s_axi_rdma_get_payload_rlast                      = s_axi_rlast[C_RDMA_GET_PAYLOAD_IDX *1 +: 1];
+assign s_axi_rdma_get_payload_rvalid                     = s_axi_rvalid[C_RDMA_GET_PAYLOAD_IDX *1 +: 1];
+assign s_axi_rready [C_RDMA_GET_PAYLOAD_IDX *1 +: 1]     = s_axi_rdma_get_payload_rready;
+assign s_axi_arlock [C_RDMA_GET_PAYLOAD_IDX *1 +: 1]     = s_axi_rdma_get_payload_arlock;
+assign s_axi_arqos  [C_RDMA_GET_PAYLOAD_IDX *4 +: 4]     = s_axi_rdma_get_payload_arqos;
+
+// AXI slave signals for data access from qdma mm channel
+//assign axi_awid   [C_RDMA_COMPLETION_IDX*2 +: 2]       = {1'b0, s_axi_rdma_completion_awid};
+assign s_axi_awid   [C_RDMA_COMPLETION_IDX*3 +: 3]       = s_axi_rdma_completion_awvalid ? 3'd2 : 3'd0;
+assign s_axi_awaddr [C_RDMA_COMPLETION_IDX *64 +: 64]    = s_axi_rdma_completion_awaddr;
+assign s_axi_awqos  [C_RDMA_COMPLETION_IDX *4 +: 4]      = s_axi_rdma_completion_awqos;
+assign s_axi_awlen  [C_RDMA_COMPLETION_IDX *8 +: 8]      = s_axi_rdma_completion_awlen;
+assign s_axi_awsize [C_RDMA_COMPLETION_IDX *3 +: 3]      = s_axi_rdma_completion_awsize;
+assign s_axi_awburst[C_RDMA_COMPLETION_IDX *2 +: 2]      = s_axi_rdma_completion_awburst;
+assign s_axi_awcache[C_RDMA_COMPLETION_IDX *4 +: 4]      = s_axi_rdma_completion_awcache;
+assign s_axi_awprot [C_RDMA_COMPLETION_IDX *3 +: 3]      = s_axi_rdma_completion_awprot;
+assign s_axi_awvalid[C_RDMA_COMPLETION_IDX *1 +: 1]      = s_axi_rdma_completion_awvalid;
+assign s_axi_rdma_completion_awready                     = s_axi_awready[C_RDMA_COMPLETION_IDX *1 +: 1];
+assign s_axi_wdata  [C_RDMA_COMPLETION_IDX *512 +: 512]  = s_axi_rdma_completion_wdata;
+assign s_axi_wstrb  [C_RDMA_COMPLETION_IDX *64 +: 64]    = s_axi_rdma_completion_wstrb;
+assign s_axi_wlast  [C_RDMA_COMPLETION_IDX *1 +: 1]      = s_axi_rdma_completion_wlast;
+assign s_axi_wvalid [C_RDMA_COMPLETION_IDX *1 +: 1]      = s_axi_rdma_completion_wvalid;
+assign s_axi_rdma_completion_wready                      = s_axi_wready[C_RDMA_COMPLETION_IDX *1 +: 1];
+assign s_axi_awlock [C_RDMA_COMPLETION_IDX *1 +: 1]      = s_axi_rdma_completion_awlock;
+assign s_axi_rdma_completion_bid                         = s_axi_bid[C_RDMA_COMPLETION_IDX *3 +: 1];
+assign s_axi_rdma_completion_bresp                       = s_axi_bresp[C_RDMA_COMPLETION_IDX *2 +: 2];
+assign s_axi_rdma_completion_bvalid                      = s_axi_bvalid[C_RDMA_COMPLETION_IDX *1 +: 1];
+assign s_axi_bready [C_RDMA_COMPLETION_IDX *1 +: 1]      = s_axi_rdma_completion_bready;
+//assign s_axi_arid   [C_RDMA_COMPLETION_IDX *2 +: 2]      = {1'b0, s_axi_rdma_completion_arid};
+assign s_axi_arid   [C_RDMA_COMPLETION_IDX *3 +: 3]      = s_axi_rdma_completion_arvalid ? 3'd2 : 3'd0;
+assign s_axi_araddr [C_RDMA_COMPLETION_IDX *64 +: 64]    = s_axi_rdma_completion_araddr;
+assign s_axi_arlen  [C_RDMA_COMPLETION_IDX *8  +: 8]     = s_axi_rdma_completion_arlen;
+assign s_axi_arsize [C_RDMA_COMPLETION_IDX *3  +: 3]     = s_axi_rdma_completion_arsize;
+assign s_axi_arburst[C_RDMA_COMPLETION_IDX *2  +: 2]     = s_axi_rdma_completion_arburst;
+assign s_axi_arcache[C_RDMA_COMPLETION_IDX *4  +: 4]     = s_axi_rdma_completion_arcache;
+assign s_axi_arprot [C_RDMA_COMPLETION_IDX *3  +: 3]     = s_axi_rdma_completion_arprot;
+assign s_axi_arvalid[C_RDMA_COMPLETION_IDX *1  +: 1]     = s_axi_rdma_completion_arvalid;
+assign s_axi_rdma_completion_arready                     = s_axi_arready[C_RDMA_COMPLETION_IDX *1 +: 1];
+assign s_axi_rdma_completion_rid                         = s_axi_rid[C_RDMA_COMPLETION_IDX *3 +: 1];
+assign s_axi_rdma_completion_rdata                       = s_axi_rdata[C_RDMA_COMPLETION_IDX *512 +: 512];
+assign s_axi_rdma_completion_rresp                       = s_axi_rresp[C_RDMA_COMPLETION_IDX *2 +: 2];
+assign s_axi_rdma_completion_rlast                       = s_axi_rlast[C_RDMA_COMPLETION_IDX *1 +: 1];
+assign s_axi_rdma_completion_rvalid                      = s_axi_rvalid[C_RDMA_COMPLETION_IDX *1 +: 1];
+assign s_axi_rready [C_RDMA_COMPLETION_IDX *1 +: 1]      = s_axi_rdma_completion_rready;
+assign s_axi_arlock [C_RDMA_COMPLETION_IDX *1 +: 1]      = s_axi_rdma_completion_arlock;
+assign s_axi_arqos  [C_RDMA_COMPLETION_IDX *4 +: 4]      = s_axi_rdma_completion_arqos;
+
+// AXI slave signals for storing payload from RDMA send or write
+//assign axi_awid   [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *2 +: 2]         = {1'b0, s_axi_rdma_send_write_payload_awid};
+assign s_axi_awid   [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *3 +: 3]         = s_axi_rdma_send_write_payload_awvalid ? 3'd4 : 3'd0;
+assign s_axi_awaddr [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *64 +: 64]       = s_axi_rdma_send_write_payload_awaddr;
+assign s_axi_awqos  [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *4 +: 4]         = s_axi_rdma_send_write_payload_awqos;
+assign s_axi_awlen  [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *8 +: 8]         = s_axi_rdma_send_write_payload_awlen;
+assign s_axi_awsize [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *3 +: 3]         = s_axi_rdma_send_write_payload_awsize;
+assign s_axi_awburst[C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *2 +: 2]         = s_axi_rdma_send_write_payload_awburst;
+assign s_axi_awcache[C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *4 +: 4]         = s_axi_rdma_send_write_payload_awcache;
+assign s_axi_awprot [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *3 +: 3]         = s_axi_rdma_send_write_payload_awprot;
+assign s_axi_awvalid[C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *1 +: 1]         = s_axi_rdma_send_write_payload_awvalid;
+assign s_axi_rdma_send_write_payload_awready                            = s_axi_awready[C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *1 +: 1];
+assign s_axi_wdata  [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *512 +: 512]     = s_axi_rdma_send_write_payload_wdata;
+assign s_axi_wstrb  [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *64 +: 64]       = s_axi_rdma_send_write_payload_wstrb;
+assign s_axi_wlast  [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *1 +: 1]         = s_axi_rdma_send_write_payload_wlast;
+assign s_axi_wvalid [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *1 +: 1]         = s_axi_rdma_send_write_payload_wvalid;
+assign s_axi_rdma_send_write_payload_wready                             = s_axi_wready[C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *1 +: 1];
+assign s_axi_awlock [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *1 +: 1]         = s_axi_rdma_send_write_payload_awlock;
+assign s_axi_rdma_send_write_payload_bid                                = s_axi_bid[C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *3 +: 1];
+assign s_axi_rdma_send_write_payload_bresp                              = s_axi_bresp[C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *2 +: 2];
+assign s_axi_rdma_send_write_payload_bvalid                             = s_axi_bvalid[C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *1 +: 1];
+assign s_axi_bready [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *1 +: 1]         = s_axi_rdma_send_write_payload_bready;
+//assign s_axi_arid   [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *2 +: 2]         = {1'b0, s_axi_rdma_send_write_payload_arid};
+assign s_axi_arid   [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *3 +: 3]         = s_axi_rdma_send_write_payload_arvalid ? 3'd4 : 3'd0;
+assign s_axi_araddr [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *64 +: 64]       = s_axi_rdma_send_write_payload_araddr;
+assign s_axi_arlen  [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *8  +: 8]        = s_axi_rdma_send_write_payload_arlen;
+assign s_axi_arsize [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *3  +: 3]        = s_axi_rdma_send_write_payload_arsize;
+assign s_axi_arburst[C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *2  +: 2]        = s_axi_rdma_send_write_payload_arburst;
+assign s_axi_arcache[C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *4  +: 4]        = s_axi_rdma_send_write_payload_arcache;
+assign s_axi_arprot [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *3  +: 3]        = s_axi_rdma_send_write_payload_arprot;
+assign s_axi_arvalid[C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *1  +: 1]        = s_axi_rdma_send_write_payload_arvalid;
+assign s_axi_rdma_send_write_payload_arready                            = s_axi_arready[C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *1 +: 1];
+assign s_axi_rdma_send_write_payload_rid                                = s_axi_rid[C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *3 +: 1];
+assign s_axi_rdma_send_write_payload_rdata                              = s_axi_rdata[C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *512 +: 512];
+assign s_axi_rdma_send_write_payload_rresp                              = s_axi_rresp[C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *2 +: 2];
+assign s_axi_rdma_send_write_payload_rlast                              = s_axi_rlast[C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *1 +: 1];
+assign s_axi_rdma_send_write_payload_rvalid                             = s_axi_rvalid[C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *1 +: 1];
+assign s_axi_rready [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *1 +: 1]         = s_axi_rdma_send_write_payload_rready;
+assign s_axi_arlock [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *1 +: 1]         = s_axi_rdma_send_write_payload_arlock;
+assign s_axi_arqos  [C_RDMA_GET_SEND_WRITE_PAYLOAD_IDX *4 +: 4]         = s_axi_rdma_send_write_payload_arqos;
+
+// AXI slave signals for storing payload from RDMA read response
+//assign axi_awid   [C_RDMA_RSP_PAYLOAD_IDX*2 +: 2]       = {1'b0, s_axi_rdma_rsp_payload_awid};
+assign s_axi_awid   [C_RDMA_RSP_PAYLOAD_IDX*3 +: 3]       = s_axi_rdma_rsp_payload_awvalid ? 3'd3 : 3'd0;
+assign s_axi_awaddr [C_RDMA_RSP_PAYLOAD_IDX *64 +: 64]    = s_axi_rdma_rsp_payload_awaddr;
+assign s_axi_awqos  [C_RDMA_RSP_PAYLOAD_IDX *4 +: 4]      = s_axi_rdma_rsp_payload_awqos;
+assign s_axi_awlen  [C_RDMA_RSP_PAYLOAD_IDX *8 +: 8]      = s_axi_rdma_rsp_payload_awlen;
+assign s_axi_awsize [C_RDMA_RSP_PAYLOAD_IDX *3 +: 3]      = s_axi_rdma_rsp_payload_awsize;
+assign s_axi_awburst[C_RDMA_RSP_PAYLOAD_IDX *2 +: 2]      = s_axi_rdma_rsp_payload_awburst;
+assign s_axi_awcache[C_RDMA_RSP_PAYLOAD_IDX *4 +: 4]      = s_axi_rdma_rsp_payload_awcache;
+assign s_axi_awprot [C_RDMA_RSP_PAYLOAD_IDX *3 +: 3]      = s_axi_rdma_rsp_payload_awprot;
+assign s_axi_awvalid[C_RDMA_RSP_PAYLOAD_IDX *1 +: 1]      = s_axi_rdma_rsp_payload_awvalid;
+assign s_axi_rdma_rsp_payload_awready                     = s_axi_awready[C_RDMA_RSP_PAYLOAD_IDX *1 +: 1];
+assign s_axi_wdata  [C_RDMA_RSP_PAYLOAD_IDX *512 +: 512]  = s_axi_rdma_rsp_payload_wdata;
+assign s_axi_wstrb  [C_RDMA_RSP_PAYLOAD_IDX *64 +: 64]    = s_axi_rdma_rsp_payload_wstrb;
+assign s_axi_wlast  [C_RDMA_RSP_PAYLOAD_IDX *1 +: 1]      = s_axi_rdma_rsp_payload_wlast;
+assign s_axi_wvalid [C_RDMA_RSP_PAYLOAD_IDX *1 +: 1]      = s_axi_rdma_rsp_payload_wvalid;
+assign s_axi_rdma_rsp_payload_wready                      = s_axi_wready[C_RDMA_RSP_PAYLOAD_IDX *1 +: 1];
+assign s_axi_awlock [C_RDMA_RSP_PAYLOAD_IDX *1 +: 1]      = s_axi_rdma_rsp_payload_awlock;
+assign s_axi_rdma_rsp_payload_bid                         = s_axi_bid[C_RDMA_RSP_PAYLOAD_IDX *3 +: 1];
+assign s_axi_rdma_rsp_payload_bresp                       = s_axi_bresp[C_RDMA_RSP_PAYLOAD_IDX *2 +: 2];
+assign s_axi_rdma_rsp_payload_bvalid                      = s_axi_bvalid[C_RDMA_RSP_PAYLOAD_IDX *1 +: 1];
+assign s_axi_bready [C_RDMA_RSP_PAYLOAD_IDX *1 +: 1]      = s_axi_rdma_rsp_payload_bready;
+//assign axi_arid   [C_RDMA_RSP_PAYLOAD_IDX *2 +: 2]      = {1'b0, s_axi_rdma_rsp_payload_arid};
+assign s_axi_arid   [C_RDMA_RSP_PAYLOAD_IDX *3 +: 3]      = s_axi_rdma_rsp_payload_arvalid ? 3'd3 : 3'd0;
+assign s_axi_araddr [C_RDMA_RSP_PAYLOAD_IDX *64 +: 64]    = s_axi_rdma_rsp_payload_araddr;
+assign s_axi_arlen  [C_RDMA_RSP_PAYLOAD_IDX *8  +: 8]     = s_axi_rdma_rsp_payload_arlen;
+assign s_axi_arsize [C_RDMA_RSP_PAYLOAD_IDX *3  +: 3]     = s_axi_rdma_rsp_payload_arsize;
+assign s_axi_arburst[C_RDMA_RSP_PAYLOAD_IDX *2  +: 2]     = s_axi_rdma_rsp_payload_arburst;
+assign s_axi_arcache[C_RDMA_RSP_PAYLOAD_IDX *4  +: 4]     = s_axi_rdma_rsp_payload_arcache;
+assign s_axi_arprot [C_RDMA_RSP_PAYLOAD_IDX *3  +: 3]     = s_axi_rdma_rsp_payload_arprot;
+assign s_axi_arvalid[C_RDMA_RSP_PAYLOAD_IDX *1  +: 1]     = s_axi_rdma_rsp_payload_arvalid;
+assign s_axi_rdma_rsp_payload_arready                     = s_axi_arready[C_RDMA_RSP_PAYLOAD_IDX *1 +: 1];
+assign s_axi_rdma_rsp_payload_rid                         = s_axi_rid[C_RDMA_RSP_PAYLOAD_IDX *3 +: 1];
+assign s_axi_rdma_rsp_payload_rdata                       = s_axi_rdata[C_RDMA_RSP_PAYLOAD_IDX *512 +: 512];
+assign s_axi_rdma_rsp_payload_rresp                       = s_axi_rresp[C_RDMA_RSP_PAYLOAD_IDX *2 +: 2];
+assign s_axi_rdma_rsp_payload_rlast                       = s_axi_rlast[C_RDMA_RSP_PAYLOAD_IDX *1 +: 1];
+assign s_axi_rdma_rsp_payload_rvalid                      = s_axi_rvalid[C_RDMA_RSP_PAYLOAD_IDX *1 +: 1];
+assign s_axi_rready [C_RDMA_RSP_PAYLOAD_IDX *1 +: 1]      = s_axi_rdma_rsp_payload_rready;
+assign s_axi_arlock [C_RDMA_RSP_PAYLOAD_IDX *1 +: 1]      = s_axi_rdma_rsp_payload_arlock;
+assign s_axi_arqos  [C_RDMA_RSP_PAYLOAD_IDX *4 +: 4]      = s_axi_rdma_rsp_payload_arqos;
+
+// AXI slave signals for data access from compute logic
+assign s_axi_awid   [C_HW_HNDSHK_IDX *3 +: 3]      = s_axi_hw_hndshk_awvalid ? 3'd5 : 3'd0;
+assign s_axi_awaddr [C_HW_HNDSHK_IDX *64 +: 64]    = s_axi_hw_hndshk_awaddr;
+assign s_axi_awqos  [C_HW_HNDSHK_IDX *4 +: 4]      = s_axi_hw_hndshk_awqos;
+assign s_axi_awlen  [C_HW_HNDSHK_IDX *8 +: 8]      = s_axi_hw_hndshk_awlen;
+assign s_axi_awsize [C_HW_HNDSHK_IDX *3 +: 3]      = s_axi_hw_hndshk_awsize;
+assign s_axi_awburst[C_HW_HNDSHK_IDX *2 +: 2]      = s_axi_hw_hndshk_awburst;
+assign s_axi_awcache[C_HW_HNDSHK_IDX *4 +: 4]      = s_axi_hw_hndshk_awcache;
+assign s_axi_awprot [C_HW_HNDSHK_IDX *3 +: 3]      = s_axi_hw_hndshk_awprot;
+assign s_axi_awvalid[C_HW_HNDSHK_IDX *1 +: 1]      = s_axi_hw_hndshk_awvalid;
+assign s_axi_hw_hndshk_awready                     = s_axi_awready[C_HW_HNDSHK_IDX *1 +: 1];
+assign s_axi_wdata  [C_HW_HNDSHK_IDX *512 +: 512]  = s_axi_hw_hndshk_wdata;
+assign s_axi_wstrb  [C_HW_HNDSHK_IDX *64 +: 64]    = s_axi_hw_hndshk_wstrb;
+assign s_axi_wlast  [C_HW_HNDSHK_IDX *1 +: 1]      = s_axi_hw_hndshk_wlast;
+assign s_axi_wvalid [C_HW_HNDSHK_IDX *1 +: 1]      = s_axi_hw_hndshk_wvalid;
+assign s_axi_hw_hndshk_wready                      = s_axi_wready[C_HW_HNDSHK_IDX *1 +: 1];
+assign s_axi_awlock [C_HW_HNDSHK_IDX *1 +: 1]      = s_axi_hw_hndshk_awlock;
+assign s_axi_hw_hndshk_bid                         = s_axi_bid[C_HW_HNDSHK_IDX *3 +: 1];
+assign s_axi_hw_hndshk_bresp                       = s_axi_bresp[C_HW_HNDSHK_IDX *2 +: 2];
+assign s_axi_hw_hndshk_bvalid                      = s_axi_bvalid[C_HW_HNDSHK_IDX *1 +: 1];
+assign s_axi_bready [C_HW_HNDSHK_IDX *1 +: 1]      = s_axi_hw_hndshk_bready;
+//assign axi_arid   [C_HW_HNDSHK_IDX *2 +: 2]      = {1'b0, s_axi_hw_hndshk_arid};
+assign s_axi_arid   [C_HW_HNDSHK_IDX *3 +: 3]      = s_axi_hw_hndshk_arvalid ? 3'd5 : 3'd0;
+assign s_axi_araddr [C_HW_HNDSHK_IDX *64 +: 64]    = s_axi_hw_hndshk_araddr;
+assign s_axi_arlen  [C_HW_HNDSHK_IDX *8  +: 8]     = s_axi_hw_hndshk_arlen;
+assign s_axi_arsize [C_HW_HNDSHK_IDX *3  +: 3]     = s_axi_hw_hndshk_arsize;
+assign s_axi_arburst[C_HW_HNDSHK_IDX *2  +: 2]     = s_axi_hw_hndshk_arburst;
+assign s_axi_arcache[C_HW_HNDSHK_IDX *4  +: 4]     = s_axi_hw_hndshk_arcache;
+assign s_axi_arprot [C_HW_HNDSHK_IDX *3  +: 3]     = s_axi_hw_hndshk_arprot;
+assign s_axi_arvalid[C_HW_HNDSHK_IDX *1  +: 1]     = s_axi_hw_hndshk_arvalid;
+assign s_axi_hw_hndshk_arready                     = s_axi_arready[C_HW_HNDSHK_IDX *1 +: 1];
+assign s_axi_hw_hndshk_rid                         = s_axi_rid[C_HW_HNDSHK_IDX *3 +: 1];
+assign s_axi_hw_hndshk_rdata                       = s_axi_rdata[C_HW_HNDSHK_IDX *512 +: 512];
+assign s_axi_hw_hndshk_rresp                       = s_axi_rresp[C_HW_HNDSHK_IDX *2 +: 2];
+assign s_axi_hw_hndshk_rlast                       = s_axi_rlast[C_HW_HNDSHK_IDX *1 +: 1];
+assign s_axi_hw_hndshk_rvalid                      = s_axi_rvalid[C_HW_HNDSHK_IDX *1 +: 1];
+assign s_axi_rready [C_HW_HNDSHK_IDX *1 +: 1]      = s_axi_hw_hndshk_rready;
+assign s_axi_arlock [C_HW_HNDSHK_IDX *1 +: 1]      = s_axi_hw_hndshk_arlock;
+assign s_axi_arqos  [C_HW_HNDSHK_IDX *4 +: 4]      = s_axi_hw_hndshk_arqos;
+
+assign s_axi_awid   [C_RDMA_RETRY_BUF_IDX*3 +: 3]      = s_axi_payload_to_retry_buf_awvalid ? 3'd6 : 3'd0;
+assign s_axi_awaddr [C_RDMA_RETRY_BUF_IDX *64 +: 64]   = s_axi_payload_to_retry_buf_awaddr;
+assign s_axi_awqos  [C_RDMA_RETRY_BUF_IDX *4 +: 4]     = s_axi_payload_to_retry_buf_awqos;
+assign s_axi_awlen  [C_RDMA_RETRY_BUF_IDX *8 +: 8]     = s_axi_payload_to_retry_buf_awlen;
+assign s_axi_awsize [C_RDMA_RETRY_BUF_IDX *3 +: 3]     = s_axi_payload_to_retry_buf_awsize;
+assign s_axi_awburst[C_RDMA_RETRY_BUF_IDX *2 +: 2]     = s_axi_payload_to_retry_buf_awburst;
+assign s_axi_awcache[C_RDMA_RETRY_BUF_IDX *4 +: 4]     = s_axi_payload_to_retry_buf_awcache;
+assign s_axi_awprot [C_RDMA_RETRY_BUF_IDX *3 +: 3]     = s_axi_payload_to_retry_buf_awprot;
+assign s_axi_awvalid[C_RDMA_RETRY_BUF_IDX *1 +: 1]     = s_axi_payload_to_retry_buf_awvalid;
+assign s_axi_payload_to_retry_buf_awready              = s_axi_awready[C_RDMA_RETRY_BUF_IDX *1 +: 1];
+assign s_axi_wdata  [C_RDMA_RETRY_BUF_IDX *512 +: 512] = s_axi_payload_to_retry_buf_wdata;
+assign s_axi_wstrb  [C_RDMA_RETRY_BUF_IDX *64 +: 64]   = s_axi_payload_to_retry_buf_wstrb;
+assign s_axi_wlast  [C_RDMA_RETRY_BUF_IDX *1 +: 1]     = s_axi_payload_to_retry_buf_wlast;
+assign s_axi_wvalid [C_RDMA_RETRY_BUF_IDX *1 +: 1]     = s_axi_payload_to_retry_buf_wvalid;
+assign s_axi_payload_to_retry_buf_wready               = s_axi_wready[C_RDMA_RETRY_BUF_IDX *1 +: 1];
+assign s_axi_awlock [C_RDMA_RETRY_BUF_IDX *1 +: 1]     = s_axi_payload_to_retry_buf_awlock;
+assign s_axi_payload_to_retry_buf_bid                  = s_axi_bid[C_RDMA_RETRY_BUF_IDX *3 +: 1];
+assign s_axi_payload_to_retry_buf_bresp                = s_axi_bresp[C_RDMA_RETRY_BUF_IDX *2 +: 2];
+assign s_axi_payload_to_retry_buf_bvalid               = s_axi_bvalid[C_RDMA_RETRY_BUF_IDX *1 +: 1];
+assign s_axi_bready [C_RDMA_RETRY_BUF_IDX *1 +: 1]     = s_axi_payload_to_retry_buf_bready;
+//assign s_axi_arid   [C_RDMA_RETRY_BUF_IDX *2 +: 2]     = {1'b0, s_axi_payload_to_retry_buf_arid};
+assign s_axi_arid   [C_RDMA_RETRY_BUF_IDX *3 +: 3]     = s_axi_payload_to_retry_buf_arvalid ? 3'd6: 3'd0;
+assign s_axi_araddr [C_RDMA_RETRY_BUF_IDX *64 +: 64]   = s_axi_payload_to_retry_buf_araddr;
+assign s_axi_arlen  [C_RDMA_RETRY_BUF_IDX *8  +: 8]    = s_axi_payload_to_retry_buf_arlen;
+assign s_axi_arsize [C_RDMA_RETRY_BUF_IDX *3  +: 3]    = s_axi_payload_to_retry_buf_arsize;
+assign s_axi_arburst[C_RDMA_RETRY_BUF_IDX *2  +: 2]    = s_axi_payload_to_retry_buf_arburst;
+assign s_axi_arcache[C_RDMA_RETRY_BUF_IDX *4  +: 4]    = s_axi_payload_to_retry_buf_arcache;
+assign s_axi_arprot [C_RDMA_RETRY_BUF_IDX *3  +: 3]    = s_axi_payload_to_retry_buf_arprot;
+assign s_axi_arvalid[C_RDMA_RETRY_BUF_IDX *1  +: 1]    = s_axi_payload_to_retry_buf_arvalid;
+assign s_axi_payload_to_retry_buf_arready              = s_axi_arready[C_RDMA_RETRY_BUF_IDX *1 +: 1];
+assign s_axi_payload_to_retry_buf_rid                  = s_axi_rid[C_RDMA_RETRY_BUF_IDX *3 +: 1];
+assign s_axi_payload_to_retry_buf_rdata                = s_axi_rdata[C_RDMA_RETRY_BUF_IDX *512 +: 512];
+assign s_axi_payload_to_retry_buf_rresp                = s_axi_rresp[C_RDMA_RETRY_BUF_IDX *2 +: 2];
+assign s_axi_payload_to_retry_buf_rlast                = s_axi_rlast[C_RDMA_RETRY_BUF_IDX *1 +: 1];
+assign s_axi_payload_to_retry_buf_rvalid               = s_axi_rvalid[C_RDMA_RETRY_BUF_IDX *1 +: 1];
+assign s_axi_rready [C_RDMA_RETRY_BUF_IDX *1 +: 1]     = s_axi_payload_to_retry_buf_rready;
+assign s_axi_arlock [C_RDMA_RETRY_BUF_IDX *1 +: 1]     = s_axi_payload_to_retry_buf_arlock;
+assign s_axi_arqos  [C_RDMA_RETRY_BUF_IDX *4 +: 4]     = s_axi_payload_to_retry_buf_arqos;
+
+//AXI signals to system memory
+assign m_axi_sys_mem_awid                     = m_axi_awid   [C_SYS_MEM_IDX *3 +: 3];
+assign m_axi_sys_mem_awaddr                   = m_axi_awaddr [C_SYS_MEM_IDX *64 +: 64];
+assign m_axi_sys_mem_awqos                    = m_axi_awqos  [C_SYS_MEM_IDX *4 +: 4];
+assign m_axi_sys_mem_awlen                    = m_axi_awlen  [C_SYS_MEM_IDX *8 +: 8];
+assign m_axi_sys_mem_awsize                   = m_axi_awsize [C_SYS_MEM_IDX *3 +: 3];
+assign m_axi_sys_mem_awburst                  = m_axi_awburst[C_SYS_MEM_IDX *2 +: 2];
+assign m_axi_sys_mem_awcache                  = m_axi_awcache[C_SYS_MEM_IDX *4 +: 4];
+assign m_axi_sys_mem_awprot                   = m_axi_awprot [C_SYS_MEM_IDX *3 +: 3];
+assign m_axi_sys_mem_awvalid                  = m_axi_awvalid[C_SYS_MEM_IDX *1 +: 1];
+assign m_axi_awready[C_SYS_MEM_IDX *1 +: 1]   = m_axi_sys_mem_awready;
+assign m_axi_sys_mem_wdata                    = m_axi_wdata  [C_SYS_MEM_IDX *512 +: 512];
+assign m_axi_sys_mem_wstrb                    = m_axi_wstrb  [C_SYS_MEM_IDX *64 +: 64];
+assign m_axi_sys_mem_wlast                    = m_axi_wlast  [C_SYS_MEM_IDX *1 +: 1];
+assign m_axi_sys_mem_wvalid                   = m_axi_wvalid [C_SYS_MEM_IDX *1 +: 1];
+assign m_axi_wready[C_SYS_MEM_IDX *1 +: 1]    = m_axi_sys_mem_wready;
+assign m_axi_sys_mem_awlock                   = m_axi_awlock [C_SYS_MEM_IDX *1 +: 1];
+assign m_axi_bid[C_SYS_MEM_IDX *3 +: 3]       = m_axi_sys_mem_bid;
+assign m_axi_bresp[C_SYS_MEM_IDX *2 +: 2]     = m_axi_sys_mem_bresp;
+assign m_axi_bvalid[C_SYS_MEM_IDX *1 +: 1]    = m_axi_sys_mem_bvalid;
+assign m_axi_sys_mem_bready                   = m_axi_bready [C_SYS_MEM_IDX *1 +: 1];
+//assign m_axi_sys_mem_arid                   = m_axi_arid   [C_SYS_MEM_IDX *2 +: 2];
+assign m_axi_sys_mem_arid                     = m_axi_arid   [C_SYS_MEM_IDX *3 +: 3];
+assign m_axi_sys_mem_araddr                   = m_axi_araddr [C_SYS_MEM_IDX *64 +: 64];
+assign m_axi_sys_mem_arlen                    = m_axi_arlen  [C_SYS_MEM_IDX *8  +: 8];
+assign m_axi_sys_mem_arsize                   = m_axi_arsize [C_SYS_MEM_IDX *3  +: 3];
+assign m_axi_sys_mem_arburst                  = m_axi_arburst[C_SYS_MEM_IDX *2  +: 2];
+assign m_axi_sys_mem_arcache                  = m_axi_arcache[C_SYS_MEM_IDX *4  +: 4];
+assign m_axi_sys_mem_arprot                   = m_axi_arprot [C_SYS_MEM_IDX *3  +: 3];
+assign m_axi_sys_mem_arvalid                  = m_axi_arvalid[C_SYS_MEM_IDX *1  +: 1];
+assign m_axi_arready[C_SYS_MEM_IDX *1 +: 1]   = m_axi_sys_mem_arready;
+assign m_axi_rid[C_SYS_MEM_IDX *3 +: 3]       = m_axi_sys_mem_rid;
+assign m_axi_rdata[C_SYS_MEM_IDX *512 +: 512] = m_axi_sys_mem_rdata;
+assign m_axi_rresp[C_SYS_MEM_IDX *2 +: 2]     = m_axi_sys_mem_rresp;
+assign m_axi_rlast[C_SYS_MEM_IDX *1 +: 1]     = m_axi_sys_mem_rlast;
+assign m_axi_rvalid[C_SYS_MEM_IDX *1 +: 1]    = m_axi_sys_mem_rvalid;
+assign m_axi_sys_mem_rready                   = m_axi_rready [C_SYS_MEM_IDX *1 +: 1];
+assign m_axi_sys_mem_arlock                   = m_axi_arlock [C_SYS_MEM_IDX *1 +: 1];
+assign m_axi_sys_mem_arqos                    = m_axi_arqos  [C_SYS_MEM_IDX *4 +: 4];
+
+//AXI signals to device memory
+//assign m_axi_awid   [C_SYS_TO_DEV_CROSSBAR_IDX *2 +: 2]         = {1'b0, m_axi_sys_to_dev_crossbar_awid};
+assign m_axi_sys_to_dev_crossbar_awid         = m_axi_awid   [C_SYS_TO_DEV_CROSSBAR_IDX *3 +: 3];
+assign m_axi_sys_to_dev_crossbar_awaddr       = m_axi_awaddr [C_SYS_TO_DEV_CROSSBAR_IDX *64 +: 64];
+assign m_axi_sys_to_dev_crossbar_awqos        = m_axi_awqos  [C_SYS_TO_DEV_CROSSBAR_IDX *4 +: 4];
+assign m_axi_sys_to_dev_crossbar_awlen        = m_axi_awlen  [C_SYS_TO_DEV_CROSSBAR_IDX *8 +: 8];
+assign m_axi_sys_to_dev_crossbar_awsize       = m_axi_awsize [C_SYS_TO_DEV_CROSSBAR_IDX *3 +: 3];
+assign m_axi_sys_to_dev_crossbar_awburst      = m_axi_awburst[C_SYS_TO_DEV_CROSSBAR_IDX *2 +: 2];
+assign m_axi_sys_to_dev_crossbar_awcache      = m_axi_awcache[C_SYS_TO_DEV_CROSSBAR_IDX *4 +: 4];
+assign m_axi_sys_to_dev_crossbar_awprot       = m_axi_awprot [C_SYS_TO_DEV_CROSSBAR_IDX *3 +: 3];
+assign m_axi_sys_to_dev_crossbar_awvalid      = m_axi_awvalid[C_SYS_TO_DEV_CROSSBAR_IDX *1 +: 1];
+assign m_axi_awready[C_SYS_TO_DEV_CROSSBAR_IDX *1 +: 1]          = m_axi_sys_to_dev_crossbar_awready;
+assign m_axi_sys_to_dev_crossbar_wdata        = m_axi_wdata  [C_SYS_TO_DEV_CROSSBAR_IDX *512 +: 512];
+assign m_axi_sys_to_dev_crossbar_wstrb        = m_axi_wstrb  [C_SYS_TO_DEV_CROSSBAR_IDX *64 +: 64];
+assign m_axi_sys_to_dev_crossbar_wlast        = m_axi_wlast  [C_SYS_TO_DEV_CROSSBAR_IDX *1 +: 1];
+assign m_axi_sys_to_dev_crossbar_wvalid       = m_axi_wvalid [C_SYS_TO_DEV_CROSSBAR_IDX *1 +: 1];
+assign m_axi_wready[C_SYS_TO_DEV_CROSSBAR_IDX *1 +: 1]           = m_axi_sys_to_dev_crossbar_wready;
+assign m_axi_sys_to_dev_crossbar_awlock       = m_axi_awlock [C_SYS_TO_DEV_CROSSBAR_IDX *1 +: 1];
+assign m_axi_bid[C_SYS_TO_DEV_CROSSBAR_IDX *3 +: 3]              = m_axi_sys_to_dev_crossbar_bid;
+assign m_axi_bresp[C_SYS_TO_DEV_CROSSBAR_IDX *2 +: 2]            = m_axi_sys_to_dev_crossbar_bresp;
+assign m_axi_bvalid[C_SYS_TO_DEV_CROSSBAR_IDX *1 +: 1]           = m_axi_sys_to_dev_crossbar_bvalid;
+assign m_axi_sys_to_dev_crossbar_bready       = m_axi_bready [C_SYS_TO_DEV_CROSSBAR_IDX *1 +: 1];
+//assign m_axi_sys_to_dev_crossbar_arid         = m_axi_arid   [C_SYS_TO_DEV_CROSSBAR_IDX *2 +: 2];
+assign m_axi_sys_to_dev_crossbar_arid         = m_axi_arid   [C_SYS_TO_DEV_CROSSBAR_IDX *3 +: 3];
+assign m_axi_sys_to_dev_crossbar_araddr       = m_axi_araddr [C_SYS_TO_DEV_CROSSBAR_IDX *64 +: 64];
+assign m_axi_sys_to_dev_crossbar_arlen        = m_axi_arlen  [C_SYS_TO_DEV_CROSSBAR_IDX *8  +: 8];
+assign m_axi_sys_to_dev_crossbar_arsize       = m_axi_arsize [C_SYS_TO_DEV_CROSSBAR_IDX *3  +: 3];
+assign m_axi_sys_to_dev_crossbar_arburst      = m_axi_arburst[C_SYS_TO_DEV_CROSSBAR_IDX *2  +: 2];
+assign m_axi_sys_to_dev_crossbar_arcache      = m_axi_arcache[C_SYS_TO_DEV_CROSSBAR_IDX *4  +: 4];
+assign m_axi_sys_to_dev_crossbar_arprot       = m_axi_arprot [C_SYS_TO_DEV_CROSSBAR_IDX *3  +: 3];
+assign m_axi_sys_to_dev_crossbar_arvalid      = m_axi_arvalid[C_SYS_TO_DEV_CROSSBAR_IDX *1  +: 1];
+assign m_axi_arready[C_SYS_TO_DEV_CROSSBAR_IDX *1 +: 1]          = m_axi_sys_to_dev_crossbar_arready;
+assign m_axi_rid[C_SYS_TO_DEV_CROSSBAR_IDX *3 +: 3]              = m_axi_sys_to_dev_crossbar_rid;
+assign m_axi_rdata[C_SYS_TO_DEV_CROSSBAR_IDX *512 +: 512]        = m_axi_sys_to_dev_crossbar_rdata;
+assign m_axi_rresp[C_SYS_TO_DEV_CROSSBAR_IDX *2 +: 2]            = m_axi_sys_to_dev_crossbar_rresp;
+assign m_axi_rlast[C_SYS_TO_DEV_CROSSBAR_IDX *1 +: 1]            = m_axi_sys_to_dev_crossbar_rlast;
+assign m_axi_rvalid[C_SYS_TO_DEV_CROSSBAR_IDX *1 +: 1]           = m_axi_sys_to_dev_crossbar_rvalid;
+assign m_axi_sys_to_dev_crossbar_rready       = m_axi_rready [C_SYS_TO_DEV_CROSSBAR_IDX *1 +: 1];
+assign m_axi_sys_to_dev_crossbar_arlock       = m_axi_arlock [C_SYS_TO_DEV_CROSSBAR_IDX *1 +: 1];
+assign m_axi_sys_to_dev_crossbar_arqos        = m_axi_arqos  [C_SYS_TO_DEV_CROSSBAR_IDX *4 +: 4];
+
+sys_mem_7to2_axi_crossbar sys_mem_7to2_axi_crossbar_inst (
+  .m_axi_awaddr    (m_axi_awaddr),
+  .m_axi_awprot    (m_axi_awprot),
+  .m_axi_awvalid   (m_axi_awvalid),
+  .m_axi_awready   (m_axi_awready),
+  .m_axi_awsize    (m_axi_awsize),
+  .m_axi_awburst   (m_axi_awburst),
+  .m_axi_awcache   (m_axi_awcache),
+  .m_axi_awlen     (m_axi_awlen),
+  .m_axi_awlock    (m_axi_awlock),
+  .m_axi_awqos     (m_axi_awqos),
+  .m_axi_awregion  (m_axi_awregion),
+  .m_axi_awid      (m_axi_awid),
+  .m_axi_wdata     (m_axi_wdata),
+  .m_axi_wstrb     (m_axi_wstrb),
+  .m_axi_wvalid    (m_axi_wvalid),
+  .m_axi_wready    (m_axi_wready),
+  .m_axi_wlast     (m_axi_wlast),
+  .m_axi_bresp     (m_axi_bresp),
+  .m_axi_bvalid    (m_axi_bvalid),
+  .m_axi_bready    (m_axi_bready),
+  .m_axi_bid       (m_axi_bid),
+  .m_axi_araddr    (m_axi_araddr),
+  .m_axi_arprot    (m_axi_arprot),
+  .m_axi_arvalid   (m_axi_arvalid),
+  .m_axi_arready   (m_axi_arready),
+  .m_axi_arsize    (m_axi_arsize),
+  .m_axi_arburst   (m_axi_arburst),
+  .m_axi_arcache   (m_axi_arcache),
+  .m_axi_arlock    (m_axi_arlock),
+  .m_axi_arlen     (m_axi_arlen),
+  .m_axi_arqos     (m_axi_arqos),
+  .m_axi_arregion  (m_axi_arregion),
+  .m_axi_arid      (m_axi_arid),
+  .m_axi_rdata     (m_axi_rdata),
+  .m_axi_rresp     (m_axi_rresp),
+  .m_axi_rvalid    (m_axi_rvalid),
+  .m_axi_rready    (m_axi_rready),
+  .m_axi_rlast     (m_axi_rlast),
+  .m_axi_rid       (m_axi_rid),
+
+  .s_axi_awid      (s_axi_awid),
+  .s_axi_awaddr    (s_axi_awaddr),
+  .s_axi_awqos     (s_axi_awqos),
+  .s_axi_awlen     (s_axi_awlen),
+  .s_axi_awsize    (s_axi_awsize),
+  .s_axi_awburst   (s_axi_awburst),
+  .s_axi_awcache   (s_axi_awcache),
+  .s_axi_awprot    (s_axi_awprot),
+  .s_axi_awvalid   (s_axi_awvalid),
+  .s_axi_awready   (s_axi_awready),
+  .s_axi_wdata     (s_axi_wdata),
+  .s_axi_wstrb     (s_axi_wstrb),
+  .s_axi_wlast     (s_axi_wlast),
+  .s_axi_wvalid    (s_axi_wvalid),
+  .s_axi_wready    (s_axi_wready),
+  .s_axi_awlock    (s_axi_awlock),
+  .s_axi_bid       (s_axi_bid),
+  .s_axi_bresp     (s_axi_bresp),
+  .s_axi_bvalid    (s_axi_bvalid),
+  .s_axi_bready    (s_axi_bready),
+  .s_axi_arid      (s_axi_arid),
+  .s_axi_araddr    (s_axi_araddr),
+  .s_axi_arlen     (s_axi_arlen),
+  .s_axi_arsize    (s_axi_arsize),
+  .s_axi_arburst   (s_axi_arburst),
+  .s_axi_arcache   (s_axi_arcache),
+  .s_axi_arprot    (s_axi_arprot),
+  .s_axi_arvalid   (s_axi_arvalid),
+  .s_axi_arready   (s_axi_arready),
+  .s_axi_rid       (s_axi_rid),
+  .s_axi_rdata     (s_axi_rdata),
+  .s_axi_rresp     (s_axi_rresp),
+  .s_axi_rlast     (s_axi_rlast),
+  .s_axi_rvalid    (s_axi_rvalid),
+  .s_axi_rready    (s_axi_rready),
+  .s_axi_arlock    (s_axi_arlock),
+  .s_axi_arqos     (s_axi_arqos),
+
+  .aclk   (axis_aclk),
+  .aresetn(axis_arestn)
+);
+
+endmodule: axi_7to2_interconnect_to_sys_mem
\ No newline at end of file
diff --git a/src/utility/axi_lite_slave.sv b/src/utility/axi_lite_slave.sv
index 4b63770..c30ef12 100644
--- a/src/utility/axi_lite_slave.sv
+++ b/src/utility/axi_lite_slave.sv
@@ -59,7 +59,7 @@ module axi_lite_slave #(
     .DATA_W        (32)
   ) axil_reg_inst (
     .s_axil_awvalid (s_axil_awvalid),
-    .s_axil_awaddr  (s_axil_awaddr),
+    .s_axil_awaddr  (s_axil_awaddr[REG_ADDR_W-1:0]),
     .s_axil_awready (s_axil_awready),
     .s_axil_wvalid  (s_axil_wvalid),
     .s_axil_wdata   (s_axil_wdata),
@@ -68,7 +68,7 @@ module axi_lite_slave #(
     .s_axil_bresp   (s_axil_bresp),
     .s_axil_bready  (s_axil_bready),
     .s_axil_arvalid (s_axil_arvalid),
-    .s_axil_araddr  (s_axil_araddr),
+    .s_axil_araddr  (s_axil_araddr[REG_ADDR_W-1:0]),
     .s_axil_arready (s_axil_arready),
     .s_axil_rvalid  (s_axil_rvalid),
     .s_axil_rdata   (s_axil_rdata),
diff --git a/src/utility/vivado_ip/axi_clock_converter_for_ddr.tcl b/src/utility/vivado_ip/axi_clock_converter_for_ddr.tcl
new file mode 100755
index 0000000..b839833
--- /dev/null
+++ b/src/utility/vivado_ip/axi_clock_converter_for_ddr.tcl
@@ -0,0 +1,22 @@
+#==============================================================================
+# Copyright (C) 2023, Advanced Micro Devices, Inc. All rights reserved.
+# SPDX-License-Identifier: MIT
+#
+#==============================================================================
+set axi_clock_converter axi_clock_converter_for_ddr
+create_ip -name axi_clock_converter -vendor xilinx.com -library ip -module_name $axi_clock_converter -dir ${ip_build_dir}
+set_property -dict {
+    CONFIG.PROTOCOL {AXI4}
+    CONFIG.READ_WRITE_MODE {READ_WRITE}
+    CONFIG.ADDR_WIDTH {34}
+    CONFIG.DATA_WIDTH {512}
+    CONFIG.ID_WIDTH {5}
+    CONFIG.AWUSER_WIDTH {0}
+    CONFIG.ARUSER_WIDTH {0}
+    CONFIG.RUSER_WIDTH {0}
+    CONFIG.WUSER_WIDTH {0}
+    CONFIG.BUSER_WIDTH {0}
+    CONFIG.ACLK_ASYNC {1}
+    CONFIG.SYNCHRONIZATION_STAGES {3}
+    CONFIG.ACLK_RATIO {1:2}
+} [get_ips $axi_clock_converter]
\ No newline at end of file
diff --git a/src/utility/vivado_ip/axi_lite_clock_converter.tcl b/src/utility/vivado_ip/axi_lite_clock_converter.tcl
index d3c0078..a574f99 100644
--- a/src/utility/vivado_ip/axi_lite_clock_converter.tcl
+++ b/src/utility/vivado_ip/axi_lite_clock_converter.tcl
@@ -1,20 +1,8 @@
-# *************************************************************************
+#==============================================================================
+# Copyright (C) 2023, Advanced Micro Devices, Inc. All rights reserved.
+# SPDX-License-Identifier: MIT
 #
-# Copyright 2020 Xilinx, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-# *************************************************************************
+#==============================================================================
 set axi_clock_converter axi_lite_clock_converter
 create_ip -name axi_clock_converter -vendor xilinx.com -library ip -module_name $axi_clock_converter -dir ${ip_build_dir}
 set_property -dict {
diff --git a/src/utility/vivado_ip/axi_stream_pipeline.tcl b/src/utility/vivado_ip/axi_stream_pipeline.tcl
index cbf4ca3..b3cf7bf 100644
--- a/src/utility/vivado_ip/axi_stream_pipeline.tcl
+++ b/src/utility/vivado_ip/axi_stream_pipeline.tcl
@@ -1,20 +1,8 @@
-# *************************************************************************
+#==============================================================================
+# Copyright (C) 2023, Advanced Micro Devices, Inc. All rights reserved.
+# SPDX-License-Identifier: MIT
 #
-# Copyright 2020 Xilinx, Inc.
-#
-# Licensed under the Apache License, Version 2.0 (the "License");
-# you may not use this file except in compliance with the License.
-# You may obtain a copy of the License at
-#
-#     http://www.apache.org/licenses/LICENSE-2.0
-#
-# Unless required by applicable law or agreed to in writing, software
-# distributed under the License is distributed on an "AS IS" BASIS,
-# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-# See the License for the specific language governing permissions and
-# limitations under the License.
-#
-# *************************************************************************
+#==============================================================================
 set axis_register_slice axi_stream_pipeline
 create_ip -name axis_register_slice -vendor xilinx.com -library ip -module_name $axis_register_slice -dir ${ip_build_dir}
 set_property -dict { 
diff --git a/src/utility/vivado_ip/dev_mem_2to1_axi_crossbar.tcl b/src/utility/vivado_ip/dev_mem_2to1_axi_crossbar.tcl
new file mode 100755
index 0000000..644026d
--- /dev/null
+++ b/src/utility/vivado_ip/dev_mem_2to1_axi_crossbar.tcl
@@ -0,0 +1,27 @@
+#==============================================================================
+# Copyright (C) 2023, Advanced Micro Devices, Inc. All rights reserved.
+# SPDX-License-Identifier: MIT
+#
+#==============================================================================
+set device_memory_axi_crossbar dev_mem_2to1_axi_crossbar
+
+create_ip -name axi_crossbar -vendor xilinx.com -library ip -version 2.1 -module_name $device_memory_axi_crossbar -dir ${ip_build_dir}
+
+set_property -dict {
+    CONFIG.ADDR_RANGES {1}
+    CONFIG.NUM_SI {2}
+    CONFIG.NUM_MI {1}
+    CONFIG.ADDR_WIDTH {64}
+    CONFIG.DATA_WIDTH {512}
+    CONFIG.ID_WIDTH {4}
+    CONFIG.S00_THREAD_ID_WIDTH {3}
+    CONFIG.S01_THREAD_ID_WIDTH {3}
+    CONFIG.S00_WRITE_ACCEPTANCE {8}
+    CONFIG.S01_WRITE_ACCEPTANCE {8}
+    CONFIG.S00_READ_ACCEPTANCE {8}
+    CONFIG.S01_READ_ACCEPTANCE {8}
+    CONFIG.M00_WRITE_ISSUING {16}
+    CONFIG.M00_READ_ISSUING {16}
+    CONFIG.S00_SINGLE_THREAD {0}
+    CONFIG.M00_A00_ADDR_WIDTH {64}
+} [get_ips $device_memory_axi_crossbar]
\ No newline at end of file
diff --git a/src/utility/vivado_ip/dev_mem_ddr4_controller.tcl b/src/utility/vivado_ip/dev_mem_ddr4_controller.tcl
new file mode 100755
index 0000000..70ae430
--- /dev/null
+++ b/src/utility/vivado_ip/dev_mem_ddr4_controller.tcl
@@ -0,0 +1,158 @@
+#==============================================================================
+# Copyright (C) 2023, Advanced Micro Devices, Inc. All rights reserved.
+# SPDX-License-Identifier: MIT
+#
+#==============================================================================
+set ddr4_controller dev_mem_ddr4_controller
+
+create_ip -name ddr4 -vendor xilinx.com -library ip -version 2.2 -module_name $ddr4_controller -dir ${ip_build_dir}
+
+set_property -dict {
+    CONFIG.C0.ControllerType {DDR4_SDRAM}
+    CONFIG.IOPowerReduction {OFF}
+    CONFIG.Enable_SysPorts {true}
+    CONFIG.Phy_Only {Complete_Memory_Controller}
+    CONFIG.RESET_BOARD_INTERFACE {pcie_perstn}
+    CONFIG.C0_CLOCK_BOARD_INTERFACE {default_300mhz_clk0}
+    CONFIG.IS_FROM_PHY {1}
+    CONFIG.RECONFIG_XSDB_SAVE_RESTORE {false}
+    CONFIG.AL_SEL {0}
+    CONFIG.Example_TG {SIMPLE_TG}
+    CONFIG.C0.DDR4_Clamshell {false}
+    CONFIG.C0.MIGRATION {false}
+    CONFIG.TIMING_OP1 {false}
+    CONFIG.TIMING_OP2 {false}
+    CONFIG.TIMING_3DS {false}
+    CONFIG.SET_DW_TO_40 {false}
+    CONFIG.DIFF_TERM_SYSCLK {false}
+    CONFIG.C0_DDR4_BOARD_INTERFACE {ddr4_sdram_c0}
+    CONFIG.C0.DDR4_TimePeriod {833}
+    CONFIG.C0.DDR4_InputClockPeriod {3332}
+    CONFIG.C0.DDR4_Specify_MandD {false}
+    CONFIG.C0.DDR4_CLKFBOUT_MULT {5}
+    CONFIG.C0.DDR4_DIVCLK_DIVIDE {1}
+    CONFIG.C0.DDR4_CLKOUT0_DIVIDE {5}
+    CONFIG.C0.DDR4_PhyClockRatio {4:1}
+    CONFIG.C0.DDR4_MemoryType {RDIMMs}
+    CONFIG.C0.DDR4_MemoryPart {MTA18ASF2G72PZ-2G3}
+    CONFIG.C0.DDR4_Slot {Single}
+    CONFIG.C0.DDR4_MemoryVoltage {1.2V}
+    CONFIG.C0.DDR4_DataWidth {72}
+    CONFIG.C0.DDR4_DataMask {NONE}
+    CONFIG.C0.DDR4_Ecc {true}
+    CONFIG.C0.DDR4_AxiSelection {true}
+    CONFIG.C0.DDR4_AUTO_AP_COL_A3 {true}
+    CONFIG.C0.DDR4_Ordering {Normal}
+    CONFIG.C0.DDR4_BurstLength {8}
+    CONFIG.C0.DDR4_BurstType {Sequential}
+    CONFIG.C0.DDR4_OutputDriverImpedenceControl {RZQ/7}
+    CONFIG.C0.DDR4_OnDieTermination {RZQ/6}
+    CONFIG.C0.DDR4_CasLatency {17}
+    CONFIG.C0.DDR4_CasWriteLatency {12}
+    CONFIG.C0.DDR4_ChipSelect {true}
+    CONFIG.C0.DDR4_isCKEShared {false}
+    CONFIG.C0.DDR4_AxiDataWidth {512}
+    CONFIG.C0.DDR4_AxiArbitrationScheme {RD_PRI_REG}
+    CONFIG.C0.DDR4_AxiNarrowBurst {false}
+    CONFIG.C0.DDR4_AxiAddressWidth {34}
+    CONFIG.C0.DDR4_AxiIDWidth {8}
+    CONFIG.C0.DDR4_Capacity {512}
+    CONFIG.C0.DDR4_Mem_Add_Map {ROW_COLUMN_BANK_INTLV}
+    CONFIG.C0.DDR4_MemoryName {MainMemory}
+    CONFIG.C0.DDR4_AutoPrecharge {false}
+    CONFIG.C0.DDR4_UserRefresh_ZQCS {false}
+    CONFIG.C0.DDR4_CustomParts {no_file_loaded}
+    CONFIG.C0.DDR4_isCustom {false}
+    CONFIG.C0.DDR4_SELF_REFRESH {false}
+    CONFIG.C0.DDR4_SAVE_RESTORE {false}
+    CONFIG.C0.DDR4_RESTORE_CRC {false}
+    CONFIG.ADDN_UI_CLKOUT1_FREQ_HZ {250}
+    CONFIG.ADDN_UI_CLKOUT2_FREQ_HZ {None}
+    CONFIG.ADDN_UI_CLKOUT3_FREQ_HZ {None}
+    CONFIG.ADDN_UI_CLKOUT4_FREQ_HZ {None}
+    CONFIG.CLKOUT6 {false}
+    CONFIG.No_Controller {1}
+    CONFIG.System_Clock {Differential}
+    CONFIG.Reference_Clock {Differential}
+    CONFIG.Debug_Signal {Disable}
+    CONFIG.IO_Power_Reduction {false}
+    CONFIG.DCI_Cascade {false}
+    CONFIG.Default_Bank_Selections {false}
+    CONFIG.Simulation_Mode {BFM}
+    CONFIG.PARTIAL_RECONFIG_FLOW_MIG {false}
+    CONFIG.MCS_DBG_EN {false}
+    CONFIG.C0.DDR4_CK_SKEW_0 {0}
+    CONFIG.C0.DDR4_CK_SKEW_1 {0}
+    CONFIG.C0.DDR4_CK_SKEW_2 {0}
+    CONFIG.C0.DDR4_CK_SKEW_3 {0}
+    CONFIG.C0.DDR4_ADDR_SKEW_0 {0}
+    CONFIG.C0.DDR4_ADDR_SKEW_1 {0}
+    CONFIG.C0.DDR4_ADDR_SKEW_2 {0}
+    CONFIG.C0.DDR4_ADDR_SKEW_3 {0}
+    CONFIG.C0.DDR4_ADDR_SKEW_4 {0}
+    CONFIG.C0.DDR4_ADDR_SKEW_5 {0}
+    CONFIG.C0.DDR4_ADDR_SKEW_6 {0}
+    CONFIG.C0.DDR4_ADDR_SKEW_7 {0}
+    CONFIG.C0.DDR4_ADDR_SKEW_8 {0}
+    CONFIG.C0.DDR4_ADDR_SKEW_9 {0}
+    CONFIG.C0.DDR4_ADDR_SKEW_10 {0}
+    CONFIG.C0.DDR4_ADDR_SKEW_11 {0}
+    CONFIG.C0.DDR4_ADDR_SKEW_12 {0}
+    CONFIG.C0.DDR4_ADDR_SKEW_13 {0}
+    CONFIG.C0.DDR4_ADDR_SKEW_14 {0}
+    CONFIG.C0.DDR4_ADDR_SKEW_15 {0}
+    CONFIG.C0.DDR4_ADDR_SKEW_16 {0}
+    CONFIG.C0.DDR4_ADDR_SKEW_17 {0}
+    CONFIG.C0.DDR4_BA_SKEW_0 {0}
+    CONFIG.C0.DDR4_BA_SKEW_1 {0}
+    CONFIG.C0.DDR4_BG_SKEW_0 {0}
+    CONFIG.C0.DDR4_BG_SKEW_1 {0}
+    CONFIG.C0.DDR4_CS_SKEW_0 {0}
+    CONFIG.C0.DDR4_CS_SKEW_1 {0}
+    CONFIG.C0.DDR4_CS_SKEW_2 {0}
+    CONFIG.C0.DDR4_CS_SKEW_3 {0}
+    CONFIG.C0.DDR4_CKE_SKEW_0 {0}
+    CONFIG.C0.DDR4_CKE_SKEW_1 {0}
+    CONFIG.C0.DDR4_CKE_SKEW_2 {0}
+    CONFIG.C0.DDR4_CKE_SKEW_3 {0}
+    CONFIG.C0.DDR4_ACT_SKEW {0}
+    CONFIG.C0.DDR4_PAR_SKEW {0}
+    CONFIG.C0.DDR4_ODT_SKEW_0 {0}
+    CONFIG.C0.DDR4_ODT_SKEW_1 {0}
+    CONFIG.C0.DDR4_ODT_SKEW_2 {0}
+    CONFIG.C0.DDR4_ODT_SKEW_3 {0}
+    CONFIG.C0.DDR4_LR_SKEW_0 {0}
+    CONFIG.C0.DDR4_LR_SKEW_1 {0}
+    CONFIG.C0.DDR4_TREFI {0}
+    CONFIG.C0.DDR4_TRFC {0}
+    CONFIG.C0.DDR4_TRFC_DLR {0}
+    CONFIG.C0.DDR4_TXPR {0}
+    CONFIG.C0.DDR4_nCK_TREFI {0}
+    CONFIG.C0.DDR4_nCK_TRFC {0}
+    CONFIG.C0.DDR4_nCK_TRFC_DLR {0}
+    CONFIG.C0.DDR4_nCK_TXPR {0}
+    CONFIG.C0.ADDR_WIDTH {17}
+    CONFIG.C0.BANK_GROUP_WIDTH {2}
+    CONFIG.C0.LR_WIDTH {1}
+    CONFIG.C0.CK_WIDTH {1}
+    CONFIG.C0.CKE_WIDTH {1}
+    CONFIG.C0.CS_WIDTH {1}
+    CONFIG.C0.ODT_WIDTH {1}
+    CONFIG.C0.StackHeight {1}
+    CONFIG.PING_PONG_PHY {1}
+    CONFIG.C0.DDR4_Enable_LVAUX {false}
+    CONFIG.C0.DDR4_EN_PARITY {true}
+    CONFIG.EN_PP_4R_MIR {false}
+    CONFIG.MCS_WO_DSP {false}
+    CONFIG.C0_SYS_CLK_I.INSERT_VIP {0}
+    CONFIG.C0_DDR4_S_AXI_CTRL.INSERT_VIP {0}
+    CONFIG.C0_DDR4_S_AXI.INSERT_VIP {0}
+    CONFIG.C0_DDR4_ARESETN.INSERT_VIP {0}
+    CONFIG.C0_DDR4_RESET.INSERT_VIP {0}
+    CONFIG.C0_DDR4_CLOCK.INSERT_VIP {0}
+    CONFIG.ADDN_UI_CLKOUT1.INSERT_VIP {0}
+    CONFIG.ADDN_UI_CLKOUT2.INSERT_VIP {0}
+    CONFIG.ADDN_UI_CLKOUT3.INSERT_VIP {0}
+    CONFIG.ADDN_UI_CLKOUT4.INSERT_VIP {0}
+    CONFIG.SYSTEM_RESET.INSERT_VIP {0}
+} [get_ips $ddr4_controller]
\ No newline at end of file
diff --git a/src/utility/vivado_ip/sys_mem_7to2_axi_crossbar.tcl b/src/utility/vivado_ip/sys_mem_7to2_axi_crossbar.tcl
new file mode 100755
index 0000000..790ac98
--- /dev/null
+++ b/src/utility/vivado_ip/sys_mem_7to2_axi_crossbar.tcl
@@ -0,0 +1,41 @@
+#==============================================================================
+# Copyright (C) 2023, Advanced Micro Devices, Inc. All rights reserved.
+# SPDX-License-Identifier: MIT
+#
+#==============================================================================
+set system_memory_axi_crossbar sys_mem_7to2_axi_crossbar
+
+create_ip -name axi_crossbar -vendor xilinx.com -library ip -version 2.1 -module_name $system_memory_axi_crossbar -dir ${ip_build_dir}
+
+set_property -dict {
+    CONFIG.ADDR_RANGES {1}
+    CONFIG.NUM_SI {7}
+    CONFIG.NUM_MI {2}
+    CONFIG.ADDR_WIDTH {64}
+    CONFIG.DATA_WIDTH {512}
+    CONFIG.ID_WIDTH {3}
+    CONFIG.S15_THREAD_ID_WIDTH {0}
+    CONFIG.S00_WRITE_ACCEPTANCE {8}
+    CONFIG.S01_WRITE_ACCEPTANCE {8}
+    CONFIG.S02_WRITE_ACCEPTANCE {8}
+    CONFIG.S03_WRITE_ACCEPTANCE {8}
+    CONFIG.S04_WRITE_ACCEPTANCE {8}
+    CONFIG.S05_WRITE_ACCEPTANCE {8}
+    CONFIG.S06_WRITE_ACCEPTANCE {8}
+    CONFIG.S00_READ_ACCEPTANCE {8}
+    CONFIG.S01_READ_ACCEPTANCE {8}
+    CONFIG.S02_READ_ACCEPTANCE {8}
+    CONFIG.S03_READ_ACCEPTANCE {8}
+    CONFIG.S04_READ_ACCEPTANCE {8}
+    CONFIG.S05_READ_ACCEPTANCE {8}
+    CONFIG.S06_READ_ACCEPTANCE {8}
+    CONFIG.M00_WRITE_ISSUING {16}
+    CONFIG.M00_READ_ISSUING {16}
+    CONFIG.M01_WRITE_ISSUING {16}
+    CONFIG.M01_READ_ISSUING {16}
+    CONFIG.S00_SINGLE_THREAD {0}
+    CONFIG.M00_A00_ADDR_WIDTH {52}
+    CONFIG.M01_A00_ADDR_WIDTH {36}
+    CONFIG.M00_A00_BASE_ADDR {0x0000000000000000}
+    CONFIG.M01_A00_BASE_ADDR {0xa350000000000000}
+} [get_ips $system_memory_axi_crossbar]
\ No newline at end of file
diff --git a/src/utility/vivado_ip/vivado_ip.tcl b/src/utility/vivado_ip/vivado_ip.tcl
index 62f583e..5a9445c 100644
--- a/src/utility/vivado_ip/vivado_ip.tcl
+++ b/src/utility/vivado_ip/vivado_ip.tcl
@@ -1,6 +1,6 @@
 # *************************************************************************
 #
-# Copyright 2020 Xilinx, Inc.
+# Copyright 2023 Xilinx, Inc.
 #
 # Licensed under the Apache License, Version 2.0 (the "License");
 # you may not use this file except in compliance with the License.
@@ -18,4 +18,8 @@
 set ips {
     axi_stream_pipeline
     axi_lite_clock_converter
+    dev_mem_2to1_axi_crossbar
+    sys_mem_7to2_axi_crossbar
+    axi_clock_converter_for_ddr
+    dev_mem_ddr4_controller
 }
